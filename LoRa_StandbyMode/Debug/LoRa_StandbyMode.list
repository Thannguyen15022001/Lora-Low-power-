
LoRa_StandbyMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005798  08005798  00015798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058f8  080058f8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080058f8  080058f8  000158f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005900  08005900  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005900  08005900  00015900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005904  08005904  00015904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08005908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000008c  08005994  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08005994  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db66  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f35  00000000  00000000  0002dc1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002fb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  00030630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e53  00000000  00000000  00031048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5a4  00000000  00000000  00046e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008179b  00000000  00000000  0005543f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6bda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f30  00000000  00000000  000d6c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005780 	.word	0x08005780

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	08005780 	.word	0x08005780

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	1c08      	adds	r0, r1, #0
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f82e 	bl	80002c4 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	0415      	lsls	r5, r2, #16
 8000278:	0c2d      	lsrs	r5, r5, #16
 800027a:	000f      	movs	r7, r1
 800027c:	0001      	movs	r1, r0
 800027e:	002e      	movs	r6, r5
 8000280:	46c6      	mov	lr, r8
 8000282:	4684      	mov	ip, r0
 8000284:	0400      	lsls	r0, r0, #16
 8000286:	0c14      	lsrs	r4, r2, #16
 8000288:	0c00      	lsrs	r0, r0, #16
 800028a:	0c09      	lsrs	r1, r1, #16
 800028c:	4346      	muls	r6, r0
 800028e:	434d      	muls	r5, r1
 8000290:	4360      	muls	r0, r4
 8000292:	4361      	muls	r1, r4
 8000294:	1940      	adds	r0, r0, r5
 8000296:	0c34      	lsrs	r4, r6, #16
 8000298:	1824      	adds	r4, r4, r0
 800029a:	b500      	push	{lr}
 800029c:	42a5      	cmp	r5, r4
 800029e:	d903      	bls.n	80002a8 <__aeabi_lmul+0x34>
 80002a0:	2080      	movs	r0, #128	; 0x80
 80002a2:	0240      	lsls	r0, r0, #9
 80002a4:	4680      	mov	r8, r0
 80002a6:	4441      	add	r1, r8
 80002a8:	0c25      	lsrs	r5, r4, #16
 80002aa:	186d      	adds	r5, r5, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	4359      	muls	r1, r3
 80002b0:	437a      	muls	r2, r7
 80002b2:	0430      	lsls	r0, r6, #16
 80002b4:	1949      	adds	r1, r1, r5
 80002b6:	0424      	lsls	r4, r4, #16
 80002b8:	0c00      	lsrs	r0, r0, #16
 80002ba:	1820      	adds	r0, r4, r0
 80002bc:	1889      	adds	r1, r1, r2
 80002be:	bc80      	pop	{r7}
 80002c0:	46b8      	mov	r8, r7
 80002c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c4 <__udivmoddi4>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	4657      	mov	r7, sl
 80002c8:	464e      	mov	r6, r9
 80002ca:	4645      	mov	r5, r8
 80002cc:	46de      	mov	lr, fp
 80002ce:	b5e0      	push	{r5, r6, r7, lr}
 80002d0:	0004      	movs	r4, r0
 80002d2:	000d      	movs	r5, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b083      	sub	sp, #12
 80002da:	428b      	cmp	r3, r1
 80002dc:	d830      	bhi.n	8000340 <__udivmoddi4+0x7c>
 80002de:	d02d      	beq.n	800033c <__udivmoddi4+0x78>
 80002e0:	4649      	mov	r1, r9
 80002e2:	4650      	mov	r0, sl
 80002e4:	f000 f8ba 	bl	800045c <__clzdi2>
 80002e8:	0029      	movs	r1, r5
 80002ea:	0006      	movs	r6, r0
 80002ec:	0020      	movs	r0, r4
 80002ee:	f000 f8b5 	bl	800045c <__clzdi2>
 80002f2:	1a33      	subs	r3, r6, r0
 80002f4:	4698      	mov	r8, r3
 80002f6:	3b20      	subs	r3, #32
 80002f8:	469b      	mov	fp, r3
 80002fa:	d433      	bmi.n	8000364 <__udivmoddi4+0xa0>
 80002fc:	465a      	mov	r2, fp
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	4642      	mov	r2, r8
 8000304:	001f      	movs	r7, r3
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	001e      	movs	r6, r3
 800030c:	42af      	cmp	r7, r5
 800030e:	d83a      	bhi.n	8000386 <__udivmoddi4+0xc2>
 8000310:	42af      	cmp	r7, r5
 8000312:	d100      	bne.n	8000316 <__udivmoddi4+0x52>
 8000314:	e078      	b.n	8000408 <__udivmoddi4+0x144>
 8000316:	465b      	mov	r3, fp
 8000318:	1ba4      	subs	r4, r4, r6
 800031a:	41bd      	sbcs	r5, r7
 800031c:	2b00      	cmp	r3, #0
 800031e:	da00      	bge.n	8000322 <__udivmoddi4+0x5e>
 8000320:	e075      	b.n	800040e <__udivmoddi4+0x14a>
 8000322:	2200      	movs	r2, #0
 8000324:	2300      	movs	r3, #0
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	465a      	mov	r2, fp
 800032e:	4093      	lsls	r3, r2
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	4642      	mov	r2, r8
 8000336:	4093      	lsls	r3, r2
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	e028      	b.n	800038e <__udivmoddi4+0xca>
 800033c:	4282      	cmp	r2, r0
 800033e:	d9cf      	bls.n	80002e0 <__udivmoddi4+0x1c>
 8000340:	2200      	movs	r2, #0
 8000342:	2300      	movs	r3, #0
 8000344:	9200      	str	r2, [sp, #0]
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <__udivmoddi4+0x8e>
 800034e:	601c      	str	r4, [r3, #0]
 8000350:	605d      	str	r5, [r3, #4]
 8000352:	9800      	ldr	r0, [sp, #0]
 8000354:	9901      	ldr	r1, [sp, #4]
 8000356:	b003      	add	sp, #12
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	46bb      	mov	fp, r7
 800035c:	46b2      	mov	sl, r6
 800035e:	46a9      	mov	r9, r5
 8000360:	46a0      	mov	r8, r4
 8000362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000364:	4642      	mov	r2, r8
 8000366:	2320      	movs	r3, #32
 8000368:	1a9b      	subs	r3, r3, r2
 800036a:	4652      	mov	r2, sl
 800036c:	40da      	lsrs	r2, r3
 800036e:	4641      	mov	r1, r8
 8000370:	0013      	movs	r3, r2
 8000372:	464a      	mov	r2, r9
 8000374:	408a      	lsls	r2, r1
 8000376:	0017      	movs	r7, r2
 8000378:	4642      	mov	r2, r8
 800037a:	431f      	orrs	r7, r3
 800037c:	4653      	mov	r3, sl
 800037e:	4093      	lsls	r3, r2
 8000380:	001e      	movs	r6, r3
 8000382:	42af      	cmp	r7, r5
 8000384:	d9c4      	bls.n	8000310 <__udivmoddi4+0x4c>
 8000386:	2200      	movs	r2, #0
 8000388:	2300      	movs	r3, #0
 800038a:	9200      	str	r2, [sp, #0]
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	4643      	mov	r3, r8
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0d9      	beq.n	8000348 <__udivmoddi4+0x84>
 8000394:	07fb      	lsls	r3, r7, #31
 8000396:	0872      	lsrs	r2, r6, #1
 8000398:	431a      	orrs	r2, r3
 800039a:	4646      	mov	r6, r8
 800039c:	087b      	lsrs	r3, r7, #1
 800039e:	e00e      	b.n	80003be <__udivmoddi4+0xfa>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	d101      	bne.n	80003a8 <__udivmoddi4+0xe4>
 80003a4:	42a2      	cmp	r2, r4
 80003a6:	d80c      	bhi.n	80003c2 <__udivmoddi4+0xfe>
 80003a8:	1aa4      	subs	r4, r4, r2
 80003aa:	419d      	sbcs	r5, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	1924      	adds	r4, r4, r4
 80003b0:	416d      	adcs	r5, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	3e01      	subs	r6, #1
 80003b6:	1824      	adds	r4, r4, r0
 80003b8:	414d      	adcs	r5, r1
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d006      	beq.n	80003cc <__udivmoddi4+0x108>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d9ee      	bls.n	80003a0 <__udivmoddi4+0xdc>
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1924      	adds	r4, r4, r4
 80003c6:	416d      	adcs	r5, r5
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d1f8      	bne.n	80003be <__udivmoddi4+0xfa>
 80003cc:	9800      	ldr	r0, [sp, #0]
 80003ce:	9901      	ldr	r1, [sp, #4]
 80003d0:	465b      	mov	r3, fp
 80003d2:	1900      	adds	r0, r0, r4
 80003d4:	4169      	adcs	r1, r5
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	db24      	blt.n	8000424 <__udivmoddi4+0x160>
 80003da:	002b      	movs	r3, r5
 80003dc:	465a      	mov	r2, fp
 80003de:	4644      	mov	r4, r8
 80003e0:	40d3      	lsrs	r3, r2
 80003e2:	002a      	movs	r2, r5
 80003e4:	40e2      	lsrs	r2, r4
 80003e6:	001c      	movs	r4, r3
 80003e8:	465b      	mov	r3, fp
 80003ea:	0015      	movs	r5, r2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db2a      	blt.n	8000446 <__udivmoddi4+0x182>
 80003f0:	0026      	movs	r6, r4
 80003f2:	409e      	lsls	r6, r3
 80003f4:	0033      	movs	r3, r6
 80003f6:	0026      	movs	r6, r4
 80003f8:	4647      	mov	r7, r8
 80003fa:	40be      	lsls	r6, r7
 80003fc:	0032      	movs	r2, r6
 80003fe:	1a80      	subs	r0, r0, r2
 8000400:	4199      	sbcs	r1, r3
 8000402:	9000      	str	r0, [sp, #0]
 8000404:	9101      	str	r1, [sp, #4]
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x84>
 8000408:	42a3      	cmp	r3, r4
 800040a:	d8bc      	bhi.n	8000386 <__udivmoddi4+0xc2>
 800040c:	e783      	b.n	8000316 <__udivmoddi4+0x52>
 800040e:	4642      	mov	r2, r8
 8000410:	2320      	movs	r3, #32
 8000412:	2100      	movs	r1, #0
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	2200      	movs	r2, #0
 8000418:	9100      	str	r1, [sp, #0]
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	2201      	movs	r2, #1
 800041e:	40da      	lsrs	r2, r3
 8000420:	9201      	str	r2, [sp, #4]
 8000422:	e786      	b.n	8000332 <__udivmoddi4+0x6e>
 8000424:	4642      	mov	r2, r8
 8000426:	2320      	movs	r3, #32
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	002a      	movs	r2, r5
 800042c:	4646      	mov	r6, r8
 800042e:	409a      	lsls	r2, r3
 8000430:	0023      	movs	r3, r4
 8000432:	40f3      	lsrs	r3, r6
 8000434:	4644      	mov	r4, r8
 8000436:	4313      	orrs	r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	40e2      	lsrs	r2, r4
 800043c:	001c      	movs	r4, r3
 800043e:	465b      	mov	r3, fp
 8000440:	0015      	movs	r5, r2
 8000442:	2b00      	cmp	r3, #0
 8000444:	dad4      	bge.n	80003f0 <__udivmoddi4+0x12c>
 8000446:	4642      	mov	r2, r8
 8000448:	002f      	movs	r7, r5
 800044a:	2320      	movs	r3, #32
 800044c:	0026      	movs	r6, r4
 800044e:	4097      	lsls	r7, r2
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	40de      	lsrs	r6, r3
 8000454:	003b      	movs	r3, r7
 8000456:	4333      	orrs	r3, r6
 8000458:	e7cd      	b.n	80003f6 <__udivmoddi4+0x132>
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__clzdi2>:
 800045c:	b510      	push	{r4, lr}
 800045e:	2900      	cmp	r1, #0
 8000460:	d103      	bne.n	800046a <__clzdi2+0xe>
 8000462:	f000 f807 	bl	8000474 <__clzsi2>
 8000466:	3020      	adds	r0, #32
 8000468:	e002      	b.n	8000470 <__clzdi2+0x14>
 800046a:	1c08      	adds	r0, r1, #0
 800046c:	f000 f802 	bl	8000474 <__clzsi2>
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__clzsi2>:
 8000474:	211c      	movs	r1, #28
 8000476:	2301      	movs	r3, #1
 8000478:	041b      	lsls	r3, r3, #16
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0xe>
 800047e:	0c00      	lsrs	r0, r0, #16
 8000480:	3910      	subs	r1, #16
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	4298      	cmp	r0, r3
 8000486:	d301      	bcc.n	800048c <__clzsi2+0x18>
 8000488:	0a00      	lsrs	r0, r0, #8
 800048a:	3908      	subs	r1, #8
 800048c:	091b      	lsrs	r3, r3, #4
 800048e:	4298      	cmp	r0, r3
 8000490:	d301      	bcc.n	8000496 <__clzsi2+0x22>
 8000492:	0900      	lsrs	r0, r0, #4
 8000494:	3904      	subs	r1, #4
 8000496:	a202      	add	r2, pc, #8	; (adr r2, 80004a0 <__clzsi2+0x2c>)
 8000498:	5c10      	ldrb	r0, [r2, r0]
 800049a:	1840      	adds	r0, r0, r1
 800049c:	4770      	bx	lr
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	02020304 	.word	0x02020304
 80004a4:	01010101 	.word	0x01010101
	...

080004b0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	60f8      	str	r0, [r7, #12]
 80004b8:	60b9      	str	r1, [r7, #8]
 80004ba:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 10000);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	b29a      	uxth	r2, r3
 80004c0:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <_write+0x24>)
 80004c2:	68b9      	ldr	r1, [r7, #8]
 80004c4:	4804      	ldr	r0, [pc, #16]	; (80004d8 <_write+0x28>)
 80004c6:	f003 fa99 	bl	80039fc <HAL_UART_Transmit>

	return len;
 80004ca:	687b      	ldr	r3, [r7, #4]
}
 80004cc:	0018      	movs	r0, r3
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b004      	add	sp, #16
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	00002710 	.word	0x00002710
 80004d8:	200002ec 	.word	0x200002ec

080004dc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	0002      	movs	r2, r0
 80004e4:	1dbb      	adds	r3, r7, #6
 80004e6:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_8){
 80004e8:	1dbb      	adds	r3, r7, #6
 80004ea:	881a      	ldrh	r2, [r3, #0]
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d112      	bne.n	800051a <HAL_GPIO_EXTI_Callback+0x3e>
		RFM95_Receive(&RFM95, rx, sizeof(rx));
 80004f4:	490b      	ldr	r1, [pc, #44]	; (8000524 <HAL_GPIO_EXTI_Callback+0x48>)
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <HAL_GPIO_EXTI_Callback+0x4c>)
 80004f8:	22c8      	movs	r2, #200	; 0xc8
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 fdfa 	bl	80010f4 <RFM95_Receive>
		sprintf(buffer,"Data receive: %s \n",rx);
 8000500:	4a08      	ldr	r2, [pc, #32]	; (8000524 <HAL_GPIO_EXTI_Callback+0x48>)
 8000502:	490a      	ldr	r1, [pc, #40]	; (800052c <HAL_GPIO_EXTI_Callback+0x50>)
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <HAL_GPIO_EXTI_Callback+0x54>)
 8000506:	0018      	movs	r0, r3
 8000508:	f003 ffea 	bl	80044e0 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)buffer ,sizeof(buffer), 1000);
 800050c:	23fa      	movs	r3, #250	; 0xfa
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	4907      	ldr	r1, [pc, #28]	; (8000530 <HAL_GPIO_EXTI_Callback+0x54>)
 8000512:	4808      	ldr	r0, [pc, #32]	; (8000534 <HAL_GPIO_EXTI_Callback+0x58>)
 8000514:	22ff      	movs	r2, #255	; 0xff
 8000516:	f003 fa71 	bl	80039fc <HAL_UART_Transmit>
	}
}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b002      	add	sp, #8
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	200000a8 	.word	0x200000a8
 8000528:	2000027c 	.word	0x2000027c
 800052c:	08005798 	.word	0x08005798
 8000530:	20000170 	.word	0x20000170
 8000534:	200002ec 	.word	0x200002ec

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f001 f944 	bl	80017c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f88c 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f95e 	bl	8000804 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000548:	f000 f8f4 	bl	8000734 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800054c:	f000 f92a 	bl	80007a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	RFM95.Module.NSS.Port = GPIOB;
 8000550:	4b35      	ldr	r3, [pc, #212]	; (8000628 <main+0xf0>)
 8000552:	4a36      	ldr	r2, [pc, #216]	; (800062c <main+0xf4>)
 8000554:	601a      	str	r2, [r3, #0]
	RFM95.Module.NSS.Pin = GPIO_PIN_6;
 8000556:	4b34      	ldr	r3, [pc, #208]	; (8000628 <main+0xf0>)
 8000558:	2240      	movs	r2, #64	; 0x40
 800055a:	809a      	strh	r2, [r3, #4]
	RFM95.Module.SPI = &hspi1;
 800055c:	4b32      	ldr	r3, [pc, #200]	; (8000628 <main+0xf0>)
 800055e:	4a34      	ldr	r2, [pc, #208]	; (8000630 <main+0xf8>)
 8000560:	609a      	str	r2, [r3, #8]

	if(__HAL_PWR_GET_FLAG(PWR_FLAG_WU) == 1)
 8000562:	4b34      	ldr	r3, [pc, #208]	; (8000634 <main+0xfc>)
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	2b01      	cmp	r3, #1
 800056c:	d11f      	bne.n	80005ae <main+0x76>
	{
		  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 800056e:	4b31      	ldr	r3, [pc, #196]	; (8000634 <main+0xfc>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	4b30      	ldr	r3, [pc, #192]	; (8000634 <main+0xfc>)
 8000574:	2108      	movs	r1, #8
 8000576:	430a      	orrs	r2, r1
 8000578:	601a      	str	r2, [r3, #0]
		  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800057a:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <main+0xfc>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <main+0xfc>)
 8000580:	2104      	movs	r1, #4
 8000582:	430a      	orrs	r2, r1
 8000584:	601a      	str	r2, [r3, #0]
			RFM95_Receive(&RFM95, rx, sizeof(rx));
 8000586:	492c      	ldr	r1, [pc, #176]	; (8000638 <main+0x100>)
 8000588:	4b27      	ldr	r3, [pc, #156]	; (8000628 <main+0xf0>)
 800058a:	22c8      	movs	r2, #200	; 0xc8
 800058c:	0018      	movs	r0, r3
 800058e:	f000 fdb1 	bl	80010f4 <RFM95_Receive>
			sprintf(buffer,"Data receive from WAKE UP: %s \n",rx);
 8000592:	4a29      	ldr	r2, [pc, #164]	; (8000638 <main+0x100>)
 8000594:	4929      	ldr	r1, [pc, #164]	; (800063c <main+0x104>)
 8000596:	4b2a      	ldr	r3, [pc, #168]	; (8000640 <main+0x108>)
 8000598:	0018      	movs	r0, r3
 800059a:	f003 ffa1 	bl	80044e0 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)buffer ,sizeof(buffer), 1000);
 800059e:	23fa      	movs	r3, #250	; 0xfa
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	4927      	ldr	r1, [pc, #156]	; (8000640 <main+0x108>)
 80005a4:	4827      	ldr	r0, [pc, #156]	; (8000644 <main+0x10c>)
 80005a6:	22ff      	movs	r2, #255	; 0xff
 80005a8:	f003 fa28 	bl	80039fc <HAL_UART_Transmit>
 80005ac:	e023      	b.n	80005f6 <main+0xbe>

	  }
	  else
	  {

			RFM95.Frequency = 865;
 80005ae:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <main+0xf0>)
 80005b0:	4a25      	ldr	r2, [pc, #148]	; (8000648 <main+0x110>)
 80005b2:	819a      	strh	r2, [r3, #12]
			RFM95.SpredingFactor = SF12;
 80005b4:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <main+0xf0>)
 80005b6:	220c      	movs	r2, #12
 80005b8:	739a      	strb	r2, [r3, #14]
			RFM95.BandWidth = BW_500;
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <main+0xf0>)
 80005bc:	2209      	movs	r2, #9
 80005be:	73da      	strb	r2, [r3, #15]
			RFM95.CodingRate = CR_48;
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <main+0xf0>)
 80005c2:	2204      	movs	r2, #4
 80005c4:	741a      	strb	r2, [r3, #16]
			RFM95.Power = PW_10DBM;
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <main+0xf0>)
 80005c8:	2208      	movs	r2, #8
 80005ca:	745a      	strb	r2, [r3, #17]
			RFM95.Preamble = 8;
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <main+0xf0>)
 80005ce:	2208      	movs	r2, #8
 80005d0:	825a      	strh	r2, [r3, #18]
			RFM95.LNA = LNA_G1;
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <main+0xf0>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	751a      	strb	r2, [r3, #20]
			RFM95.Timeout = 1023;
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <main+0xf0>)
 80005da:	4a1c      	ldr	r2, [pc, #112]	; (800064c <main+0x114>)
 80005dc:	82da      	strh	r2, [r3, #22]

			RFM95_Init(&RFM95);
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <main+0xf0>)
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 f972 	bl	80008ca <RFM95_Init>
			RFM95_enableReceive(&RFM95);
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <main+0xf0>)
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 f9fa 	bl	80009e2 <RFM95_enableReceive>
			HAL_Delay(5000);
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <main+0x118>)
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 f959 	bl	80018a8 <HAL_Delay>
	  }
	  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80005f6:	2380      	movs	r3, #128	; 0x80
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	0018      	movs	r0, r3
 80005fc:	f001 fc0e 	bl	8001e1c <HAL_PWR_EnableWakeUpPin>



    /* USER CODE BEGIN 3 */

	  RFM95_Transmit(&RFM95,(uint8_t*) Buff,sizeof(Buff),1000);
 8000600:	23fa      	movs	r3, #250	; 0xfa
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4913      	ldr	r1, [pc, #76]	; (8000654 <main+0x11c>)
 8000606:	4808      	ldr	r0, [pc, #32]	; (8000628 <main+0xf0>)
 8000608:	2219      	movs	r2, #25
 800060a:	f000 fc8e 	bl	8000f2a <RFM95_Transmit>
	  printf("Go to standby mode after 2 second");
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <main+0x120>)
 8000610:	0018      	movs	r0, r3
 8000612:	f003 ff4b 	bl	80044ac <iprintf>
	  HAL_Delay(2000);
 8000616:	23fa      	movs	r3, #250	; 0xfa
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	0018      	movs	r0, r3
 800061c:	f001 f944 	bl	80018a8 <HAL_Delay>
	  HAL_PWR_EnterSTANDBYMode();
 8000620:	f001 fc0c 	bl	8001e3c <HAL_PWR_EnterSTANDBYMode>
	  RFM95_Transmit(&RFM95,(uint8_t*) Buff,sizeof(Buff),1000);
 8000624:	e7ec      	b.n	8000600 <main+0xc8>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	2000027c 	.word	0x2000027c
 800062c:	50000400 	.word	0x50000400
 8000630:	20000294 	.word	0x20000294
 8000634:	40007000 	.word	0x40007000
 8000638:	200000a8 	.word	0x200000a8
 800063c:	080057ac 	.word	0x080057ac
 8000640:	20000170 	.word	0x20000170
 8000644:	200002ec 	.word	0x200002ec
 8000648:	00000361 	.word	0x00000361
 800064c:	000003ff 	.word	0x000003ff
 8000650:	00001388 	.word	0x00001388
 8000654:	20000000 	.word	0x20000000
 8000658:	080057cc 	.word	0x080057cc

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b09f      	sub	sp, #124	; 0x7c
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	2440      	movs	r4, #64	; 0x40
 8000664:	193b      	adds	r3, r7, r4
 8000666:	0018      	movs	r0, r3
 8000668:	2338      	movs	r3, #56	; 0x38
 800066a:	001a      	movs	r2, r3
 800066c:	2100      	movs	r1, #0
 800066e:	f003 ff15 	bl	800449c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000672:	232c      	movs	r3, #44	; 0x2c
 8000674:	18fb      	adds	r3, r7, r3
 8000676:	0018      	movs	r0, r3
 8000678:	2314      	movs	r3, #20
 800067a:	001a      	movs	r2, r3
 800067c:	2100      	movs	r1, #0
 800067e:	f003 ff0d 	bl	800449c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	0018      	movs	r0, r3
 8000686:	2328      	movs	r3, #40	; 0x28
 8000688:	001a      	movs	r2, r3
 800068a:	2100      	movs	r1, #0
 800068c:	f003 ff06 	bl	800449c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	4b26      	ldr	r3, [pc, #152]	; (800072c <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a26      	ldr	r2, [pc, #152]	; (8000730 <SystemClock_Config+0xd4>)
 8000696:	401a      	ands	r2, r3
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <SystemClock_Config+0xd0>)
 800069a:	2180      	movs	r1, #128	; 0x80
 800069c:	0109      	lsls	r1, r1, #4
 800069e:	430a      	orrs	r2, r1
 80006a0:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006a2:	0021      	movs	r1, r4
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2210      	movs	r2, #16
 80006a8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2201      	movs	r2, #1
 80006ae:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	22a0      	movs	r2, #160	; 0xa0
 80006ba:	0212      	lsls	r2, r2, #8
 80006bc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2200      	movs	r2, #0
 80006c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	0018      	movs	r0, r3
 80006c8:	f001 fbce 	bl	8001e68 <HAL_RCC_OscConfig>
 80006cc:	1e03      	subs	r3, r0, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006d0:	f000 f8f6 	bl	80008c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	212c      	movs	r1, #44	; 0x2c
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	220f      	movs	r2, #15
 80006da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2100      	movs	r1, #0
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 ff89 	bl	8002610 <HAL_RCC_ClockConfig>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000702:	f000 f8dd 	bl	80008c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2202      	movs	r2, #2
 800070a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	0018      	movs	r0, r3
 8000716:	f002 f99f 	bl	8002a58 <HAL_RCCEx_PeriphCLKConfig>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800071e:	f000 f8cf 	bl	80008c0 <Error_Handler>
  }
}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b01f      	add	sp, #124	; 0x7c
 8000728:	bd90      	pop	{r4, r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	40007000 	.word	0x40007000
 8000730:	ffffe7ff 	.word	0xffffe7ff

08000734 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_SPI1_Init+0x68>)
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <MX_SPI1_Init+0x6c>)
 800073c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_SPI1_Init+0x68>)
 8000740:	2282      	movs	r2, #130	; 0x82
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_SPI1_Init+0x68>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_SPI1_Init+0x68>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_SPI1_Init+0x68>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_SPI1_Init+0x68>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_SPI1_Init+0x68>)
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	0092      	lsls	r2, r2, #2
 8000764:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_SPI1_Init+0x68>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800076c:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_SPI1_Init+0x68>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_SPI1_Init+0x68>)
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_SPI1_Init+0x68>)
 800077a:	2200      	movs	r2, #0
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800077e:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_SPI1_Init+0x68>)
 8000780:	2207      	movs	r2, #7
 8000782:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <MX_SPI1_Init+0x68>)
 8000786:	0018      	movs	r0, r3
 8000788:	f002 fada 	bl	8002d40 <HAL_SPI_Init>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d001      	beq.n	8000794 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000790:	f000 f896 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	20000294 	.word	0x20000294
 80007a0:	40013000 	.word	0x40013000

080007a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_USART2_UART_Init+0x5c>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007b0:	22e1      	movs	r2, #225	; 0xe1
 80007b2:	0252      	lsls	r2, r2, #9
 80007b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007e8:	0018      	movs	r0, r3
 80007ea:	f003 f8b3 	bl	8003954 <HAL_UART_Init>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007f2:	f000 f865 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200002ec 	.word	0x200002ec
 8000800:	40004400 	.word	0x40004400

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b089      	sub	sp, #36	; 0x24
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	240c      	movs	r4, #12
 800080c:	193b      	adds	r3, r7, r4
 800080e:	0018      	movs	r0, r3
 8000810:	2314      	movs	r3, #20
 8000812:	001a      	movs	r2, r3
 8000814:	2100      	movs	r1, #0
 8000816:	f003 fe41 	bl	800449c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <MX_GPIO_Init+0xb4>)
 800081c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800081e:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000820:	2101      	movs	r1, #1
 8000822:	430a      	orrs	r2, r1
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082a:	2201      	movs	r2, #1
 800082c:	4013      	ands	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000838:	2102      	movs	r1, #2
 800083a:	430a      	orrs	r2, r1
 800083c:	62da      	str	r2, [r3, #44]	; 0x2c
 800083e:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000842:	2202      	movs	r2, #2
 8000844:	4013      	ands	r3, r2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 800084a:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <MX_GPIO_Init+0xb8>)
 800084c:	2200      	movs	r2, #0
 800084e:	2140      	movs	r1, #64	; 0x40
 8000850:	0018      	movs	r0, r3
 8000852:	f001 faa9 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	2280      	movs	r2, #128	; 0x80
 800085a:	0052      	lsls	r2, r2, #1
 800085c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085e:	193b      	adds	r3, r7, r4
 8000860:	2288      	movs	r2, #136	; 0x88
 8000862:	0352      	lsls	r2, r2, #13
 8000864:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000866:	193b      	adds	r3, r7, r4
 8000868:	2202      	movs	r2, #2
 800086a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	193a      	adds	r2, r7, r4
 800086e:	23a0      	movs	r3, #160	; 0xa0
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f001 f919 	bl	8001aac <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 800087a:	0021      	movs	r1, r4
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2240      	movs	r2, #64	; 0x40
 8000880:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2201      	movs	r2, #1
 8000886:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2201      	movs	r2, #1
 800088c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000894:	187b      	adds	r3, r7, r1
 8000896:	4a09      	ldr	r2, [pc, #36]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000898:	0019      	movs	r1, r3
 800089a:	0010      	movs	r0, r2
 800089c:	f001 f906 	bl	8001aac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	2007      	movs	r0, #7
 80008a6:	f001 f8cf 	bl	8001a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80008aa:	2007      	movs	r0, #7
 80008ac:	f001 f8e1 	bl	8001a72 <HAL_NVIC_EnableIRQ>

}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b009      	add	sp, #36	; 0x24
 80008b6:	bd90      	pop	{r4, r7, pc}
 80008b8:	40021000 	.word	0x40021000
 80008bc:	50000400 	.word	0x50000400

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>

080008ca <RFM95_Init>:
 */

#include"rfm95.h"

bool RFM95_Init(RFM95_HandleTypedef *RFM_Init)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
	/*Reset Module*/
//	RFM95_reset(RFM_Init);   Reset by RST

	/*Into Sleep Mode*/
	if (RFM95_setMode(RFM_Init, SLEEP_MODE | LORA_MODE) == false)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 f89e 	bl	8000a18 <RFM95_setMode>
 80008dc:	0003      	movs	r3, r0
 80008de:	001a      	movs	r2, r3
 80008e0:	2301      	movs	r3, #1
 80008e2:	4053      	eors	r3, r2
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <RFM95_Init+0x24>
		return false;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e075      	b.n	80009da <RFM95_Init+0x110>

	/*Enable ExplicitHeaderMode */
	if (RFM95_setExplicitHeaderMode(RFM_Init) == false)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 f8c8 	bl	8000a86 <RFM95_setExplicitHeaderMode>
 80008f6:	0003      	movs	r3, r0
 80008f8:	001a      	movs	r2, r3
 80008fa:	2301      	movs	r3, #1
 80008fc:	4053      	eors	r3, r2
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <RFM95_Init+0x3e>
		return false;
 8000904:	2300      	movs	r3, #0
 8000906:	e068      	b.n	80009da <RFM95_Init+0x110>

	/*Configure Frequency*/
	if (RFM95_setFrequency(RFM_Init) != RFM95_OK)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	0018      	movs	r0, r3
 800090c:	f000 f8ec 	bl	8000ae8 <RFM95_setFrequency>
 8000910:	0003      	movs	r3, r0
 8000912:	2b01      	cmp	r3, #1
 8000914:	d001      	beq.n	800091a <RFM95_Init+0x50>
		return false;
 8000916:	2300      	movs	r3, #0
 8000918:	e05f      	b.n	80009da <RFM95_Init+0x110>

	/*Reset base addr */
	if (RFM95_resetBaseAddr(RFM_Init) == false)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	0018      	movs	r0, r3
 800091e:	f000 f915 	bl	8000b4c <RFM95_resetBaseAddr>
 8000922:	0003      	movs	r3, r0
 8000924:	001a      	movs	r2, r3
 8000926:	2301      	movs	r3, #1
 8000928:	4053      	eors	r3, r2
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <RFM95_Init+0x6a>
		return false;
 8000930:	2300      	movs	r3, #0
 8000932:	e052      	b.n	80009da <RFM95_Init+0x110>

	/*Set LNA*/
	if (RFM95_setLNA(RFM_Init) != RFM95_OK)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	0018      	movs	r0, r3
 8000938:	f000 f927 	bl	8000b8a <RFM95_setLNA>
 800093c:	0003      	movs	r3, r0
 800093e:	2b01      	cmp	r3, #1
 8000940:	d001      	beq.n	8000946 <RFM95_Init+0x7c>
		return false;
 8000942:	2300      	movs	r3, #0
 8000944:	e049      	b.n	80009da <RFM95_Init+0x110>

	/*Set power for Tx*/
	if (RFM95_setPower(RFM_Init, PW_PABOOST) != RFM95_OK)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	0018      	movs	r0, r3
 800094c:	f000 f93b 	bl	8000bc6 <RFM95_setPower>
 8000950:	0003      	movs	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d001      	beq.n	800095a <RFM95_Init+0x90>
		return false;
 8000956:	2300      	movs	r3, #0
 8000958:	e03f      	b.n	80009da <RFM95_Init+0x110>

	/*Set BandWidth*/
	if (RFM95_setBandWidth(RFM_Init) != RFM95_OK)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	0018      	movs	r0, r3
 800095e:	f000 f985 	bl	8000c6c <RFM95_setBandWidth>
 8000962:	0003      	movs	r3, r0
 8000964:	2b01      	cmp	r3, #1
 8000966:	d001      	beq.n	800096c <RFM95_Init+0xa2>
		return false;
 8000968:	2300      	movs	r3, #0
 800096a:	e036      	b.n	80009da <RFM95_Init+0x110>

	/*Set SpredingFactor*/
	if (RFM95_setSpredingFactor(RFM_Init) != RFM95_OK)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	0018      	movs	r0, r3
 8000970:	f000 f9b2 	bl	8000cd8 <RFM95_setSpredingFactor>
 8000974:	0003      	movs	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	d001      	beq.n	800097e <RFM95_Init+0xb4>
		return false;
 800097a:	2300      	movs	r3, #0
 800097c:	e02d      	b.n	80009da <RFM95_Init+0x110>

	/*Set CodingRate*/
	if (RFM95_setCodingRate(RFM_Init) != RFM95_OK)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	0018      	movs	r0, r3
 8000982:	f000 fa48 	bl	8000e16 <RFM95_setCodingRate>
 8000986:	0003      	movs	r3, r0
 8000988:	2b01      	cmp	r3, #1
 800098a:	d001      	beq.n	8000990 <RFM95_Init+0xc6>
		return false;
 800098c:	2300      	movs	r3, #0
 800098e:	e024      	b.n	80009da <RFM95_Init+0x110>

	/*Set reamble*/
	if (RFM95_setPreamble(RFM_Init) != RFM95_OK)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	0018      	movs	r0, r3
 8000994:	f000 fa75 	bl	8000e82 <RFM95_setPreamble>
 8000998:	0003      	movs	r3, r0
 800099a:	2b01      	cmp	r3, #1
 800099c:	d001      	beq.n	80009a2 <RFM95_Init+0xd8>
		return false;
 800099e:	2300      	movs	r3, #0
 80009a0:	e01b      	b.n	80009da <RFM95_Init+0x110>

	/*Set timeout*/
	if (RFM95_setTimeout(RFM_Init) != RFM95_OK)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	0018      	movs	r0, r3
 80009a6:	f000 fc53 	bl	8001250 <RFM95_setTimeout>
 80009aa:	0003      	movs	r3, r0
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d001      	beq.n	80009b4 <RFM95_Init+0xea>
		return false;
 80009b0:	2300      	movs	r3, #0
 80009b2:	e012      	b.n	80009da <RFM95_Init+0x110>

	RFM95_mappingDIO0(RFM_Init);   //rx done
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 f820 	bl	80009fc <RFM95_mappingDIO0>

	/*Set Stanby Mode*/
	if (RFM95_setMode(RFM_Init, STDBY_MODE | LORA_MODE) == false)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2181      	movs	r1, #129	; 0x81
 80009c0:	0018      	movs	r0, r3
 80009c2:	f000 f829 	bl	8000a18 <RFM95_setMode>
 80009c6:	0003      	movs	r3, r0
 80009c8:	001a      	movs	r2, r3
 80009ca:	2301      	movs	r3, #1
 80009cc:	4053      	eors	r3, r2
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <RFM95_Init+0x10e>
		return false;
 80009d4:	2300      	movs	r3, #0
 80009d6:	e000      	b.n	80009da <RFM95_Init+0x110>



	return true;
 80009d8:	2301      	movs	r3, #1
}
 80009da:	0018      	movs	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	b002      	add	sp, #8
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <RFM95_enableReceive>:
//			GPIO_PIN_SET);
//
//	HAL_Delay(10);
//}

void RFM95_enableReceive(RFM95_HandleTypedef *RFM_Init){
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
	RFM95_setMode(RFM_Init, RXCONTINUOUS_MODE| LORA_MODE);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2185      	movs	r1, #133	; 0x85
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 f812 	bl	8000a18 <RFM95_setMode>
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b002      	add	sp, #8
 80009fa:	bd80      	pop	{r7, pc}

080009fc <RFM95_mappingDIO0>:
void RFM95_mappingDIO0(RFM95_HandleTypedef *RFM_Init){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	RFM95_writeByteRes(RFM_Init, LR_REG_DIOMAPPING1, (uint8_t)0x3F);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	223f      	movs	r2, #63	; 0x3f
 8000a08:	2140      	movs	r1, #64	; 0x40
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 fd2f 	bl	800146e <RFM95_writeByteRes>
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b002      	add	sp, #8
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <RFM95_setMode>:
bool RFM95_setMode(RFM95_HandleTypedef *RFM_Init, uint8_t Mode)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	000a      	movs	r2, r1
 8000a22:	1cfb      	adds	r3, r7, #3
 8000a24:	701a      	strb	r2, [r3, #0]
	uint8_t buffer = 0;
 8000a26:	210e      	movs	r1, #14
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
	uint8_t dataWrite = 0;
 8000a2e:	230f      	movs	r3, #15
 8000a30:	18fb      	adds	r3, r7, r3
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]

	if (RFM95_readByteRes(RFM_Init, LR_REG_OPMODE, &buffer) != RFM95_OK)
 8000a36:	187a      	adds	r2, r7, r1
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f000 fc73 	bl	8001328 <RFM95_readByteRes>
 8000a42:	0003      	movs	r3, r0
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d001      	beq.n	8000a4c <RFM95_setMode+0x34>
	{
		return false;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	e018      	b.n	8000a7e <RFM95_setMode+0x66>
	}
	else
	{
		dataWrite = (uint8_t) ((Mode) | (buffer & RESET_MODE));
 8000a4c:	230e      	movs	r3, #14
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2207      	movs	r2, #7
 8000a54:	4393      	bics	r3, r2
 8000a56:	b2d9      	uxtb	r1, r3
 8000a58:	200f      	movs	r0, #15
 8000a5a:	183b      	adds	r3, r7, r0
 8000a5c:	1cfa      	adds	r2, r7, #3
 8000a5e:	7812      	ldrb	r2, [r2, #0]
 8000a60:	430a      	orrs	r2, r1
 8000a62:	701a      	strb	r2, [r3, #0]

		if (RFM95_writeByteRes(RFM_Init, LR_REG_OPMODE, dataWrite) != RFM95_OK)
 8000a64:	183b      	adds	r3, r7, r0
 8000a66:	781a      	ldrb	r2, [r3, #0]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f000 fcfe 	bl	800146e <RFM95_writeByteRes>
 8000a72:	0003      	movs	r3, r0
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d001      	beq.n	8000a7c <RFM95_setMode+0x64>
		{
			return false;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	e000      	b.n	8000a7e <RFM95_setMode+0x66>
		}
		else
		{
			return true;
 8000a7c:	2301      	movs	r3, #1
		}
	}

}
 8000a7e:	0018      	movs	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b004      	add	sp, #16
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <RFM95_setExplicitHeaderMode>:

bool RFM95_setExplicitHeaderMode(RFM95_HandleTypedef *RFM_Init)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b084      	sub	sp, #16
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
	uint8_t dataWrite = 0;
 8000a8e:	230f      	movs	r3, #15
 8000a90:	18fb      	adds	r3, r7, r3
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
	uint8_t buffer = 0;
 8000a96:	210e      	movs	r1, #14
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]

	if (RFM95_readByteRes(RFM_Init, LR_REG_MODEMCONFIG1, &buffer) != RFM95_OK)
 8000a9e:	187a      	adds	r2, r7, r1
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	211d      	movs	r1, #29
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f000 fc3f 	bl	8001328 <RFM95_readByteRes>
 8000aaa:	0003      	movs	r3, r0
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d001      	beq.n	8000ab4 <RFM95_setExplicitHeaderMode+0x2e>
	{
		return false;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	e014      	b.n	8000ade <RFM95_setExplicitHeaderMode+0x58>
	}
	else
	{
		dataWrite = (buffer & EN_EXPLICITHEADERMODE);
 8000ab4:	230e      	movs	r3, #14
 8000ab6:	18fb      	adds	r3, r7, r3
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	200f      	movs	r0, #15
 8000abc:	183b      	adds	r3, r7, r0
 8000abe:	2101      	movs	r1, #1
 8000ac0:	438a      	bics	r2, r1
 8000ac2:	701a      	strb	r2, [r3, #0]

		if (RFM95_writeByteRes(RFM_Init, LR_REG_MODEMCONFIG1, dataWrite)
 8000ac4:	183b      	adds	r3, r7, r0
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	211d      	movs	r1, #29
 8000acc:	0018      	movs	r0, r3
 8000ace:	f000 fcce 	bl	800146e <RFM95_writeByteRes>
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d001      	beq.n	8000adc <RFM95_setExplicitHeaderMode+0x56>
				!= RFM95_OK)
		{
			return false;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e000      	b.n	8000ade <RFM95_setExplicitHeaderMode+0x58>
		}
		else
		{
			return true;
 8000adc:	2301      	movs	r3, #1
		}
	}
}
 8000ade:	0018      	movs	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b004      	add	sp, #16
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <RFM95_setFrequency>:

RFM95_StatusTypedef RFM95_setFrequency(RFM95_HandleTypedef *RFM_Init)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	uint32_t result = (RFM_Init->Frequency << 19) >> 5;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	899b      	ldrh	r3, [r3, #12]
 8000af4:	04db      	lsls	r3, r3, #19
 8000af6:	115b      	asrs	r3, r3, #5
 8000af8:	60fb      	str	r3, [r7, #12]

	uint8_t freq[3] = { 0 };
 8000afa:	2008      	movs	r0, #8
 8000afc:	183b      	adds	r3, r7, r0
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <RFM95_setFrequency+0x60>)
 8000b00:	8812      	ldrh	r2, [r2, #0]
 8000b02:	801a      	strh	r2, [r3, #0]
 8000b04:	2202      	movs	r2, #2
 8000b06:	2100      	movs	r1, #0
 8000b08:	5499      	strb	r1, [r3, r2]

	freq[0] = (uint8_t) (result >> 16);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	0c1b      	lsrs	r3, r3, #16
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	183b      	adds	r3, r7, r0
 8000b12:	701a      	strb	r2, [r3, #0]

	freq[1] = (uint8_t) (result >> 8);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	0a1b      	lsrs	r3, r3, #8
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	183b      	adds	r3, r7, r0
 8000b1c:	705a      	strb	r2, [r3, #1]

	freq[2] = (uint8_t) (result >> 0);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	183b      	adds	r3, r7, r0
 8000b24:	709a      	strb	r2, [r3, #2]

	if (RFM95_writeBurstRes(RFM_Init, LR_REG_FRFMSB, freq, sizeof(freq))
 8000b26:	183a      	adds	r2, r7, r0
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	2106      	movs	r1, #6
 8000b2e:	f000 fc30 	bl	8001392 <RFM95_writeBurstRes>
 8000b32:	0003      	movs	r3, r0
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d001      	beq.n	8000b3c <RFM95_setFrequency+0x54>
			!= RFM95_OK)
	{
		return RFM95_ERROR;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e000      	b.n	8000b3e <RFM95_setFrequency+0x56>
	}
	else
	{
		return RFM95_OK;
 8000b3c:	2301      	movs	r3, #1
	}
}
 8000b3e:	0018      	movs	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b004      	add	sp, #16
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	080057f0 	.word	0x080057f0

08000b4c <RFM95_resetBaseAddr>:

bool RFM95_resetBaseAddr(RFM95_HandleTypedef *RFM_Init)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	if (RFM95_writeByteRes(RFM_Init, LR_REG_FIFOTXBASEADDR,
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	210e      	movs	r1, #14
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f000 fc87 	bl	800146e <RFM95_writeByteRes>
 8000b60:	0003      	movs	r3, r0
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d001      	beq.n	8000b6a <RFM95_resetBaseAddr+0x1e>
			(uint8_t) ADD_RESET_TX) != RFM95_OK)
	{
		return false;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e00b      	b.n	8000b82 <RFM95_resetBaseAddr+0x36>
	}
	else if (RFM95_writeByteRes(RFM_Init, LR_REG_FIFORXBASEADDR,
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	210f      	movs	r1, #15
 8000b70:	0018      	movs	r0, r3
 8000b72:	f000 fc7c 	bl	800146e <RFM95_writeByteRes>
 8000b76:	0003      	movs	r3, r0
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d001      	beq.n	8000b80 <RFM95_resetBaseAddr+0x34>
			(uint8_t) ADD_RESET_RX) != RFM95_OK)
	{
		return false;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	e000      	b.n	8000b82 <RFM95_resetBaseAddr+0x36>
	}
	else
	{
		return true;
 8000b80:	2301      	movs	r3, #1
	}
}
 8000b82:	0018      	movs	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b002      	add	sp, #8
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <RFM95_setLNA>:

RFM95_StatusTypedef RFM95_setLNA(RFM95_HandleTypedef *RFM_Init)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b084      	sub	sp, #16
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
	uint8_t dataWrite = (uint8_t) ((RFM_Init->LNA << 5) | BOOST_ON);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	7d1b      	ldrb	r3, [r3, #20]
 8000b96:	015b      	lsls	r3, r3, #5
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	200f      	movs	r0, #15
 8000b9c:	183b      	adds	r3, r7, r0
 8000b9e:	2103      	movs	r1, #3
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	701a      	strb	r2, [r3, #0]

	if (RFM95_writeByteRes(RFM_Init, LR_REG_LNA, dataWrite) != RFM95_OK)
 8000ba4:	183b      	adds	r3, r7, r0
 8000ba6:	781a      	ldrb	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	210c      	movs	r1, #12
 8000bac:	0018      	movs	r0, r3
 8000bae:	f000 fc5e 	bl	800146e <RFM95_writeByteRes>
 8000bb2:	0003      	movs	r3, r0
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d001      	beq.n	8000bbc <RFM95_setLNA+0x32>
	{
		return RFM95_ERROR;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e000      	b.n	8000bbe <RFM95_setLNA+0x34>
	}
	else
	{
		return RFM95_OK;
 8000bbc:	2301      	movs	r3, #1
	}
}
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b004      	add	sp, #16
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <RFM95_setPower>:

RFM95_StatusTypedef RFM95_setPower(RFM95_HandleTypedef *RFM_Init,
		uint8_t powerMode)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b084      	sub	sp, #16
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	000a      	movs	r2, r1
 8000bd0:	1cfb      	adds	r3, r7, #3
 8000bd2:	701a      	strb	r2, [r3, #0]
	uint8_t dataWrite = 0;
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]

	if (powerMode == PW_PABOOST)
 8000bdc:	1cfb      	adds	r3, r7, #3
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b80      	cmp	r3, #128	; 0x80
 8000be2:	d124      	bne.n	8000c2e <RFM95_setPower+0x68>
	{
		/*PA_BOOST*/
		if (RFM_Init->Power > 17)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	7c5b      	ldrb	r3, [r3, #17]
 8000be8:	2b11      	cmp	r3, #17
 8000bea:	d903      	bls.n	8000bf4 <RFM95_setPower+0x2e>
		{
			RFM_Init->Power = 17;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2211      	movs	r2, #17
 8000bf0:	745a      	strb	r2, [r3, #17]
 8000bf2:	e006      	b.n	8000c02 <RFM95_setPower+0x3c>
		}
		else if (RFM_Init->Power < 2)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7c5b      	ldrb	r3, [r3, #17]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d802      	bhi.n	8000c02 <RFM95_setPower+0x3c>
		{
			RFM_Init->Power = 2;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2202      	movs	r2, #2
 8000c00:	745a      	strb	r2, [r3, #17]
		}
		dataWrite = (PW_PABOOST | RFM_Init->Power);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7c5a      	ldrb	r2, [r3, #17]
 8000c06:	200f      	movs	r0, #15
 8000c08:	183b      	adds	r3, r7, r0
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	4249      	negs	r1, r1
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	701a      	strb	r2, [r3, #0]
		if (RFM95_writeByteRes(RFM_Init, LR_REG_PACONFIG, dataWrite)
 8000c12:	183b      	adds	r3, r7, r0
 8000c14:	781a      	ldrb	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2109      	movs	r1, #9
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 fc27 	bl	800146e <RFM95_writeByteRes>
 8000c20:	0003      	movs	r3, r0
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d001      	beq.n	8000c2a <RFM95_setPower+0x64>
				!= RFM95_OK)
		{
			return RFM95_ERROR;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e01c      	b.n	8000c64 <RFM95_setPower+0x9e>
		}
		else
		{
			return RFM95_OK;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e01a      	b.n	8000c64 <RFM95_setPower+0x9e>
		}
	}
	else
	{
		/*RFO*/
		if (RFM_Init->Power > 14)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	7c5b      	ldrb	r3, [r3, #17]
 8000c32:	2b0e      	cmp	r3, #14
 8000c34:	d902      	bls.n	8000c3c <RFM95_setPower+0x76>
		{
			RFM_Init->Power = 14;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	220e      	movs	r2, #14
 8000c3a:	745a      	strb	r2, [r3, #17]
		}
		else if (RFM_Init->Power < 0)
		{
			RFM_Init->Power = 0;
		}
		dataWrite = (PW_RFO | RFM_Init->Power);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	7c5a      	ldrb	r2, [r3, #17]
 8000c40:	200f      	movs	r0, #15
 8000c42:	183b      	adds	r3, r7, r0
 8000c44:	2170      	movs	r1, #112	; 0x70
 8000c46:	430a      	orrs	r2, r1
 8000c48:	701a      	strb	r2, [r3, #0]
		if (RFM95_writeByteRes(RFM_Init, LR_REG_PACONFIG, dataWrite)
 8000c4a:	183b      	adds	r3, r7, r0
 8000c4c:	781a      	ldrb	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2109      	movs	r1, #9
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 fc0b 	bl	800146e <RFM95_writeByteRes>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d001      	beq.n	8000c62 <RFM95_setPower+0x9c>
				!= RFM95_OK)
		{
			return RFM95_ERROR;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e000      	b.n	8000c64 <RFM95_setPower+0x9e>
		}
		else
		{
			return RFM95_OK;
 8000c62:	2301      	movs	r3, #1
		}
	}
}
 8000c64:	0018      	movs	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b004      	add	sp, #16
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <RFM95_setBandWidth>:

RFM95_StatusTypedef RFM95_setBandWidth(RFM95_HandleTypedef *RFM_Init)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	uint8_t buffer = 0;
 8000c74:	210e      	movs	r1, #14
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
	uint8_t dataWrite = 0;
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
	if (RFM95_readByteRes(RFM_Init, LR_REG_MODEMCONFIG1, &buffer) != RFM95_OK)
 8000c84:	187a      	adds	r2, r7, r1
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	211d      	movs	r1, #29
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 fb4c 	bl	8001328 <RFM95_readByteRes>
 8000c90:	0003      	movs	r3, r0
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d001      	beq.n	8000c9a <RFM95_setBandWidth+0x2e>
	{
		return RFM95_ERROR;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e01a      	b.n	8000cd0 <RFM95_setBandWidth+0x64>
	}
	else
	{
		dataWrite = (uint8_t) (((RFM_Init->BandWidth) << 4)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	7bdb      	ldrb	r3, [r3, #15]
 8000c9e:	011b      	lsls	r3, r3, #4
 8000ca0:	b2d9      	uxtb	r1, r3
				| (buffer & RESET_BANDWIDTH));
 8000ca2:	230e      	movs	r3, #14
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	220f      	movs	r2, #15
 8000caa:	4013      	ands	r3, r2
 8000cac:	b2da      	uxtb	r2, r3
		dataWrite = (uint8_t) (((RFM_Init->BandWidth) << 4)
 8000cae:	200f      	movs	r0, #15
 8000cb0:	183b      	adds	r3, r7, r0
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	701a      	strb	r2, [r3, #0]
		if (RFM95_writeByteRes(RFM_Init, LR_REG_MODEMCONFIG1, dataWrite)
 8000cb6:	183b      	adds	r3, r7, r0
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	211d      	movs	r1, #29
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 fbd5 	bl	800146e <RFM95_writeByteRes>
 8000cc4:	0003      	movs	r3, r0
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d001      	beq.n	8000cce <RFM95_setBandWidth+0x62>
				!= RFM95_OK)
		{
			return RFM95_ERROR;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e000      	b.n	8000cd0 <RFM95_setBandWidth+0x64>
		}
		else
		{
			return RFM95_OK;
 8000cce:	2301      	movs	r3, #1
		}
	}
}
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b004      	add	sp, #16
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <RFM95_setSpredingFactor>:

RFM95_StatusTypedef RFM95_setSpredingFactor(RFM95_HandleTypedef *RFM_Init)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	/*The spreading factor controls the chirp rate, and thus controls the speed of data transmission.
	 *Lower spreading factors mean faster chirps and therefore a higher data transmission rate.
	 *Lower For every increase in spreading factor, the chirp sweep rate is halved, and so the data transmission rate is halved.*/
	uint8_t buffer = 0;
 8000ce0:	210e      	movs	r1, #14
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
	uint8_t dataWrite = 0;
 8000ce8:	230f      	movs	r3, #15
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
	if (RFM95_readByteRes(RFM_Init, LR_REG_MODEMCONFIG2, &buffer) != RFM95_OK)
 8000cf0:	187a      	adds	r2, r7, r1
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	211e      	movs	r1, #30
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 fb16 	bl	8001328 <RFM95_readByteRes>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d001      	beq.n	8000d06 <RFM95_setSpredingFactor+0x2e>
	{
		return RFM95_ERROR;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e083      	b.n	8000e0e <RFM95_setSpredingFactor+0x136>
	}
	else
	{
		if (RFM_Init->SpredingFactor == SF6)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	7b9b      	ldrb	r3, [r3, #14]
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d164      	bne.n	8000dd8 <RFM95_setSpredingFactor+0x100>

			/* Set SpreadingFactor = 6 in RegModemConfig2
			 * The header must be set to Implicit mode
			 * Write bits 2-0 of register address 0x31 to value "0b101"
			 * Write register address 0x37 to value 0x0C */
			dataWrite = (uint8_t) ((RFM_Init->SpredingFactor << 4)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7b9b      	ldrb	r3, [r3, #14]
 8000d12:	011b      	lsls	r3, r3, #4
 8000d14:	b2d9      	uxtb	r1, r3
					| (buffer & RESET_SF));
 8000d16:	230e      	movs	r3, #14
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4013      	ands	r3, r2
 8000d20:	b2da      	uxtb	r2, r3
			dataWrite = (uint8_t) ((RFM_Init->SpredingFactor << 4)
 8000d22:	200f      	movs	r0, #15
 8000d24:	183b      	adds	r3, r7, r0
 8000d26:	430a      	orrs	r2, r1
 8000d28:	701a      	strb	r2, [r3, #0]
			if (RFM95_writeByteRes(RFM_Init, LR_REG_MODEMCONFIG2, dataWrite)
 8000d2a:	183b      	adds	r3, r7, r0
 8000d2c:	781a      	ldrb	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	211e      	movs	r1, #30
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 fb9b 	bl	800146e <RFM95_writeByteRes>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d001      	beq.n	8000d42 <RFM95_setSpredingFactor+0x6a>
					!= RFM95_OK)
			{
				return RFM95_ERROR;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e065      	b.n	8000e0e <RFM95_setSpredingFactor+0x136>
			}
			else
			{
				if (RFM95_readByteRes(RFM_Init, LR_REG_MODEMCONFIG1, &buffer)
 8000d42:	230e      	movs	r3, #14
 8000d44:	18fa      	adds	r2, r7, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	211d      	movs	r1, #29
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 faec 	bl	8001328 <RFM95_readByteRes>
 8000d50:	0003      	movs	r3, r0
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d001      	beq.n	8000d5a <RFM95_setSpredingFactor+0x82>
						!= RFM95_OK)
				{
					return RFM95_ERROR;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e059      	b.n	8000e0e <RFM95_setSpredingFactor+0x136>
				}
				else
				{
					if (RFM95_setImplicitHeaderMode(RFM_Init) == false)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f000 f8b4 	bl	8000eca <RFM95_setImplicitHeaderMode>
 8000d62:	0003      	movs	r3, r0
 8000d64:	001a      	movs	r2, r3
 8000d66:	2301      	movs	r3, #1
 8000d68:	4053      	eors	r3, r2
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <RFM95_setSpredingFactor+0x9c>
					{
						return RFM95_ERROR;
 8000d70:	2300      	movs	r3, #0
 8000d72:	e04c      	b.n	8000e0e <RFM95_setSpredingFactor+0x136>
					}
					else
					{
						if (RFM95_readByteRes(RFM_Init, LR_REG_DETECTOPTIMIZE,
 8000d74:	230e      	movs	r3, #14
 8000d76:	18fa      	adds	r2, r7, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2131      	movs	r1, #49	; 0x31
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f000 fad3 	bl	8001328 <RFM95_readByteRes>
 8000d82:	0003      	movs	r3, r0
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d001      	beq.n	8000d8c <RFM95_setSpredingFactor+0xb4>
								&buffer) != RFM95_OK)
						{
							return RFM95_ERROR;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e040      	b.n	8000e0e <RFM95_setSpredingFactor+0x136>
						}
						else
						{
							dataWrite = (uint8_t) (0x05 | (buffer & 0xF8));
 8000d8c:	230e      	movs	r3, #14
 8000d8e:	18fb      	adds	r3, r7, r3
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	2207      	movs	r2, #7
 8000d96:	4393      	bics	r3, r2
 8000d98:	b25b      	sxtb	r3, r3
 8000d9a:	2205      	movs	r2, #5
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	b25a      	sxtb	r2, r3
 8000da0:	210f      	movs	r1, #15
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	701a      	strb	r2, [r3, #0]
							if (RFM95_writeByteRes(RFM_Init,
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	781a      	ldrb	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2131      	movs	r1, #49	; 0x31
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 fb5d 	bl	800146e <RFM95_writeByteRes>
 8000db4:	0003      	movs	r3, r0
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d001      	beq.n	8000dbe <RFM95_setSpredingFactor+0xe6>
							LR_REG_DETECTOPTIMIZE, dataWrite) != RFM95_OK)
							{
								return RFM95_ERROR;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e027      	b.n	8000e0e <RFM95_setSpredingFactor+0x136>
							}
							else
							{
								if (RFM95_writeByteRes(RFM_Init,
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	220c      	movs	r2, #12
 8000dc2:	2137      	movs	r1, #55	; 0x37
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f000 fb52 	bl	800146e <RFM95_writeByteRes>
 8000dca:	0003      	movs	r3, r0
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d001      	beq.n	8000dd4 <RFM95_setSpredingFactor+0xfc>
								LR_REG_DETECTIONTHRESHOLD, (uint8_t) 0x0C)
										!= RFM95_OK)
								{
									return RFM95_ERROR;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e01c      	b.n	8000e0e <RFM95_setSpredingFactor+0x136>
								}
								else
								{
									return RFM95_OK;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e01a      	b.n	8000e0e <RFM95_setSpredingFactor+0x136>
			}

		}
		else
		{
			dataWrite = (uint8_t) (RFM_Init->SpredingFactor << 4
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7b9b      	ldrb	r3, [r3, #14]
 8000ddc:	011b      	lsls	r3, r3, #4
 8000dde:	b2d9      	uxtb	r1, r3
					| (buffer & RESET_SF));
 8000de0:	230e      	movs	r3, #14
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	220f      	movs	r2, #15
 8000de8:	4013      	ands	r3, r2
 8000dea:	b2da      	uxtb	r2, r3
			dataWrite = (uint8_t) (RFM_Init->SpredingFactor << 4
 8000dec:	200f      	movs	r0, #15
 8000dee:	183b      	adds	r3, r7, r0
 8000df0:	430a      	orrs	r2, r1
 8000df2:	701a      	strb	r2, [r3, #0]
			if (RFM95_writeByteRes(RFM_Init, LR_REG_MODEMCONFIG2, dataWrite)
 8000df4:	183b      	adds	r3, r7, r0
 8000df6:	781a      	ldrb	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	211e      	movs	r1, #30
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f000 fb36 	bl	800146e <RFM95_writeByteRes>
 8000e02:	0003      	movs	r3, r0
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d001      	beq.n	8000e0c <RFM95_setSpredingFactor+0x134>
					!= RFM95_OK)
			{
				return RFM95_ERROR;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	e000      	b.n	8000e0e <RFM95_setSpredingFactor+0x136>
			}
			else
			{
				return RFM95_OK;
 8000e0c:	2301      	movs	r3, #1
			}
		}
	}
}
 8000e0e:	0018      	movs	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b004      	add	sp, #16
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <RFM95_setCodingRate>:

RFM95_StatusTypedef RFM95_setCodingRate(RFM95_HandleTypedef *RFM_Init)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b084      	sub	sp, #16
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
	uint8_t buffer = 0;
 8000e1e:	210e      	movs	r1, #14
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
	uint8_t dataWrite = 0;
 8000e26:	230f      	movs	r3, #15
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
	if (RFM95_readByteRes(RFM_Init, LR_REG_MODEMCONFIG1, &buffer) != RFM95_OK)
 8000e2e:	187a      	adds	r2, r7, r1
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	211d      	movs	r1, #29
 8000e34:	0018      	movs	r0, r3
 8000e36:	f000 fa77 	bl	8001328 <RFM95_readByteRes>
 8000e3a:	0003      	movs	r3, r0
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d001      	beq.n	8000e44 <RFM95_setCodingRate+0x2e>
	{
		return RFM95_ERROR;
 8000e40:	2300      	movs	r3, #0
 8000e42:	e01a      	b.n	8000e7a <RFM95_setCodingRate+0x64>
	}
	else
	{
		dataWrite =
				(uint8_t) ((RFM_Init->CodingRate << 1) | (buffer & RESET_CR));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	7c1b      	ldrb	r3, [r3, #16]
 8000e48:	18db      	adds	r3, r3, r3
 8000e4a:	b2d9      	uxtb	r1, r3
 8000e4c:	230e      	movs	r3, #14
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	220e      	movs	r2, #14
 8000e54:	4393      	bics	r3, r2
 8000e56:	b2da      	uxtb	r2, r3
		dataWrite =
 8000e58:	200f      	movs	r0, #15
 8000e5a:	183b      	adds	r3, r7, r0
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	701a      	strb	r2, [r3, #0]
		if (RFM95_writeByteRes(RFM_Init, LR_REG_MODEMCONFIG1, dataWrite)
 8000e60:	183b      	adds	r3, r7, r0
 8000e62:	781a      	ldrb	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	211d      	movs	r1, #29
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f000 fb00 	bl	800146e <RFM95_writeByteRes>
 8000e6e:	0003      	movs	r3, r0
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d001      	beq.n	8000e78 <RFM95_setCodingRate+0x62>
				!= RFM95_OK)
		{
			return RFM95_ERROR;
 8000e74:	2300      	movs	r3, #0
 8000e76:	e000      	b.n	8000e7a <RFM95_setCodingRate+0x64>
		}
		else
		{
			return RFM95_OK;
 8000e78:	2301      	movs	r3, #1
		}
	}
}
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b004      	add	sp, #16
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <RFM95_setPreamble>:

RFM95_StatusTypedef RFM95_setPreamble(RFM95_HandleTypedef *RFM_Init)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b084      	sub	sp, #16
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
	uint8_t Prel[2] = { 0 };
 8000e8a:	210c      	movs	r1, #12
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2200      	movs	r2, #0
 8000e90:	801a      	strh	r2, [r3, #0]
	Prel[0] = (uint8_t) (RFM_Init->Preamble >> 8);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	8a5b      	ldrh	r3, [r3, #18]
 8000e96:	0a1b      	lsrs	r3, r3, #8
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	701a      	strb	r2, [r3, #0]
	Prel[1] = (uint8_t) (RFM_Init->Preamble >> 0);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	8a5b      	ldrh	r3, [r3, #18]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	705a      	strb	r2, [r3, #1]
	if (RFM95_writeBurstRes(RFM_Init, LR_REG_PREAMBLEMSB, Prel, sizeof(Prel))
 8000eaa:	187a      	adds	r2, r7, r1
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	2302      	movs	r3, #2
 8000eb0:	2120      	movs	r1, #32
 8000eb2:	f000 fa6e 	bl	8001392 <RFM95_writeBurstRes>
 8000eb6:	0003      	movs	r3, r0
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d001      	beq.n	8000ec0 <RFM95_setPreamble+0x3e>
			!= RFM95_OK)
	{
		return RFM95_ERROR;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	e000      	b.n	8000ec2 <RFM95_setPreamble+0x40>
	}
	else
	{
		return RFM95_OK;
 8000ec0:	2301      	movs	r3, #1
	}
}
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b004      	add	sp, #16
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <RFM95_setImplicitHeaderMode>:

bool RFM95_setImplicitHeaderMode(RFM95_HandleTypedef *RFM_Init)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b084      	sub	sp, #16
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
	uint8_t dataWrite = 0;
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	18fb      	adds	r3, r7, r3
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
	uint8_t buffer = 0;
 8000eda:	210e      	movs	r1, #14
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
	if (RFM95_readByteRes(RFM_Init, LR_REG_MODEMCONFIG1, &buffer) != RFM95_OK)
 8000ee2:	187a      	adds	r2, r7, r1
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	211d      	movs	r1, #29
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f000 fa1d 	bl	8001328 <RFM95_readByteRes>
 8000eee:	0003      	movs	r3, r0
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d001      	beq.n	8000ef8 <RFM95_setImplicitHeaderMode+0x2e>
	{
		return false;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	e014      	b.n	8000f22 <RFM95_setImplicitHeaderMode+0x58>
	}
	else
	{
		dataWrite = (buffer | EN_IMPLICITHEADERMODE);
 8000ef8:	230e      	movs	r3, #14
 8000efa:	18fb      	adds	r3, r7, r3
 8000efc:	781a      	ldrb	r2, [r3, #0]
 8000efe:	200f      	movs	r0, #15
 8000f00:	183b      	adds	r3, r7, r0
 8000f02:	2101      	movs	r1, #1
 8000f04:	430a      	orrs	r2, r1
 8000f06:	701a      	strb	r2, [r3, #0]
		if (RFM95_writeByteRes(RFM_Init, LR_REG_MODEMCONFIG1, dataWrite)
 8000f08:	183b      	adds	r3, r7, r0
 8000f0a:	781a      	ldrb	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	211d      	movs	r1, #29
 8000f10:	0018      	movs	r0, r3
 8000f12:	f000 faac 	bl	800146e <RFM95_writeByteRes>
 8000f16:	0003      	movs	r3, r0
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d001      	beq.n	8000f20 <RFM95_setImplicitHeaderMode+0x56>
				!= RFM95_OK)
		{
			return false;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e000      	b.n	8000f22 <RFM95_setImplicitHeaderMode+0x58>
		}
		else
		{
			return true;
 8000f20:	2301      	movs	r3, #1
		}
	}
}
 8000f22:	0018      	movs	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b004      	add	sp, #16
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <RFM95_Transmit>:

bool RFM95_Transmit(RFM95_HandleTypedef *RFM_Init, uint8_t *buffer,
		uint8_t size, uint16_t timeout)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	0019      	movs	r1, r3
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	701a      	strb	r2, [r3, #0]
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	1c0a      	adds	r2, r1, #0
 8000f3e:	801a      	strh	r2, [r3, #0]
	uint8_t pAddr = 0;
 8000f40:	2316      	movs	r3, #22
 8000f42:	18fb      	adds	r3, r7, r3
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
	uint8_t statusIrq = 0;
 8000f48:	2315      	movs	r3, #21
 8000f4a:	18fb      	adds	r3, r7, r3
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
	uint8_t currentMode = 0;
 8000f50:	2114      	movs	r1, #20
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]

	if(RFM95_readByteRes(RFM_Init, LR_REG_OPMODE, &currentMode)!= RFM95_OK)
 8000f58:	187a      	adds	r2, r7, r1
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f000 f9e2 	bl	8001328 <RFM95_readByteRes>
 8000f64:	0003      	movs	r3, r0
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d001      	beq.n	8000f6e <RFM95_Transmit+0x44>
	{
		return false;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e0be      	b.n	80010ec <RFM95_Transmit+0x1c2>
	}

	if (RFM95_setMode(RFM_Init, STDBY_MODE | LORA_MODE) == false)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2181      	movs	r1, #129	; 0x81
 8000f72:	0018      	movs	r0, r3
 8000f74:	f7ff fd50 	bl	8000a18 <RFM95_setMode>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	001a      	movs	r2, r3
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	4053      	eors	r3, r2
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <RFM95_Transmit+0x60>
	{
		return false;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e0b0      	b.n	80010ec <RFM95_Transmit+0x1c2>
	}
	else if (RFM_Init->SpredingFactor == SF6)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	7b9b      	ldrb	r3, [r3, #14]
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d10c      	bne.n	8000fac <RFM95_Transmit+0x82>
	{
		if (RFM95_setImplicitHeaderMode(RFM_Init) == false)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	0018      	movs	r0, r3
 8000f96:	f7ff ff98 	bl	8000eca <RFM95_setImplicitHeaderMode>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	001a      	movs	r2, r3
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	4053      	eors	r3, r2
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d031      	beq.n	800100c <RFM95_Transmit+0xe2>
		{
			return false;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e09f      	b.n	80010ec <RFM95_Transmit+0x1c2>
		}
	}
	else if (RFM95_readByteRes(RFM_Init, LR_REG_FIFOTXBASEADDR, &pAddr)
 8000fac:	2316      	movs	r3, #22
 8000fae:	18fa      	adds	r2, r7, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	210e      	movs	r1, #14
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f000 f9b7 	bl	8001328 <RFM95_readByteRes>
 8000fba:	0003      	movs	r3, r0
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d001      	beq.n	8000fc4 <RFM95_Transmit+0x9a>
			!= RFM95_OK)
	{
		return false;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e093      	b.n	80010ec <RFM95_Transmit+0x1c2>
	}
	else if (RFM95_writeByteRes(RFM_Init, LR_REG_FIFOADDRPTR, pAddr)
 8000fc4:	2316      	movs	r3, #22
 8000fc6:	18fb      	adds	r3, r7, r3
 8000fc8:	781a      	ldrb	r2, [r3, #0]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	210d      	movs	r1, #13
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f000 fa4d 	bl	800146e <RFM95_writeByteRes>
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d001      	beq.n	8000fde <RFM95_Transmit+0xb4>
			!= RFM95_OK)
	{
		return false;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e086      	b.n	80010ec <RFM95_Transmit+0x1c2>

	}
	else if (RFM95_writeByteRes(RFM_Init, LR_REG_PAYLOADLENGTH, 0x00)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2122      	movs	r1, #34	; 0x22
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f000 fa42 	bl	800146e <RFM95_writeByteRes>
 8000fea:	0003      	movs	r3, r0
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d001      	beq.n	8000ff4 <RFM95_Transmit+0xca>
			!= RFM95_OK)
	{
		return false;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e07b      	b.n	80010ec <RFM95_Transmit+0x1c2>
	}
	else if (RFM95_writeByteRes(RFM_Init, LR_REG_PAYLOADLENGTH, size)
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	781a      	ldrb	r2, [r3, #0]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2122      	movs	r1, #34	; 0x22
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f000 fa36 	bl	800146e <RFM95_writeByteRes>
 8001002:	0003      	movs	r3, r0
 8001004:	2b01      	cmp	r3, #1
 8001006:	d001      	beq.n	800100c <RFM95_Transmit+0xe2>
			!= RFM95_OK)
	{
		return false;
 8001008:	2300      	movs	r3, #0
 800100a:	e06f      	b.n	80010ec <RFM95_Transmit+0x1c2>
	}
	for (uint8_t i = 0; i < size; i++)
 800100c:	2317      	movs	r3, #23
 800100e:	18fb      	adds	r3, r7, r3
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	e013      	b.n	800103e <RFM95_Transmit+0x114>
	{
		if (RFM95_writeByteRes(RFM_Init, LR_REG_FIFO, *(buffer++)) != RFM95_OK)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	60ba      	str	r2, [r7, #8]
 800101c:	781a      	ldrb	r2, [r3, #0]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2100      	movs	r1, #0
 8001022:	0018      	movs	r0, r3
 8001024:	f000 fa23 	bl	800146e <RFM95_writeByteRes>
 8001028:	0003      	movs	r3, r0
 800102a:	2b01      	cmp	r3, #1
 800102c:	d001      	beq.n	8001032 <RFM95_Transmit+0x108>
		{
			return false;
 800102e:	2300      	movs	r3, #0
 8001030:	e05c      	b.n	80010ec <RFM95_Transmit+0x1c2>
	for (uint8_t i = 0; i < size; i++)
 8001032:	2117      	movs	r1, #23
 8001034:	187b      	adds	r3, r7, r1
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	187b      	adds	r3, r7, r1
 800103a:	3201      	adds	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]
 800103e:	2317      	movs	r3, #23
 8001040:	18fa      	adds	r2, r7, r3
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	7812      	ldrb	r2, [r2, #0]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	429a      	cmp	r2, r3
 800104a:	d3e4      	bcc.n	8001016 <RFM95_Transmit+0xec>
		}
	}

	if (RFM95_setMode(RFM_Init, TX_MODE | LORA_MODE) == false)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2183      	movs	r1, #131	; 0x83
 8001050:	0018      	movs	r0, r3
 8001052:	f7ff fce1 	bl	8000a18 <RFM95_setMode>
 8001056:	0003      	movs	r3, r0
 8001058:	001a      	movs	r2, r3
 800105a:	2301      	movs	r3, #1
 800105c:	4053      	eors	r3, r2
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <RFM95_Transmit+0x13e>
	{
		return false;
 8001064:	2300      	movs	r3, #0
 8001066:	e041      	b.n	80010ec <RFM95_Transmit+0x1c2>
	}
	else
	{
		while (1)
		{
			if (RFM95_readByteRes(RFM_Init, LR_REG_IRQFLAGS, &statusIrq)
 8001068:	2315      	movs	r3, #21
 800106a:	18fa      	adds	r2, r7, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2112      	movs	r1, #18
 8001070:	0018      	movs	r0, r3
 8001072:	f000 f959 	bl	8001328 <RFM95_readByteRes>
 8001076:	0003      	movs	r3, r0
 8001078:	2b01      	cmp	r3, #1
 800107a:	d001      	beq.n	8001080 <RFM95_Transmit+0x156>
					!= RFM95_OK)
			{
				return false;
 800107c:	2300      	movs	r3, #0
 800107e:	e035      	b.n	80010ec <RFM95_Transmit+0x1c2>
			}
			else
			{
				if ((statusIrq & TX_FLAGS) != 0)
 8001080:	2315      	movs	r3, #21
 8001082:	18fb      	adds	r3, r7, r3
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	001a      	movs	r2, r3
 8001088:	2308      	movs	r3, #8
 800108a:	4013      	ands	r3, r2
 800108c:	d019      	beq.n	80010c2 <RFM95_Transmit+0x198>
				{
					if (RFM95_writeByteRes(RFM_Init, LR_REG_IRQFLAGS, TX_FLAGS)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2208      	movs	r2, #8
 8001092:	2112      	movs	r1, #18
 8001094:	0018      	movs	r0, r3
 8001096:	f000 f9ea 	bl	800146e <RFM95_writeByteRes>
 800109a:	0003      	movs	r3, r0
 800109c:	2b01      	cmp	r3, #1
 800109e:	d001      	beq.n	80010a4 <RFM95_Transmit+0x17a>
							!= RFM95_OK)
						return false;
 80010a0:	2300      	movs	r3, #0
 80010a2:	e023      	b.n	80010ec <RFM95_Transmit+0x1c2>
					if(RFM95_writeByteRes(RFM_Init, LR_REG_OPMODE, currentMode)!=RFM95_OK)
 80010a4:	2314      	movs	r3, #20
 80010a6:	18fb      	adds	r3, r7, r3
 80010a8:	781a      	ldrb	r2, [r3, #0]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2101      	movs	r1, #1
 80010ae:	0018      	movs	r0, r3
 80010b0:	f000 f9dd 	bl	800146e <RFM95_writeByteRes>
 80010b4:	0003      	movs	r3, r0
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d001      	beq.n	80010be <RFM95_Transmit+0x194>
					{
						return false;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e016      	b.n	80010ec <RFM95_Transmit+0x1c2>
					}
					return true;
 80010be:	2301      	movs	r3, #1
 80010c0:	e014      	b.n	80010ec <RFM95_Transmit+0x1c2>
				}
				else
				{
					if ((timeout--) <= 0)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	1d3a      	adds	r2, r7, #4
 80010c8:	1e59      	subs	r1, r3, #1
 80010ca:	8011      	strh	r1, [r2, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d109      	bne.n	80010e4 <RFM95_Transmit+0x1ba>
					{
						RFM95_writeByteRes(RFM_Init, LR_REG_OPMODE, currentMode);
 80010d0:	2314      	movs	r3, #20
 80010d2:	18fb      	adds	r3, r7, r3
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2101      	movs	r1, #1
 80010da:	0018      	movs	r0, r3
 80010dc:	f000 f9c7 	bl	800146e <RFM95_writeByteRes>
						return false;
 80010e0:	2300      	movs	r3, #0
 80010e2:	e003      	b.n	80010ec <RFM95_Transmit+0x1c2>
					}
				}
			}
			HAL_Delay(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f000 fbdf 	bl	80018a8 <HAL_Delay>
			if (RFM95_readByteRes(RFM_Init, LR_REG_IRQFLAGS, &statusIrq)
 80010ea:	e7bd      	b.n	8001068 <RFM95_Transmit+0x13e>
		}
	}
}
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b006      	add	sp, #24
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <RFM95_Receive>:

bool RFM95_Receive(RFM95_HandleTypedef *RFM_Init, uint8_t *buffer, uint8_t size)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	701a      	strb	r2, [r3, #0]
	uint8_t statusIrq = 0;
 8001102:	2316      	movs	r3, #22
 8001104:	18fb      	adds	r3, r7, r3
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
	uint8_t sizeMin = 0;
 800110a:	2315      	movs	r3, #21
 800110c:	18fb      	adds	r3, r7, r3
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuffer = 0;
 8001112:	2314      	movs	r3, #20
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]

	if (RFM95_setMode(RFM_Init, RXCONTINUOUS_MODE | LORA_MODE) == false)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2185      	movs	r1, #133	; 0x85
 800111e:	0018      	movs	r0, r3
 8001120:	f7ff fc7a 	bl	8000a18 <RFM95_setMode>
 8001124:	0003      	movs	r3, r0
 8001126:	001a      	movs	r2, r3
 8001128:	2301      	movs	r3, #1
 800112a:	4053      	eors	r3, r2
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <RFM95_Receive+0x42>
	{
		return false;
 8001132:	2300      	movs	r3, #0
 8001134:	e088      	b.n	8001248 <RFM95_Receive+0x154>
	}

	if (RFM95_readByteRes(RFM_Init, LR_REG_FIFORXBASEADDR, &rxBuffer)
 8001136:	2314      	movs	r3, #20
 8001138:	18fa      	adds	r2, r7, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	210f      	movs	r1, #15
 800113e:	0018      	movs	r0, r3
 8001140:	f000 f8f2 	bl	8001328 <RFM95_readByteRes>
 8001144:	0003      	movs	r3, r0
 8001146:	2b01      	cmp	r3, #1
 8001148:	d001      	beq.n	800114e <RFM95_Receive+0x5a>
			!= RFM95_OK)
	{
		return false;
 800114a:	2300      	movs	r3, #0
 800114c:	e07c      	b.n	8001248 <RFM95_Receive+0x154>
	}
	if (RFM95_writeByteRes(RFM_Init, LR_REG_FIFOADDRPTR, rxBuffer) != RFM95_OK)
 800114e:	2314      	movs	r3, #20
 8001150:	18fb      	adds	r3, r7, r3
 8001152:	781a      	ldrb	r2, [r3, #0]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	210d      	movs	r1, #13
 8001158:	0018      	movs	r0, r3
 800115a:	f000 f988 	bl	800146e <RFM95_writeByteRes>
 800115e:	0003      	movs	r3, r0
 8001160:	2b01      	cmp	r3, #1
 8001162:	d001      	beq.n	8001168 <RFM95_Receive+0x74>
	{
		return false;
 8001164:	2300      	movs	r3, #0
 8001166:	e06f      	b.n	8001248 <RFM95_Receive+0x154>
	}

	if (RFM95_readByteRes(RFM_Init, LR_REG_IRQFLAGS, &statusIrq) != RFM95_OK)
 8001168:	2316      	movs	r3, #22
 800116a:	18fa      	adds	r2, r7, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2112      	movs	r1, #18
 8001170:	0018      	movs	r0, r3
 8001172:	f000 f8d9 	bl	8001328 <RFM95_readByteRes>
 8001176:	0003      	movs	r3, r0
 8001178:	2b01      	cmp	r3, #1
 800117a:	d001      	beq.n	8001180 <RFM95_Receive+0x8c>
	{
		return false;
 800117c:	2300      	movs	r3, #0
 800117e:	e063      	b.n	8001248 <RFM95_Receive+0x154>
	}
	if ((statusIrq & RX_FLAGS) != 0)
 8001180:	2316      	movs	r3, #22
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	001a      	movs	r2, r3
 8001188:	2340      	movs	r3, #64	; 0x40
 800118a:	4013      	ands	r3, r2
 800118c:	d05b      	beq.n	8001246 <RFM95_Receive+0x152>
	{
		if (RFM95_writeByteRes(RFM_Init, LR_REG_IRQFLAGS, RX_FLAGS) != RFM95_OK)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2240      	movs	r2, #64	; 0x40
 8001192:	2112      	movs	r1, #18
 8001194:	0018      	movs	r0, r3
 8001196:	f000 f96a 	bl	800146e <RFM95_writeByteRes>
 800119a:	0003      	movs	r3, r0
 800119c:	2b01      	cmp	r3, #1
 800119e:	d001      	beq.n	80011a4 <RFM95_Receive+0xb0>
		{
			return false;
 80011a0:	2300      	movs	r3, #0
 80011a2:	e051      	b.n	8001248 <RFM95_Receive+0x154>
		}
		if (RFM95_readByteRes(RFM_Init, LR_REG_RXNBBNYTES, &sizeMin)
 80011a4:	2315      	movs	r3, #21
 80011a6:	18fa      	adds	r2, r7, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2113      	movs	r1, #19
 80011ac:	0018      	movs	r0, r3
 80011ae:	f000 f8bb 	bl	8001328 <RFM95_readByteRes>
 80011b2:	0003      	movs	r3, r0
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d001      	beq.n	80011bc <RFM95_Receive+0xc8>
				!= RFM95_OK)
		{
			return false;
 80011b8:	2300      	movs	r3, #0
 80011ba:	e045      	b.n	8001248 <RFM95_Receive+0x154>
		}
		if (RFM95_readByteRes(RFM_Init, LR_REG_FIFORXCURRENTADDR, &rxBuffer)
 80011bc:	2314      	movs	r3, #20
 80011be:	18fa      	adds	r2, r7, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2110      	movs	r1, #16
 80011c4:	0018      	movs	r0, r3
 80011c6:	f000 f8af 	bl	8001328 <RFM95_readByteRes>
 80011ca:	0003      	movs	r3, r0
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d001      	beq.n	80011d4 <RFM95_Receive+0xe0>
				!= RFM95_OK)
		{
			return false;
 80011d0:	2300      	movs	r3, #0
 80011d2:	e039      	b.n	8001248 <RFM95_Receive+0x154>
		}
		if (RFM95_writeByteRes(RFM_Init, LR_REG_FIFOADDRPTR, rxBuffer)
 80011d4:	2314      	movs	r3, #20
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	781a      	ldrb	r2, [r3, #0]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	210d      	movs	r1, #13
 80011de:	0018      	movs	r0, r3
 80011e0:	f000 f945 	bl	800146e <RFM95_writeByteRes>
 80011e4:	0003      	movs	r3, r0
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d001      	beq.n	80011ee <RFM95_Receive+0xfa>
				!= RFM95_OK)
		{
			return false;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e02c      	b.n	8001248 <RFM95_Receive+0x154>
		}
		if (size >= sizeMin)
 80011ee:	2115      	movs	r1, #21
 80011f0:	187b      	adds	r3, r7, r1
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	1dfa      	adds	r2, r7, #7
 80011f6:	7812      	ldrb	r2, [r2, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d304      	bcc.n	8001206 <RFM95_Receive+0x112>
		{
			size = sizeMin;
 80011fc:	1dfb      	adds	r3, r7, #7
 80011fe:	187a      	adds	r2, r7, r1
 8001200:	7812      	ldrb	r2, [r2, #0]
 8001202:	701a      	strb	r2, [r3, #0]
 8001204:	e003      	b.n	800120e <RFM95_Receive+0x11a>
		}
		else
		{
			size = size;
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	1dfa      	adds	r2, r7, #7
 800120a:	7812      	ldrb	r2, [r2, #0]
 800120c:	701a      	strb	r2, [r3, #0]
		}
		for (uint8_t i = 0; i < size; i++)
 800120e:	2317      	movs	r3, #23
 8001210:	18fb      	adds	r3, r7, r3
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
 8001216:	e00d      	b.n	8001234 <RFM95_Receive+0x140>
		{
			RFM95_readByteRes(RFM_Init, LR_REG_FIFO, buffer++);
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	60ba      	str	r2, [r7, #8]
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	001a      	movs	r2, r3
 8001222:	2100      	movs	r1, #0
 8001224:	f000 f880 	bl	8001328 <RFM95_readByteRes>
		for (uint8_t i = 0; i < size; i++)
 8001228:	2117      	movs	r1, #23
 800122a:	187b      	adds	r3, r7, r1
 800122c:	781a      	ldrb	r2, [r3, #0]
 800122e:	187b      	adds	r3, r7, r1
 8001230:	3201      	adds	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	2317      	movs	r3, #23
 8001236:	18fa      	adds	r2, r7, r3
 8001238:	1dfb      	adds	r3, r7, #7
 800123a:	7812      	ldrb	r2, [r2, #0]
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	d3ea      	bcc.n	8001218 <RFM95_Receive+0x124>

		}
		return true;
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <RFM95_Receive+0x154>
	}
	return false;
 8001246:	2300      	movs	r3, #0

}
 8001248:	0018      	movs	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	b006      	add	sp, #24
 800124e:	bd80      	pop	{r7, pc}

08001250 <RFM95_setTimeout>:
		}
	}
}

RFM95_StatusTypedef RFM95_setTimeout(RFM95_HandleTypedef *RFM_Init)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	if (RFM_Init->Timeout <= 255)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	8adb      	ldrh	r3, [r3, #22]
 800125c:	2bff      	cmp	r3, #255	; 0xff
 800125e:	d80e      	bhi.n	800127e <RFM95_setTimeout+0x2e>
	{
		if (RFM95_writeByteRes(RFM_Init, LR_REG_SYMBTIMEOUTLSB,
				(uint8_t) (RFM_Init->Timeout)) != RFM95_OK)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	8adb      	ldrh	r3, [r3, #22]
		if (RFM95_writeByteRes(RFM_Init, LR_REG_SYMBTIMEOUTLSB,
 8001264:	b2da      	uxtb	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	211f      	movs	r1, #31
 800126a:	0018      	movs	r0, r3
 800126c:	f000 f8ff 	bl	800146e <RFM95_writeByteRes>
 8001270:	0003      	movs	r3, r0
 8001272:	2b01      	cmp	r3, #1
 8001274:	d001      	beq.n	800127a <RFM95_setTimeout+0x2a>
		{
			return RFM95_ERROR;
 8001276:	2300      	movs	r3, #0
 8001278:	e03e      	b.n	80012f8 <RFM95_setTimeout+0xa8>
		}
		else
		{
			return RFM95_OK;
 800127a:	2301      	movs	r3, #1
 800127c:	e03c      	b.n	80012f8 <RFM95_setTimeout+0xa8>
		}
	}
	else
	{
		uint8_t dataWrite = 0;
 800127e:	230f      	movs	r3, #15
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
		uint8_t buffer = 0;
 8001286:	210e      	movs	r1, #14
 8001288:	187b      	adds	r3, r7, r1
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
		if (RFM95_readByteRes(RFM_Init, LR_REG_MODEMCONFIG2, &buffer)
 800128e:	187a      	adds	r2, r7, r1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	211e      	movs	r1, #30
 8001294:	0018      	movs	r0, r3
 8001296:	f000 f847 	bl	8001328 <RFM95_readByteRes>
 800129a:	0003      	movs	r3, r0
 800129c:	2b01      	cmp	r3, #1
 800129e:	d001      	beq.n	80012a4 <RFM95_setTimeout+0x54>
				!= RFM95_OK)
		{
			return RFM95_ERROR;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e029      	b.n	80012f8 <RFM95_setTimeout+0xa8>
		}
		dataWrite = (uint8_t) ((RFM_Init->Timeout >> 8) | buffer);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	8adb      	ldrh	r3, [r3, #22]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	b2d9      	uxtb	r1, r3
 80012ae:	230e      	movs	r3, #14
 80012b0:	18fb      	adds	r3, r7, r3
 80012b2:	781a      	ldrb	r2, [r3, #0]
 80012b4:	200f      	movs	r0, #15
 80012b6:	183b      	adds	r3, r7, r0
 80012b8:	430a      	orrs	r2, r1
 80012ba:	701a      	strb	r2, [r3, #0]
		if (RFM95_writeByteRes(RFM_Init, LR_REG_MODEMCONFIG2, dataWrite)
 80012bc:	183b      	adds	r3, r7, r0
 80012be:	781a      	ldrb	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	211e      	movs	r1, #30
 80012c4:	0018      	movs	r0, r3
 80012c6:	f000 f8d2 	bl	800146e <RFM95_writeByteRes>
 80012ca:	0003      	movs	r3, r0
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d001      	beq.n	80012d4 <RFM95_setTimeout+0x84>
				!= RFM95_OK)
		{
			return RFM95_ERROR;
 80012d0:	2300      	movs	r3, #0
 80012d2:	e011      	b.n	80012f8 <RFM95_setTimeout+0xa8>
		}
		dataWrite = (uint8_t) (RFM_Init->Timeout >> 0);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	8ada      	ldrh	r2, [r3, #22]
 80012d8:	210f      	movs	r1, #15
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	701a      	strb	r2, [r3, #0]
		if (RFM95_writeByteRes(RFM_Init, LR_REG_SYMBTIMEOUTLSB, dataWrite)
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	781a      	ldrb	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	211f      	movs	r1, #31
 80012e6:	0018      	movs	r0, r3
 80012e8:	f000 f8c1 	bl	800146e <RFM95_writeByteRes>
 80012ec:	0003      	movs	r3, r0
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d001      	beq.n	80012f6 <RFM95_setTimeout+0xa6>
				!= RFM95_OK)
		{
			return RFM95_ERROR;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e000      	b.n	80012f8 <RFM95_setTimeout+0xa8>
		}
		return RFM95_OK;
 80012f6:	2301      	movs	r3, #1
	}
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b004      	add	sp, #16
 80012fe:	bd80      	pop	{r7, pc}

08001300 <RFM95_setNSS>:

	return valueRSSI;
}

void RFM95_setNSS(RFM95_HandleTypedef *RFM_Init, GPIO_PinState PinState)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	000a      	movs	r2, r1
 800130a:	1cfb      	adds	r3, r7, #3
 800130c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RFM_Init->Module.NSS.Port, RFM_Init->Module.NSS.Pin,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6818      	ldr	r0, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	8899      	ldrh	r1, [r3, #4]
 8001316:	1cfb      	adds	r3, r7, #3
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	001a      	movs	r2, r3
 800131c:	f000 fd44 	bl	8001da8 <HAL_GPIO_WritePin>
			PinState);
}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b002      	add	sp, #8
 8001326:	bd80      	pop	{r7, pc}

08001328 <RFM95_readByteRes>:

RFM95_StatusTypedef RFM95_readByteRes(RFM95_HandleTypedef *RFM_Init,
		uint8_t addr, uint8_t *pBuffer)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	240b      	movs	r4, #11
 8001334:	193b      	adds	r3, r7, r4
 8001336:	1c0a      	adds	r2, r1, #0
 8001338:	701a      	strb	r2, [r3, #0]
	//RFM95_setNSS(RFM_Init, GPIO_PIN_RESET);

	if (HAL_SPI_Transmit(RFM_Init->Module.SPI, &addr, 1, TIMEOUT) != HAL_OK)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6898      	ldr	r0, [r3, #8]
 800133e:	23fa      	movs	r3, #250	; 0xfa
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	1939      	adds	r1, r7, r4
 8001344:	2201      	movs	r2, #1
 8001346:	f001 fd8f 	bl	8002e68 <HAL_SPI_Transmit>
 800134a:	1e03      	subs	r3, r0, #0
 800134c:	d006      	beq.n	800135c <RFM95_readByteRes+0x34>
	{
		RFM95_setNSS(RFM_Init, GPIO_PIN_SET);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2101      	movs	r1, #1
 8001352:	0018      	movs	r0, r3
 8001354:	f7ff ffd4 	bl	8001300 <RFM95_setNSS>
		return RFM95_ERROR;
 8001358:	2300      	movs	r3, #0
 800135a:	e016      	b.n	800138a <RFM95_readByteRes+0x62>
	}
	if (HAL_SPI_Receive(RFM_Init->Module.SPI, pBuffer, 1, TIMEOUT) != HAL_OK)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6898      	ldr	r0, [r3, #8]
 8001360:	23fa      	movs	r3, #250	; 0xfa
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f001 fed4 	bl	8003114 <HAL_SPI_Receive>
 800136c:	1e03      	subs	r3, r0, #0
 800136e:	d006      	beq.n	800137e <RFM95_readByteRes+0x56>
	{
		RFM95_setNSS(RFM_Init, GPIO_PIN_SET);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2101      	movs	r1, #1
 8001374:	0018      	movs	r0, r3
 8001376:	f7ff ffc3 	bl	8001300 <RFM95_setNSS>
		return RFM95_ERROR;
 800137a:	2300      	movs	r3, #0
 800137c:	e005      	b.n	800138a <RFM95_readByteRes+0x62>
	}

	RFM95_setNSS(RFM_Init, GPIO_PIN_SET);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2101      	movs	r1, #1
 8001382:	0018      	movs	r0, r3
 8001384:	f7ff ffbc 	bl	8001300 <RFM95_setNSS>
	return RFM95_OK;
 8001388:	2301      	movs	r3, #1

}
 800138a:	0018      	movs	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	b005      	add	sp, #20
 8001390:	bd90      	pop	{r4, r7, pc}

08001392 <RFM95_writeBurstRes>:
	}
}

RFM95_StatusTypedef RFM95_writeBurstRes(RFM95_HandleTypedef *RFM_Init,
		uint8_t addr, uint8_t *pData, uint8_t size)
{
 8001392:	b590      	push	{r4, r7, lr}
 8001394:	b087      	sub	sp, #28
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	0008      	movs	r0, r1
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	0019      	movs	r1, r3
 80013a0:	240b      	movs	r4, #11
 80013a2:	193b      	adds	r3, r7, r4
 80013a4:	1c02      	adds	r2, r0, #0
 80013a6:	701a      	strb	r2, [r3, #0]
 80013a8:	200a      	movs	r0, #10
 80013aa:	183b      	adds	r3, r7, r0
 80013ac:	1c0a      	adds	r2, r1, #0
 80013ae:	701a      	strb	r2, [r3, #0]
	addr = (addr | BIT_WRITE);
 80013b0:	0021      	movs	r1, r4
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2280      	movs	r2, #128	; 0x80
 80013b8:	4252      	negs	r2, r2
 80013ba:	4313      	orrs	r3, r2
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	701a      	strb	r2, [r3, #0]
	if (size > 0 && size <= 1)
 80013c2:	183b      	adds	r3, r7, r0
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00d      	beq.n	80013e6 <RFM95_writeBurstRes+0x54>
 80013ca:	183b      	adds	r3, r7, r0
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d809      	bhi.n	80013e6 <RFM95_writeBurstRes+0x54>
	{
		return RFM95_writeByteRes(RFM_Init, addr, *pData);
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	7819      	ldrb	r1, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	781a      	ldrb	r2, [r3, #0]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	0018      	movs	r0, r3
 80013de:	f000 f846 	bl	800146e <RFM95_writeByteRes>
 80013e2:	0003      	movs	r3, r0
 80013e4:	e03f      	b.n	8001466 <RFM95_writeBurstRes+0xd4>
	}
	else
	{
		//RFM95_setNSS(RFM_Init, GPIO_PIN_RESET);

		if (HAL_SPI_Transmit(RFM_Init->Module.SPI, &addr, 1, TIMEOUT) != HAL_OK)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6898      	ldr	r0, [r3, #8]
 80013ea:	23fa      	movs	r3, #250	; 0xfa
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	220b      	movs	r2, #11
 80013f0:	18b9      	adds	r1, r7, r2
 80013f2:	2201      	movs	r2, #1
 80013f4:	f001 fd38 	bl	8002e68 <HAL_SPI_Transmit>
 80013f8:	1e03      	subs	r3, r0, #0
 80013fa:	d007      	beq.n	800140c <RFM95_writeBurstRes+0x7a>
		{
			RFM95_setNSS(RFM_Init->Module.SPI, GPIO_PIN_SET);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2101      	movs	r1, #1
 8001402:	0018      	movs	r0, r3
 8001404:	f7ff ff7c 	bl	8001300 <RFM95_setNSS>
			return RFM95_ERROR;
 8001408:	2300      	movs	r3, #0
 800140a:	e02c      	b.n	8001466 <RFM95_writeBurstRes+0xd4>
		}
		for (uint8_t i = 0; i < size; i++)
 800140c:	2317      	movs	r3, #23
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	e019      	b.n	800144a <RFM95_writeBurstRes+0xb8>
		{
			if (HAL_SPI_Transmit(RFM_Init->Module.SPI, (pData++), 1, TIMEOUT)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6898      	ldr	r0, [r3, #8]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	1c4b      	adds	r3, r1, #1
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	23fa      	movs	r3, #250	; 0xfa
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	2201      	movs	r2, #1
 8001426:	f001 fd1f 	bl	8002e68 <HAL_SPI_Transmit>
 800142a:	1e03      	subs	r3, r0, #0
 800142c:	d007      	beq.n	800143e <RFM95_writeBurstRes+0xac>
					!= HAL_OK)
			{
				RFM95_setNSS(RFM_Init->Module.SPI, GPIO_PIN_SET);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2101      	movs	r1, #1
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff ff63 	bl	8001300 <RFM95_setNSS>
				return RFM95_ERROR;
 800143a:	2300      	movs	r3, #0
 800143c:	e013      	b.n	8001466 <RFM95_writeBurstRes+0xd4>
		for (uint8_t i = 0; i < size; i++)
 800143e:	2117      	movs	r1, #23
 8001440:	187b      	adds	r3, r7, r1
 8001442:	781a      	ldrb	r2, [r3, #0]
 8001444:	187b      	adds	r3, r7, r1
 8001446:	3201      	adds	r2, #1
 8001448:	701a      	strb	r2, [r3, #0]
 800144a:	2317      	movs	r3, #23
 800144c:	18fa      	adds	r2, r7, r3
 800144e:	230a      	movs	r3, #10
 8001450:	18fb      	adds	r3, r7, r3
 8001452:	7812      	ldrb	r2, [r2, #0]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	d3dd      	bcc.n	8001416 <RFM95_writeBurstRes+0x84>
			}
		}
		RFM95_setNSS(RFM_Init, GPIO_PIN_SET);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2101      	movs	r1, #1
 800145e:	0018      	movs	r0, r3
 8001460:	f7ff ff4e 	bl	8001300 <RFM95_setNSS>
		return RFM95_OK;
 8001464:	2301      	movs	r3, #1
	}

}
 8001466:	0018      	movs	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	b007      	add	sp, #28
 800146c:	bd90      	pop	{r4, r7, pc}

0800146e <RFM95_writeByteRes>:

RFM95_StatusTypedef RFM95_writeByteRes(RFM95_HandleTypedef *RFM_Init,
		uint8_t addr, uint8_t data)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b084      	sub	sp, #16
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	0008      	movs	r0, r1
 8001478:	0011      	movs	r1, r2
 800147a:	1cfb      	adds	r3, r7, #3
 800147c:	1c02      	adds	r2, r0, #0
 800147e:	701a      	strb	r2, [r3, #0]
 8001480:	1cbb      	adds	r3, r7, #2
 8001482:	1c0a      	adds	r2, r1, #0
 8001484:	701a      	strb	r2, [r3, #0]
	uint8_t dataWrite = (addr | 0x80);
 8001486:	1cfb      	adds	r3, r7, #3
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2280      	movs	r2, #128	; 0x80
 800148c:	4252      	negs	r2, r2
 800148e:	4313      	orrs	r3, r2
 8001490:	b2da      	uxtb	r2, r3
 8001492:	210f      	movs	r1, #15
 8001494:	187b      	adds	r3, r7, r1
 8001496:	701a      	strb	r2, [r3, #0]
	//RFM95_setNSS(RFM_Init, GPIO_PIN_RESET);
	if (HAL_SPI_Transmit(RFM_Init->Module.SPI, &dataWrite, 1, TIMEOUT)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6898      	ldr	r0, [r3, #8]
 800149c:	23fa      	movs	r3, #250	; 0xfa
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	1879      	adds	r1, r7, r1
 80014a2:	2201      	movs	r2, #1
 80014a4:	f001 fce0 	bl	8002e68 <HAL_SPI_Transmit>
 80014a8:	1e03      	subs	r3, r0, #0
 80014aa:	d006      	beq.n	80014ba <RFM95_writeByteRes+0x4c>
			!= HAL_OK)
	{
		RFM95_setNSS(RFM_Init, GPIO_PIN_SET);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2101      	movs	r1, #1
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff ff25 	bl	8001300 <RFM95_setNSS>
		return RFM95_ERROR;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e016      	b.n	80014e8 <RFM95_writeByteRes+0x7a>
	}
	if (HAL_SPI_Transmit(RFM_Init->Module.SPI, &data, 1, TIMEOUT) != HAL_OK)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6898      	ldr	r0, [r3, #8]
 80014be:	23fa      	movs	r3, #250	; 0xfa
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	1cb9      	adds	r1, r7, #2
 80014c4:	2201      	movs	r2, #1
 80014c6:	f001 fccf 	bl	8002e68 <HAL_SPI_Transmit>
 80014ca:	1e03      	subs	r3, r0, #0
 80014cc:	d006      	beq.n	80014dc <RFM95_writeByteRes+0x6e>
	{
		RFM95_setNSS(RFM_Init, GPIO_PIN_SET);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2101      	movs	r1, #1
 80014d2:	0018      	movs	r0, r3
 80014d4:	f7ff ff14 	bl	8001300 <RFM95_setNSS>
		return RFM95_ERROR;
 80014d8:	2300      	movs	r3, #0
 80014da:	e005      	b.n	80014e8 <RFM95_writeByteRes+0x7a>
	}
	RFM95_setNSS(RFM_Init, GPIO_PIN_SET);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2101      	movs	r1, #1
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff ff0d 	bl	8001300 <RFM95_setNSS>
	return RFM95_OK;
 80014e6:	2301      	movs	r3, #1

}
 80014e8:	0018      	movs	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b004      	add	sp, #16
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <HAL_MspInit+0x24>)
 80014f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_MspInit+0x24>)
 80014fa:	2101      	movs	r1, #1
 80014fc:	430a      	orrs	r2, r1
 80014fe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <HAL_MspInit+0x24>)
 8001502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <HAL_MspInit+0x24>)
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	0549      	lsls	r1, r1, #21
 800150a:	430a      	orrs	r2, r1
 800150c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40021000 	.word	0x40021000

08001518 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b089      	sub	sp, #36	; 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	240c      	movs	r4, #12
 8001522:	193b      	adds	r3, r7, r4
 8001524:	0018      	movs	r0, r3
 8001526:	2314      	movs	r3, #20
 8001528:	001a      	movs	r2, r3
 800152a:	2100      	movs	r1, #0
 800152c:	f002 ffb6 	bl	800449c <memset>
  if(hspi->Instance==SPI1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a18      	ldr	r2, [pc, #96]	; (8001598 <HAL_SPI_MspInit+0x80>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d129      	bne.n	800158e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <HAL_SPI_MspInit+0x84>)
 800153c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <HAL_SPI_MspInit+0x84>)
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	0149      	lsls	r1, r1, #5
 8001544:	430a      	orrs	r2, r1
 8001546:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <HAL_SPI_MspInit+0x84>)
 800154a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <HAL_SPI_MspInit+0x84>)
 800154e:	2101      	movs	r1, #1
 8001550:	430a      	orrs	r2, r1
 8001552:	62da      	str	r2, [r3, #44]	; 0x2c
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <HAL_SPI_MspInit+0x84>)
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	2201      	movs	r2, #1
 800155a:	4013      	ands	r3, r2
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001560:	0021      	movs	r1, r4
 8001562:	187b      	adds	r3, r7, r1
 8001564:	22e0      	movs	r2, #224	; 0xe0
 8001566:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	187b      	adds	r3, r7, r1
 800156a:	2202      	movs	r2, #2
 800156c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	187b      	adds	r3, r7, r1
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	187b      	adds	r3, r7, r1
 8001576:	2203      	movs	r2, #3
 8001578:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800157a:	187b      	adds	r3, r7, r1
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	187a      	adds	r2, r7, r1
 8001582:	23a0      	movs	r3, #160	; 0xa0
 8001584:	05db      	lsls	r3, r3, #23
 8001586:	0011      	movs	r1, r2
 8001588:	0018      	movs	r0, r3
 800158a:	f000 fa8f 	bl	8001aac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	46bd      	mov	sp, r7
 8001592:	b009      	add	sp, #36	; 0x24
 8001594:	bd90      	pop	{r4, r7, pc}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	40013000 	.word	0x40013000
 800159c:	40021000 	.word	0x40021000

080015a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	240c      	movs	r4, #12
 80015aa:	193b      	adds	r3, r7, r4
 80015ac:	0018      	movs	r0, r3
 80015ae:	2314      	movs	r3, #20
 80015b0:	001a      	movs	r2, r3
 80015b2:	2100      	movs	r1, #0
 80015b4:	f002 ff72 	bl	800449c <memset>
  if(huart->Instance==USART2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a18      	ldr	r2, [pc, #96]	; (8001620 <HAL_UART_MspInit+0x80>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d129      	bne.n	8001616 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <HAL_UART_MspInit+0x84>)
 80015c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <HAL_UART_MspInit+0x84>)
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	0289      	lsls	r1, r1, #10
 80015cc:	430a      	orrs	r2, r1
 80015ce:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <HAL_UART_MspInit+0x84>)
 80015d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d4:	4b13      	ldr	r3, [pc, #76]	; (8001624 <HAL_UART_MspInit+0x84>)
 80015d6:	2101      	movs	r1, #1
 80015d8:	430a      	orrs	r2, r1
 80015da:	62da      	str	r2, [r3, #44]	; 0x2c
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_UART_MspInit+0x84>)
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	2201      	movs	r2, #1
 80015e2:	4013      	ands	r3, r2
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015e8:	0021      	movs	r1, r4
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	220c      	movs	r2, #12
 80015ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	187b      	adds	r3, r7, r1
 80015f2:	2202      	movs	r2, #2
 80015f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	187b      	adds	r3, r7, r1
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	187b      	adds	r3, r7, r1
 80015fe:	2203      	movs	r2, #3
 8001600:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001602:	187b      	adds	r3, r7, r1
 8001604:	2204      	movs	r2, #4
 8001606:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	187a      	adds	r2, r7, r1
 800160a:	23a0      	movs	r3, #160	; 0xa0
 800160c:	05db      	lsls	r3, r3, #23
 800160e:	0011      	movs	r1, r2
 8001610:	0018      	movs	r0, r3
 8001612:	f000 fa4b 	bl	8001aac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	46bd      	mov	sp, r7
 800161a:	b009      	add	sp, #36	; 0x24
 800161c:	bd90      	pop	{r4, r7, pc}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	40004400 	.word	0x40004400
 8001624:	40021000 	.word	0x40021000

08001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800162c:	e7fe      	b.n	800162c <NMI_Handler+0x4>

0800162e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <HardFault_Handler+0x4>

08001634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001638:	46c0      	nop			; (mov r8, r8)
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164c:	f000 f910 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	0018      	movs	r0, r3
 8001660:	f000 fbc0 	bl	8001de4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e00a      	b.n	8001692 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800167c:	e000      	b.n	8001680 <_read+0x16>
 800167e:	bf00      	nop
 8001680:	0001      	movs	r1, r0
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	1c5a      	adds	r2, r3, #1
 8001686:	60ba      	str	r2, [r7, #8]
 8001688:	b2ca      	uxtb	r2, r1
 800168a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	3301      	adds	r3, #1
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	429a      	cmp	r2, r3
 8001698:	dbf0      	blt.n	800167c <_read+0x12>
	}

return len;
 800169a:	687b      	ldr	r3, [r7, #4]
}
 800169c:	0018      	movs	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	b006      	add	sp, #24
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_close>:
	}
	return len;
}

int _close(int file)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	return -1;
 80016ac:	2301      	movs	r3, #1
 80016ae:	425b      	negs	r3, r3
}
 80016b0:	0018      	movs	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b002      	add	sp, #8
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	2280      	movs	r2, #128	; 0x80
 80016c6:	0192      	lsls	r2, r2, #6
 80016c8:	605a      	str	r2, [r3, #4]
	return 0;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	0018      	movs	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b002      	add	sp, #8
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <_isatty>:

int _isatty(int file)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	return 1;
 80016dc:	2301      	movs	r3, #1
}
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b002      	add	sp, #8
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b084      	sub	sp, #16
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
	return 0;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	0018      	movs	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b004      	add	sp, #16
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001704:	4a14      	ldr	r2, [pc, #80]	; (8001758 <_sbrk+0x5c>)
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <_sbrk+0x60>)
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d102      	bne.n	800171e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <_sbrk+0x64>)
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <_sbrk+0x68>)
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	18d3      	adds	r3, r2, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	429a      	cmp	r2, r3
 800172a:	d207      	bcs.n	800173c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800172c:	f002 fe8c 	bl	8004448 <__errno>
 8001730:	0003      	movs	r3, r0
 8001732:	220c      	movs	r2, #12
 8001734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001736:	2301      	movs	r3, #1
 8001738:	425b      	negs	r3, r3
 800173a:	e009      	b.n	8001750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	18d2      	adds	r2, r2, r3
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <_sbrk+0x64>)
 800174c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800174e:	68fb      	ldr	r3, [r7, #12]
}
 8001750:	0018      	movs	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	b006      	add	sp, #24
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20005000 	.word	0x20005000
 800175c:	00000400 	.word	0x00000400
 8001760:	20000270 	.word	0x20000270
 8001764:	20000388 	.word	0x20000388

08001768 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800176c:	46c0      	nop			; (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001774:	480d      	ldr	r0, [pc, #52]	; (80017ac <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001776:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001778:	480d      	ldr	r0, [pc, #52]	; (80017b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800177a:	490e      	ldr	r1, [pc, #56]	; (80017b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800177c:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <LoopForever+0xe>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001780:	e002      	b.n	8001788 <LoopCopyDataInit>

08001782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001786:	3304      	adds	r3, #4

08001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800178c:	d3f9      	bcc.n	8001782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178e:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001790:	4c0b      	ldr	r4, [pc, #44]	; (80017c0 <LoopForever+0x16>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001794:	e001      	b.n	800179a <LoopFillZerobss>

08001796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001798:	3204      	adds	r2, #4

0800179a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800179c:	d3fb      	bcc.n	8001796 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800179e:	f7ff ffe3 	bl	8001768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a2:	f002 fe57 	bl	8004454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a6:	f7fe fec7 	bl	8000538 <main>

080017aa <LoopForever>:

LoopForever:
    b LoopForever
 80017aa:	e7fe      	b.n	80017aa <LoopForever>
   ldr   r0, =_estack
 80017ac:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80017b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80017b8:	08005908 	.word	0x08005908
  ldr r2, =_sbss
 80017bc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80017c0:	20000384 	.word	0x20000384

080017c4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c4:	e7fe      	b.n	80017c4 <ADC1_COMP_IRQHandler>
	...

080017c8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017ce:	1dfb      	adds	r3, r7, #7
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_Init+0x3c>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <HAL_Init+0x3c>)
 80017da:	2140      	movs	r1, #64	; 0x40
 80017dc:	430a      	orrs	r2, r1
 80017de:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017e0:	2003      	movs	r0, #3
 80017e2:	f000 f811 	bl	8001808 <HAL_InitTick>
 80017e6:	1e03      	subs	r3, r0, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80017ea:	1dfb      	adds	r3, r7, #7
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	e001      	b.n	80017f6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017f2:	f7ff fe7d 	bl	80014f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017f6:	1dfb      	adds	r3, r7, #7
 80017f8:	781b      	ldrb	r3, [r3, #0]
}
 80017fa:	0018      	movs	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b002      	add	sp, #8
 8001800:	bd80      	pop	{r7, pc}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	40022000 	.word	0x40022000

08001808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <HAL_InitTick+0x5c>)
 8001812:	681c      	ldr	r4, [r3, #0]
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <HAL_InitTick+0x60>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	0019      	movs	r1, r3
 800181a:	23fa      	movs	r3, #250	; 0xfa
 800181c:	0098      	lsls	r0, r3, #2
 800181e:	f7fe fc7d 	bl	800011c <__udivsi3>
 8001822:	0003      	movs	r3, r0
 8001824:	0019      	movs	r1, r3
 8001826:	0020      	movs	r0, r4
 8001828:	f7fe fc78 	bl	800011c <__udivsi3>
 800182c:	0003      	movs	r3, r0
 800182e:	0018      	movs	r0, r3
 8001830:	f000 f92f 	bl	8001a92 <HAL_SYSTICK_Config>
 8001834:	1e03      	subs	r3, r0, #0
 8001836:	d001      	beq.n	800183c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e00f      	b.n	800185c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b03      	cmp	r3, #3
 8001840:	d80b      	bhi.n	800185a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	2301      	movs	r3, #1
 8001846:	425b      	negs	r3, r3
 8001848:	2200      	movs	r2, #0
 800184a:	0018      	movs	r0, r3
 800184c:	f000 f8fc 	bl	8001a48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_InitTick+0x64>)
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
}
 800185c:	0018      	movs	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	b003      	add	sp, #12
 8001862:	bd90      	pop	{r4, r7, pc}
 8001864:	2000001c 	.word	0x2000001c
 8001868:	20000024 	.word	0x20000024
 800186c:	20000020 	.word	0x20000020

08001870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_IncTick+0x1c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	001a      	movs	r2, r3
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_IncTick+0x20>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	18d2      	adds	r2, r2, r3
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <HAL_IncTick+0x20>)
 8001882:	601a      	str	r2, [r3, #0]
}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	20000024 	.word	0x20000024
 8001890:	20000370 	.word	0x20000370

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b02      	ldr	r3, [pc, #8]	; (80018a4 <HAL_GetTick+0x10>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	0018      	movs	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	20000370 	.word	0x20000370

080018a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b0:	f7ff fff0 	bl	8001894 <HAL_GetTick>
 80018b4:	0003      	movs	r3, r0
 80018b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	3301      	adds	r3, #1
 80018c0:	d005      	beq.n	80018ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <HAL_Delay+0x44>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	001a      	movs	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	189b      	adds	r3, r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	f7ff ffe0 	bl	8001894 <HAL_GetTick>
 80018d4:	0002      	movs	r2, r0
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d8f7      	bhi.n	80018d0 <HAL_Delay+0x28>
  {
  }
}
 80018e0:	46c0      	nop			; (mov r8, r8)
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b004      	add	sp, #16
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	20000024 	.word	0x20000024

080018f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	0002      	movs	r2, r0
 80018f8:	1dfb      	adds	r3, r7, #7
 80018fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	1dfb      	adds	r3, r7, #7
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b7f      	cmp	r3, #127	; 0x7f
 8001902:	d809      	bhi.n	8001918 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001904:	1dfb      	adds	r3, r7, #7
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	001a      	movs	r2, r3
 800190a:	231f      	movs	r3, #31
 800190c:	401a      	ands	r2, r3
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <__NVIC_EnableIRQ+0x30>)
 8001910:	2101      	movs	r1, #1
 8001912:	4091      	lsls	r1, r2
 8001914:	000a      	movs	r2, r1
 8001916:	601a      	str	r2, [r3, #0]
  }
}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}
 8001920:	e000e100 	.word	0xe000e100

08001924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	0002      	movs	r2, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b7f      	cmp	r3, #127	; 0x7f
 8001938:	d828      	bhi.n	800198c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800193a:	4a2f      	ldr	r2, [pc, #188]	; (80019f8 <__NVIC_SetPriority+0xd4>)
 800193c:	1dfb      	adds	r3, r7, #7
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b25b      	sxtb	r3, r3
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	33c0      	adds	r3, #192	; 0xc0
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	589b      	ldr	r3, [r3, r2]
 800194a:	1dfa      	adds	r2, r7, #7
 800194c:	7812      	ldrb	r2, [r2, #0]
 800194e:	0011      	movs	r1, r2
 8001950:	2203      	movs	r2, #3
 8001952:	400a      	ands	r2, r1
 8001954:	00d2      	lsls	r2, r2, #3
 8001956:	21ff      	movs	r1, #255	; 0xff
 8001958:	4091      	lsls	r1, r2
 800195a:	000a      	movs	r2, r1
 800195c:	43d2      	mvns	r2, r2
 800195e:	401a      	ands	r2, r3
 8001960:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	019b      	lsls	r3, r3, #6
 8001966:	22ff      	movs	r2, #255	; 0xff
 8001968:	401a      	ands	r2, r3
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	0018      	movs	r0, r3
 8001970:	2303      	movs	r3, #3
 8001972:	4003      	ands	r3, r0
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001978:	481f      	ldr	r0, [pc, #124]	; (80019f8 <__NVIC_SetPriority+0xd4>)
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b25b      	sxtb	r3, r3
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	430a      	orrs	r2, r1
 8001984:	33c0      	adds	r3, #192	; 0xc0
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800198a:	e031      	b.n	80019f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800198c:	4a1b      	ldr	r2, [pc, #108]	; (80019fc <__NVIC_SetPriority+0xd8>)
 800198e:	1dfb      	adds	r3, r7, #7
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	0019      	movs	r1, r3
 8001994:	230f      	movs	r3, #15
 8001996:	400b      	ands	r3, r1
 8001998:	3b08      	subs	r3, #8
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3306      	adds	r3, #6
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	18d3      	adds	r3, r2, r3
 80019a2:	3304      	adds	r3, #4
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	1dfa      	adds	r2, r7, #7
 80019a8:	7812      	ldrb	r2, [r2, #0]
 80019aa:	0011      	movs	r1, r2
 80019ac:	2203      	movs	r2, #3
 80019ae:	400a      	ands	r2, r1
 80019b0:	00d2      	lsls	r2, r2, #3
 80019b2:	21ff      	movs	r1, #255	; 0xff
 80019b4:	4091      	lsls	r1, r2
 80019b6:	000a      	movs	r2, r1
 80019b8:	43d2      	mvns	r2, r2
 80019ba:	401a      	ands	r2, r3
 80019bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	019b      	lsls	r3, r3, #6
 80019c2:	22ff      	movs	r2, #255	; 0xff
 80019c4:	401a      	ands	r2, r3
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	0018      	movs	r0, r3
 80019cc:	2303      	movs	r3, #3
 80019ce:	4003      	ands	r3, r0
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019d4:	4809      	ldr	r0, [pc, #36]	; (80019fc <__NVIC_SetPriority+0xd8>)
 80019d6:	1dfb      	adds	r3, r7, #7
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	001c      	movs	r4, r3
 80019dc:	230f      	movs	r3, #15
 80019de:	4023      	ands	r3, r4
 80019e0:	3b08      	subs	r3, #8
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	430a      	orrs	r2, r1
 80019e6:	3306      	adds	r3, #6
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	18c3      	adds	r3, r0, r3
 80019ec:	3304      	adds	r3, #4
 80019ee:	601a      	str	r2, [r3, #0]
}
 80019f0:	46c0      	nop			; (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b003      	add	sp, #12
 80019f6:	bd90      	pop	{r4, r7, pc}
 80019f8:	e000e100 	.word	0xe000e100
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	1e5a      	subs	r2, r3, #1
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	045b      	lsls	r3, r3, #17
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d301      	bcc.n	8001a18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a14:	2301      	movs	r3, #1
 8001a16:	e010      	b.n	8001a3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <SysTick_Config+0x44>)
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	3a01      	subs	r2, #1
 8001a1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a20:	2301      	movs	r3, #1
 8001a22:	425b      	negs	r3, r3
 8001a24:	2103      	movs	r1, #3
 8001a26:	0018      	movs	r0, r3
 8001a28:	f7ff ff7c 	bl	8001924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <SysTick_Config+0x44>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <SysTick_Config+0x44>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b002      	add	sp, #8
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	210f      	movs	r1, #15
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	1c02      	adds	r2, r0, #0
 8001a58:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	187b      	adds	r3, r7, r1
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	0011      	movs	r1, r2
 8001a64:	0018      	movs	r0, r3
 8001a66:	f7ff ff5d 	bl	8001924 <__NVIC_SetPriority>
}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b004      	add	sp, #16
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	0002      	movs	r2, r0
 8001a7a:	1dfb      	adds	r3, r7, #7
 8001a7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a7e:	1dfb      	adds	r3, r7, #7
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b25b      	sxtb	r3, r3
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7ff ff33 	bl	80018f0 <__NVIC_EnableIRQ>
}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b002      	add	sp, #8
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff ffaf 	bl	8001a00 <SysTick_Config>
 8001aa2:	0003      	movs	r3, r0
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b002      	add	sp, #8
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ac2:	e155      	b.n	8001d70 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2101      	movs	r1, #1
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	4091      	lsls	r1, r2
 8001ace:	000a      	movs	r2, r1
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d100      	bne.n	8001adc <HAL_GPIO_Init+0x30>
 8001ada:	e146      	b.n	8001d6a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d005      	beq.n	8001af4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2203      	movs	r2, #3
 8001aee:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d130      	bne.n	8001b56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	409a      	lsls	r2, r3
 8001b02:	0013      	movs	r3, r2
 8001b04:	43da      	mvns	r2, r3
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	409a      	lsls	r2, r3
 8001b16:	0013      	movs	r3, r2
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	0013      	movs	r3, r2
 8001b32:	43da      	mvns	r2, r3
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	091b      	lsrs	r3, r3, #4
 8001b40:	2201      	movs	r2, #1
 8001b42:	401a      	ands	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	409a      	lsls	r2, r3
 8001b48:	0013      	movs	r3, r2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d017      	beq.n	8001b92 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	0013      	movs	r3, r2
 8001b72:	43da      	mvns	r2, r3
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	409a      	lsls	r2, r3
 8001b84:	0013      	movs	r3, r2
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2203      	movs	r2, #3
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d123      	bne.n	8001be6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	08da      	lsrs	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3208      	adds	r2, #8
 8001ba6:	0092      	lsls	r2, r2, #2
 8001ba8:	58d3      	ldr	r3, [r2, r3]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2207      	movs	r2, #7
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	0013      	movs	r3, r2
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	691a      	ldr	r2, [r3, #16]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2107      	movs	r1, #7
 8001bca:	400b      	ands	r3, r1
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	0013      	movs	r3, r2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	08da      	lsrs	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3208      	adds	r2, #8
 8001be0:	0092      	lsls	r2, r2, #2
 8001be2:	6939      	ldr	r1, [r7, #16]
 8001be4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	0013      	movs	r3, r2
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2203      	movs	r2, #3
 8001c04:	401a      	ands	r2, r3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	0013      	movs	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	23c0      	movs	r3, #192	; 0xc0
 8001c20:	029b      	lsls	r3, r3, #10
 8001c22:	4013      	ands	r3, r2
 8001c24:	d100      	bne.n	8001c28 <HAL_GPIO_Init+0x17c>
 8001c26:	e0a0      	b.n	8001d6a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c28:	4b57      	ldr	r3, [pc, #348]	; (8001d88 <HAL_GPIO_Init+0x2dc>)
 8001c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2c:	4b56      	ldr	r3, [pc, #344]	; (8001d88 <HAL_GPIO_Init+0x2dc>)
 8001c2e:	2101      	movs	r1, #1
 8001c30:	430a      	orrs	r2, r1
 8001c32:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c34:	4a55      	ldr	r2, [pc, #340]	; (8001d8c <HAL_GPIO_Init+0x2e0>)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	089b      	lsrs	r3, r3, #2
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	589b      	ldr	r3, [r3, r2]
 8001c40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2203      	movs	r2, #3
 8001c46:	4013      	ands	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	0013      	movs	r3, r2
 8001c50:	43da      	mvns	r2, r3
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	23a0      	movs	r3, #160	; 0xa0
 8001c5c:	05db      	lsls	r3, r3, #23
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d01f      	beq.n	8001ca2 <HAL_GPIO_Init+0x1f6>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4a      	ldr	r2, [pc, #296]	; (8001d90 <HAL_GPIO_Init+0x2e4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d019      	beq.n	8001c9e <HAL_GPIO_Init+0x1f2>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a49      	ldr	r2, [pc, #292]	; (8001d94 <HAL_GPIO_Init+0x2e8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d013      	beq.n	8001c9a <HAL_GPIO_Init+0x1ee>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a48      	ldr	r2, [pc, #288]	; (8001d98 <HAL_GPIO_Init+0x2ec>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00d      	beq.n	8001c96 <HAL_GPIO_Init+0x1ea>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a47      	ldr	r2, [pc, #284]	; (8001d9c <HAL_GPIO_Init+0x2f0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d007      	beq.n	8001c92 <HAL_GPIO_Init+0x1e6>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a46      	ldr	r2, [pc, #280]	; (8001da0 <HAL_GPIO_Init+0x2f4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_GPIO_Init+0x1e2>
 8001c8a:	2305      	movs	r3, #5
 8001c8c:	e00a      	b.n	8001ca4 <HAL_GPIO_Init+0x1f8>
 8001c8e:	2306      	movs	r3, #6
 8001c90:	e008      	b.n	8001ca4 <HAL_GPIO_Init+0x1f8>
 8001c92:	2304      	movs	r3, #4
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x1f8>
 8001c96:	2303      	movs	r3, #3
 8001c98:	e004      	b.n	8001ca4 <HAL_GPIO_Init+0x1f8>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e002      	b.n	8001ca4 <HAL_GPIO_Init+0x1f8>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_GPIO_Init+0x1f8>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	2103      	movs	r1, #3
 8001ca8:	400a      	ands	r2, r1
 8001caa:	0092      	lsls	r2, r2, #2
 8001cac:	4093      	lsls	r3, r2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb4:	4935      	ldr	r1, [pc, #212]	; (8001d8c <HAL_GPIO_Init+0x2e0>)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc2:	4b38      	ldr	r3, [pc, #224]	; (8001da4 <HAL_GPIO_Init+0x2f8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	025b      	lsls	r3, r3, #9
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ce6:	4b2f      	ldr	r3, [pc, #188]	; (8001da4 <HAL_GPIO_Init+0x2f8>)
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001cec:	4b2d      	ldr	r3, [pc, #180]	; (8001da4 <HAL_GPIO_Init+0x2f8>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	43da      	mvns	r2, r3
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	029b      	lsls	r3, r3, #10
 8001d04:	4013      	ands	r3, r2
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d10:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <HAL_GPIO_Init+0x2f8>)
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d16:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <HAL_GPIO_Init+0x2f8>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	035b      	lsls	r3, r3, #13
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <HAL_GPIO_Init+0x2f8>)
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d40:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <HAL_GPIO_Init+0x2f8>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	43da      	mvns	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	039b      	lsls	r3, r3, #14
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <HAL_GPIO_Init+0x2f8>)
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	40da      	lsrs	r2, r3
 8001d78:	1e13      	subs	r3, r2, #0
 8001d7a:	d000      	beq.n	8001d7e <HAL_GPIO_Init+0x2d2>
 8001d7c:	e6a2      	b.n	8001ac4 <HAL_GPIO_Init+0x18>
  }
}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	46c0      	nop			; (mov r8, r8)
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b006      	add	sp, #24
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40010000 	.word	0x40010000
 8001d90:	50000400 	.word	0x50000400
 8001d94:	50000800 	.word	0x50000800
 8001d98:	50000c00 	.word	0x50000c00
 8001d9c:	50001000 	.word	0x50001000
 8001da0:	50001c00 	.word	0x50001c00
 8001da4:	40010400 	.word	0x40010400

08001da8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	0008      	movs	r0, r1
 8001db2:	0011      	movs	r1, r2
 8001db4:	1cbb      	adds	r3, r7, #2
 8001db6:	1c02      	adds	r2, r0, #0
 8001db8:	801a      	strh	r2, [r3, #0]
 8001dba:	1c7b      	adds	r3, r7, #1
 8001dbc:	1c0a      	adds	r2, r1, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dc0:	1c7b      	adds	r3, r7, #1
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d004      	beq.n	8001dd2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dc8:	1cbb      	adds	r3, r7, #2
 8001dca:	881a      	ldrh	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001dd0:	e003      	b.n	8001dda <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001dd2:	1cbb      	adds	r3, r7, #2
 8001dd4:	881a      	ldrh	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b002      	add	sp, #8
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	0002      	movs	r2, r0
 8001dec:	1dbb      	adds	r3, r7, #6
 8001dee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	1dba      	adds	r2, r7, #6
 8001df6:	8812      	ldrh	r2, [r2, #0]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d008      	beq.n	8001e0e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001dfe:	1dba      	adds	r2, r7, #6
 8001e00:	8812      	ldrh	r2, [r2, #0]
 8001e02:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e04:	1dbb      	adds	r3, r7, #6
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f7fe fb67 	bl	80004dc <HAL_GPIO_EXTI_Callback>
  }
}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b002      	add	sp, #8
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	40010400 	.word	0x40010400

08001e1c <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3 for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8001e24:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <HAL_PWR_EnableWakeUpPin+0x1c>)
 8001e26:	6859      	ldr	r1, [r3, #4]
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_PWR_EnableWakeUpPin+0x1c>)
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	605a      	str	r2, [r3, #4]
}
 8001e30:	46c0      	nop			; (mov r8, r8)
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b002      	add	sp, #8
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40007000 	.word	0x40007000

08001e3c <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8001e46:	2102      	movs	r1, #2
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001e52:	2104      	movs	r1, #4
 8001e54:	430a      	orrs	r2, r1
 8001e56:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001e58:	bf30      	wfi
}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40007000 	.word	0x40007000
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e68:	b5b0      	push	{r4, r5, r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d102      	bne.n	8001e7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	f000 fbbf 	bl	80025fa <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e7c:	4bc9      	ldr	r3, [pc, #804]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	220c      	movs	r2, #12
 8001e82:	4013      	ands	r3, r2
 8001e84:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e86:	4bc7      	ldr	r3, [pc, #796]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	025b      	lsls	r3, r3, #9
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2201      	movs	r2, #1
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d100      	bne.n	8001e9e <HAL_RCC_OscConfig+0x36>
 8001e9c:	e07e      	b.n	8001f9c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d007      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	2b0c      	cmp	r3, #12
 8001ea8:	d112      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x68>
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	025b      	lsls	r3, r3, #9
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d10d      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	4bbb      	ldr	r3, [pc, #748]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	029b      	lsls	r3, r3, #10
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d100      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x5a>
 8001ec0:	e06b      	b.n	8001f9a <HAL_RCC_OscConfig+0x132>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d167      	bne.n	8001f9a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f000 fb95 	bl	80025fa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	025b      	lsls	r3, r3, #9
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d107      	bne.n	8001eec <HAL_RCC_OscConfig+0x84>
 8001edc:	4bb1      	ldr	r3, [pc, #708]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4bb0      	ldr	r3, [pc, #704]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8001ee2:	2180      	movs	r1, #128	; 0x80
 8001ee4:	0249      	lsls	r1, r1, #9
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	e027      	b.n	8001f3c <HAL_RCC_OscConfig+0xd4>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	23a0      	movs	r3, #160	; 0xa0
 8001ef2:	02db      	lsls	r3, r3, #11
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d10e      	bne.n	8001f16 <HAL_RCC_OscConfig+0xae>
 8001ef8:	4baa      	ldr	r3, [pc, #680]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4ba9      	ldr	r3, [pc, #676]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	02c9      	lsls	r1, r1, #11
 8001f02:	430a      	orrs	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	4ba7      	ldr	r3, [pc, #668]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4ba6      	ldr	r3, [pc, #664]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8001f0c:	2180      	movs	r1, #128	; 0x80
 8001f0e:	0249      	lsls	r1, r1, #9
 8001f10:	430a      	orrs	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	e012      	b.n	8001f3c <HAL_RCC_OscConfig+0xd4>
 8001f16:	4ba3      	ldr	r3, [pc, #652]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4ba2      	ldr	r3, [pc, #648]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8001f1c:	49a2      	ldr	r1, [pc, #648]	; (80021a8 <HAL_RCC_OscConfig+0x340>)
 8001f1e:	400a      	ands	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	4ba0      	ldr	r3, [pc, #640]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	025b      	lsls	r3, r3, #9
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4b9c      	ldr	r3, [pc, #624]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b9b      	ldr	r3, [pc, #620]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8001f36:	499d      	ldr	r1, [pc, #628]	; (80021ac <HAL_RCC_OscConfig+0x344>)
 8001f38:	400a      	ands	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d015      	beq.n	8001f70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7ff fca6 	bl	8001894 <HAL_GetTick>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f4c:	e009      	b.n	8001f62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f4e:	f7ff fca1 	bl	8001894 <HAL_GetTick>
 8001f52:	0002      	movs	r2, r0
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b64      	cmp	r3, #100	; 0x64
 8001f5a:	d902      	bls.n	8001f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	f000 fb4c 	bl	80025fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f62:	4b90      	ldr	r3, [pc, #576]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	029b      	lsls	r3, r3, #10
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d0ef      	beq.n	8001f4e <HAL_RCC_OscConfig+0xe6>
 8001f6e:	e015      	b.n	8001f9c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff fc90 	bl	8001894 <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f7a:	f7ff fc8b 	bl	8001894 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b64      	cmp	r3, #100	; 0x64
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e336      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f8c:	4b85      	ldr	r3, [pc, #532]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	029b      	lsls	r3, r3, #10
 8001f94:	4013      	ands	r3, r2
 8001f96:	d1f0      	bne.n	8001f7a <HAL_RCC_OscConfig+0x112>
 8001f98:	e000      	b.n	8001f9c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d100      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x140>
 8001fa6:	e099      	b.n	80020dc <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d009      	beq.n	8001fca <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001fb6:	4b7b      	ldr	r3, [pc, #492]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4b7a      	ldr	r3, [pc, #488]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8001fbc:	2120      	movs	r1, #32
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	4393      	bics	r3, r2
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d13e      	bne.n	8002054 <HAL_RCC_OscConfig+0x1ec>
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d13b      	bne.n	8002054 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001fdc:	4b71      	ldr	r3, [pc, #452]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d004      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x188>
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e304      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff0:	4b6c      	ldr	r3, [pc, #432]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4a6e      	ldr	r2, [pc, #440]	; (80021b0 <HAL_RCC_OscConfig+0x348>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	021a      	lsls	r2, r3, #8
 8002000:	4b68      	ldr	r3, [pc, #416]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8002002:	430a      	orrs	r2, r1
 8002004:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002006:	4b67      	ldr	r3, [pc, #412]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2209      	movs	r2, #9
 800200c:	4393      	bics	r3, r2
 800200e:	0019      	movs	r1, r3
 8002010:	4b64      	ldr	r3, [pc, #400]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8002012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002014:	430a      	orrs	r2, r1
 8002016:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002018:	f000 fc42 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 800201c:	0001      	movs	r1, r0
 800201e:	4b61      	ldr	r3, [pc, #388]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	091b      	lsrs	r3, r3, #4
 8002024:	220f      	movs	r2, #15
 8002026:	4013      	ands	r3, r2
 8002028:	4a62      	ldr	r2, [pc, #392]	; (80021b4 <HAL_RCC_OscConfig+0x34c>)
 800202a:	5cd3      	ldrb	r3, [r2, r3]
 800202c:	000a      	movs	r2, r1
 800202e:	40da      	lsrs	r2, r3
 8002030:	4b61      	ldr	r3, [pc, #388]	; (80021b8 <HAL_RCC_OscConfig+0x350>)
 8002032:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002034:	4b61      	ldr	r3, [pc, #388]	; (80021bc <HAL_RCC_OscConfig+0x354>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2513      	movs	r5, #19
 800203a:	197c      	adds	r4, r7, r5
 800203c:	0018      	movs	r0, r3
 800203e:	f7ff fbe3 	bl	8001808 <HAL_InitTick>
 8002042:	0003      	movs	r3, r0
 8002044:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002046:	197b      	adds	r3, r7, r5
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d046      	beq.n	80020dc <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800204e:	197b      	adds	r3, r7, r5
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	e2d2      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	2b00      	cmp	r3, #0
 8002058:	d027      	beq.n	80020aa <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800205a:	4b52      	ldr	r3, [pc, #328]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2209      	movs	r2, #9
 8002060:	4393      	bics	r3, r2
 8002062:	0019      	movs	r1, r3
 8002064:	4b4f      	ldr	r3, [pc, #316]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8002066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002068:	430a      	orrs	r2, r1
 800206a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7ff fc12 	bl	8001894 <HAL_GetTick>
 8002070:	0003      	movs	r3, r0
 8002072:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002076:	f7ff fc0d 	bl	8001894 <HAL_GetTick>
 800207a:	0002      	movs	r2, r0
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e2b8      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002088:	4b46      	ldr	r3, [pc, #280]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2204      	movs	r2, #4
 800208e:	4013      	ands	r3, r2
 8002090:	d0f1      	beq.n	8002076 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002092:	4b44      	ldr	r3, [pc, #272]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4a46      	ldr	r2, [pc, #280]	; (80021b0 <HAL_RCC_OscConfig+0x348>)
 8002098:	4013      	ands	r3, r2
 800209a:	0019      	movs	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	021a      	lsls	r2, r3, #8
 80020a2:	4b40      	ldr	r3, [pc, #256]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 80020a4:	430a      	orrs	r2, r1
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	e018      	b.n	80020dc <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020aa:	4b3e      	ldr	r3, [pc, #248]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 80020b0:	2101      	movs	r1, #1
 80020b2:	438a      	bics	r2, r1
 80020b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b6:	f7ff fbed 	bl	8001894 <HAL_GetTick>
 80020ba:	0003      	movs	r3, r0
 80020bc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c0:	f7ff fbe8 	bl	8001894 <HAL_GetTick>
 80020c4:	0002      	movs	r2, r0
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e293      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020d2:	4b34      	ldr	r3, [pc, #208]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2204      	movs	r2, #4
 80020d8:	4013      	ands	r3, r2
 80020da:	d1f1      	bne.n	80020c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2210      	movs	r2, #16
 80020e2:	4013      	ands	r3, r2
 80020e4:	d100      	bne.n	80020e8 <HAL_RCC_OscConfig+0x280>
 80020e6:	e0a2      	b.n	800222e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d140      	bne.n	8002170 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020ee:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4013      	ands	r3, r2
 80020f8:	d005      	beq.n	8002106 <HAL_RCC_OscConfig+0x29e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e279      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002106:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4a2d      	ldr	r2, [pc, #180]	; (80021c0 <HAL_RCC_OscConfig+0x358>)
 800210c:	4013      	ands	r3, r2
 800210e:	0019      	movs	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002114:	4b23      	ldr	r3, [pc, #140]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 8002116:	430a      	orrs	r2, r1
 8002118:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	0a19      	lsrs	r1, r3, #8
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	061a      	lsls	r2, r3, #24
 8002128:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 800212a:	430a      	orrs	r2, r1
 800212c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	0b5b      	lsrs	r3, r3, #13
 8002134:	3301      	adds	r3, #1
 8002136:	2280      	movs	r2, #128	; 0x80
 8002138:	0212      	lsls	r2, r2, #8
 800213a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800213c:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	210f      	movs	r1, #15
 8002144:	400b      	ands	r3, r1
 8002146:	491b      	ldr	r1, [pc, #108]	; (80021b4 <HAL_RCC_OscConfig+0x34c>)
 8002148:	5ccb      	ldrb	r3, [r1, r3]
 800214a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800214c:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <HAL_RCC_OscConfig+0x350>)
 800214e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <HAL_RCC_OscConfig+0x354>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2513      	movs	r5, #19
 8002156:	197c      	adds	r4, r7, r5
 8002158:	0018      	movs	r0, r3
 800215a:	f7ff fb55 	bl	8001808 <HAL_InitTick>
 800215e:	0003      	movs	r3, r0
 8002160:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002162:	197b      	adds	r3, r7, r5
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d061      	beq.n	800222e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800216a:	197b      	adds	r3, r7, r5
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	e244      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d040      	beq.n	80021fa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002178:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_RCC_OscConfig+0x33c>)
 800217e:	2180      	movs	r1, #128	; 0x80
 8002180:	0049      	lsls	r1, r1, #1
 8002182:	430a      	orrs	r2, r1
 8002184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002186:	f7ff fb85 	bl	8001894 <HAL_GetTick>
 800218a:	0003      	movs	r3, r0
 800218c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800218e:	e019      	b.n	80021c4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002190:	f7ff fb80 	bl	8001894 <HAL_GetTick>
 8002194:	0002      	movs	r2, r0
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d912      	bls.n	80021c4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e22b      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	40021000 	.word	0x40021000
 80021a8:	fffeffff 	.word	0xfffeffff
 80021ac:	fffbffff 	.word	0xfffbffff
 80021b0:	ffffe0ff 	.word	0xffffe0ff
 80021b4:	080057f4 	.word	0x080057f4
 80021b8:	2000001c 	.word	0x2000001c
 80021bc:	20000020 	.word	0x20000020
 80021c0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021c4:	4bca      	ldr	r3, [pc, #808]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4013      	ands	r3, r2
 80021ce:	d0df      	beq.n	8002190 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d0:	4bc7      	ldr	r3, [pc, #796]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4ac7      	ldr	r2, [pc, #796]	; (80024f4 <HAL_RCC_OscConfig+0x68c>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	0019      	movs	r1, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021de:	4bc4      	ldr	r3, [pc, #784]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 80021e0:	430a      	orrs	r2, r1
 80021e2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021e4:	4bc2      	ldr	r3, [pc, #776]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	0a19      	lsrs	r1, r3, #8
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	061a      	lsls	r2, r3, #24
 80021f2:	4bbf      	ldr	r3, [pc, #764]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 80021f4:	430a      	orrs	r2, r1
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	e019      	b.n	800222e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021fa:	4bbd      	ldr	r3, [pc, #756]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	4bbc      	ldr	r3, [pc, #752]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002200:	49bd      	ldr	r1, [pc, #756]	; (80024f8 <HAL_RCC_OscConfig+0x690>)
 8002202:	400a      	ands	r2, r1
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7ff fb45 	bl	8001894 <HAL_GetTick>
 800220a:	0003      	movs	r3, r0
 800220c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002210:	f7ff fb40 	bl	8001894 <HAL_GetTick>
 8002214:	0002      	movs	r2, r0
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e1eb      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002222:	4bb3      	ldr	r3, [pc, #716]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4013      	ands	r3, r2
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2208      	movs	r2, #8
 8002234:	4013      	ands	r3, r2
 8002236:	d036      	beq.n	80022a6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d019      	beq.n	8002274 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002240:	4bab      	ldr	r3, [pc, #684]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002242:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002244:	4baa      	ldr	r3, [pc, #680]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002246:	2101      	movs	r1, #1
 8002248:	430a      	orrs	r2, r1
 800224a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224c:	f7ff fb22 	bl	8001894 <HAL_GetTick>
 8002250:	0003      	movs	r3, r0
 8002252:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002256:	f7ff fb1d 	bl	8001894 <HAL_GetTick>
 800225a:	0002      	movs	r2, r0
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e1c8      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002268:	4ba1      	ldr	r3, [pc, #644]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 800226a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800226c:	2202      	movs	r2, #2
 800226e:	4013      	ands	r3, r2
 8002270:	d0f1      	beq.n	8002256 <HAL_RCC_OscConfig+0x3ee>
 8002272:	e018      	b.n	80022a6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002274:	4b9e      	ldr	r3, [pc, #632]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002276:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002278:	4b9d      	ldr	r3, [pc, #628]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 800227a:	2101      	movs	r1, #1
 800227c:	438a      	bics	r2, r1
 800227e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002280:	f7ff fb08 	bl	8001894 <HAL_GetTick>
 8002284:	0003      	movs	r3, r0
 8002286:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800228a:	f7ff fb03 	bl	8001894 <HAL_GetTick>
 800228e:	0002      	movs	r2, r0
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e1ae      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800229c:	4b94      	ldr	r3, [pc, #592]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 800229e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a0:	2202      	movs	r2, #2
 80022a2:	4013      	ands	r3, r2
 80022a4:	d1f1      	bne.n	800228a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2204      	movs	r2, #4
 80022ac:	4013      	ands	r3, r2
 80022ae:	d100      	bne.n	80022b2 <HAL_RCC_OscConfig+0x44a>
 80022b0:	e0ae      	b.n	8002410 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b2:	2023      	movs	r0, #35	; 0x23
 80022b4:	183b      	adds	r3, r7, r0
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ba:	4b8d      	ldr	r3, [pc, #564]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 80022bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	055b      	lsls	r3, r3, #21
 80022c2:	4013      	ands	r3, r2
 80022c4:	d109      	bne.n	80022da <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	4b8a      	ldr	r3, [pc, #552]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 80022c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ca:	4b89      	ldr	r3, [pc, #548]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 80022cc:	2180      	movs	r1, #128	; 0x80
 80022ce:	0549      	lsls	r1, r1, #21
 80022d0:	430a      	orrs	r2, r1
 80022d2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80022d4:	183b      	adds	r3, r7, r0
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022da:	4b88      	ldr	r3, [pc, #544]	; (80024fc <HAL_RCC_OscConfig+0x694>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4013      	ands	r3, r2
 80022e4:	d11a      	bne.n	800231c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e6:	4b85      	ldr	r3, [pc, #532]	; (80024fc <HAL_RCC_OscConfig+0x694>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4b84      	ldr	r3, [pc, #528]	; (80024fc <HAL_RCC_OscConfig+0x694>)
 80022ec:	2180      	movs	r1, #128	; 0x80
 80022ee:	0049      	lsls	r1, r1, #1
 80022f0:	430a      	orrs	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f4:	f7ff face 	bl	8001894 <HAL_GetTick>
 80022f8:	0003      	movs	r3, r0
 80022fa:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fe:	f7ff fac9 	bl	8001894 <HAL_GetTick>
 8002302:	0002      	movs	r2, r0
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b64      	cmp	r3, #100	; 0x64
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e174      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002310:	4b7a      	ldr	r3, [pc, #488]	; (80024fc <HAL_RCC_OscConfig+0x694>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	2380      	movs	r3, #128	; 0x80
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4013      	ands	r3, r2
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	429a      	cmp	r2, r3
 8002326:	d107      	bne.n	8002338 <HAL_RCC_OscConfig+0x4d0>
 8002328:	4b71      	ldr	r3, [pc, #452]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 800232a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800232c:	4b70      	ldr	r3, [pc, #448]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 800232e:	2180      	movs	r1, #128	; 0x80
 8002330:	0049      	lsls	r1, r1, #1
 8002332:	430a      	orrs	r2, r1
 8002334:	651a      	str	r2, [r3, #80]	; 0x50
 8002336:	e031      	b.n	800239c <HAL_RCC_OscConfig+0x534>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10c      	bne.n	800235a <HAL_RCC_OscConfig+0x4f2>
 8002340:	4b6b      	ldr	r3, [pc, #428]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002342:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002344:	4b6a      	ldr	r3, [pc, #424]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002346:	496c      	ldr	r1, [pc, #432]	; (80024f8 <HAL_RCC_OscConfig+0x690>)
 8002348:	400a      	ands	r2, r1
 800234a:	651a      	str	r2, [r3, #80]	; 0x50
 800234c:	4b68      	ldr	r3, [pc, #416]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 800234e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002350:	4b67      	ldr	r3, [pc, #412]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002352:	496b      	ldr	r1, [pc, #428]	; (8002500 <HAL_RCC_OscConfig+0x698>)
 8002354:	400a      	ands	r2, r1
 8002356:	651a      	str	r2, [r3, #80]	; 0x50
 8002358:	e020      	b.n	800239c <HAL_RCC_OscConfig+0x534>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	23a0      	movs	r3, #160	; 0xa0
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	429a      	cmp	r2, r3
 8002364:	d10e      	bne.n	8002384 <HAL_RCC_OscConfig+0x51c>
 8002366:	4b62      	ldr	r3, [pc, #392]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002368:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800236a:	4b61      	ldr	r3, [pc, #388]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 800236c:	2180      	movs	r1, #128	; 0x80
 800236e:	00c9      	lsls	r1, r1, #3
 8002370:	430a      	orrs	r2, r1
 8002372:	651a      	str	r2, [r3, #80]	; 0x50
 8002374:	4b5e      	ldr	r3, [pc, #376]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002376:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002378:	4b5d      	ldr	r3, [pc, #372]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 800237a:	2180      	movs	r1, #128	; 0x80
 800237c:	0049      	lsls	r1, r1, #1
 800237e:	430a      	orrs	r2, r1
 8002380:	651a      	str	r2, [r3, #80]	; 0x50
 8002382:	e00b      	b.n	800239c <HAL_RCC_OscConfig+0x534>
 8002384:	4b5a      	ldr	r3, [pc, #360]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002386:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002388:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 800238a:	495b      	ldr	r1, [pc, #364]	; (80024f8 <HAL_RCC_OscConfig+0x690>)
 800238c:	400a      	ands	r2, r1
 800238e:	651a      	str	r2, [r3, #80]	; 0x50
 8002390:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002392:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002394:	4b56      	ldr	r3, [pc, #344]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002396:	495a      	ldr	r1, [pc, #360]	; (8002500 <HAL_RCC_OscConfig+0x698>)
 8002398:	400a      	ands	r2, r1
 800239a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d015      	beq.n	80023d0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a4:	f7ff fa76 	bl	8001894 <HAL_GetTick>
 80023a8:	0003      	movs	r3, r0
 80023aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023ac:	e009      	b.n	80023c2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7ff fa71 	bl	8001894 <HAL_GetTick>
 80023b2:	0002      	movs	r2, r0
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	4a52      	ldr	r2, [pc, #328]	; (8002504 <HAL_RCC_OscConfig+0x69c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e11b      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023c2:	4b4b      	ldr	r3, [pc, #300]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 80023c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4013      	ands	r3, r2
 80023cc:	d0ef      	beq.n	80023ae <HAL_RCC_OscConfig+0x546>
 80023ce:	e014      	b.n	80023fa <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d0:	f7ff fa60 	bl	8001894 <HAL_GetTick>
 80023d4:	0003      	movs	r3, r0
 80023d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023d8:	e009      	b.n	80023ee <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7ff fa5b 	bl	8001894 <HAL_GetTick>
 80023de:	0002      	movs	r2, r0
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	4a47      	ldr	r2, [pc, #284]	; (8002504 <HAL_RCC_OscConfig+0x69c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e105      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023ee:	4b40      	ldr	r3, [pc, #256]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 80023f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023f2:	2380      	movs	r3, #128	; 0x80
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4013      	ands	r3, r2
 80023f8:	d1ef      	bne.n	80023da <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023fa:	2323      	movs	r3, #35	; 0x23
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d105      	bne.n	8002410 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002404:	4b3a      	ldr	r3, [pc, #232]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002408:	4b39      	ldr	r3, [pc, #228]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 800240a:	493f      	ldr	r1, [pc, #252]	; (8002508 <HAL_RCC_OscConfig+0x6a0>)
 800240c:	400a      	ands	r2, r1
 800240e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2220      	movs	r2, #32
 8002416:	4013      	ands	r3, r2
 8002418:	d049      	beq.n	80024ae <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d026      	beq.n	8002470 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002422:	4b33      	ldr	r3, [pc, #204]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	4b32      	ldr	r3, [pc, #200]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002428:	2101      	movs	r1, #1
 800242a:	430a      	orrs	r2, r1
 800242c:	609a      	str	r2, [r3, #8]
 800242e:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002432:	4b2f      	ldr	r3, [pc, #188]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002434:	2101      	movs	r1, #1
 8002436:	430a      	orrs	r2, r1
 8002438:	635a      	str	r2, [r3, #52]	; 0x34
 800243a:	4b34      	ldr	r3, [pc, #208]	; (800250c <HAL_RCC_OscConfig+0x6a4>)
 800243c:	6a1a      	ldr	r2, [r3, #32]
 800243e:	4b33      	ldr	r3, [pc, #204]	; (800250c <HAL_RCC_OscConfig+0x6a4>)
 8002440:	2180      	movs	r1, #128	; 0x80
 8002442:	0189      	lsls	r1, r1, #6
 8002444:	430a      	orrs	r2, r1
 8002446:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7ff fa24 	bl	8001894 <HAL_GetTick>
 800244c:	0003      	movs	r3, r0
 800244e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002452:	f7ff fa1f 	bl	8001894 <HAL_GetTick>
 8002456:	0002      	movs	r2, r0
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0ca      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002464:	4b22      	ldr	r3, [pc, #136]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2202      	movs	r2, #2
 800246a:	4013      	ands	r3, r2
 800246c:	d0f1      	beq.n	8002452 <HAL_RCC_OscConfig+0x5ea>
 800246e:	e01e      	b.n	80024ae <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002470:	4b1f      	ldr	r3, [pc, #124]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	4b1e      	ldr	r3, [pc, #120]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 8002476:	2101      	movs	r1, #1
 8002478:	438a      	bics	r2, r1
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_RCC_OscConfig+0x6a4>)
 800247e:	6a1a      	ldr	r2, [r3, #32]
 8002480:	4b22      	ldr	r3, [pc, #136]	; (800250c <HAL_RCC_OscConfig+0x6a4>)
 8002482:	4923      	ldr	r1, [pc, #140]	; (8002510 <HAL_RCC_OscConfig+0x6a8>)
 8002484:	400a      	ands	r2, r1
 8002486:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7ff fa04 	bl	8001894 <HAL_GetTick>
 800248c:	0003      	movs	r3, r0
 800248e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002492:	f7ff f9ff 	bl	8001894 <HAL_GetTick>
 8002496:	0002      	movs	r2, r0
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e0aa      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2202      	movs	r2, #2
 80024aa:	4013      	ands	r3, r2
 80024ac:	d1f1      	bne.n	8002492 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d100      	bne.n	80024b8 <HAL_RCC_OscConfig+0x650>
 80024b6:	e09f      	b.n	80025f8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	2b0c      	cmp	r3, #12
 80024bc:	d100      	bne.n	80024c0 <HAL_RCC_OscConfig+0x658>
 80024be:	e078      	b.n	80025b2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d159      	bne.n	800257c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c8:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <HAL_RCC_OscConfig+0x688>)
 80024ce:	4911      	ldr	r1, [pc, #68]	; (8002514 <HAL_RCC_OscConfig+0x6ac>)
 80024d0:	400a      	ands	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7ff f9de 	bl	8001894 <HAL_GetTick>
 80024d8:	0003      	movs	r3, r0
 80024da:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024dc:	e01c      	b.n	8002518 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024de:	f7ff f9d9 	bl	8001894 <HAL_GetTick>
 80024e2:	0002      	movs	r2, r0
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d915      	bls.n	8002518 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e084      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
 80024f0:	40021000 	.word	0x40021000
 80024f4:	ffff1fff 	.word	0xffff1fff
 80024f8:	fffffeff 	.word	0xfffffeff
 80024fc:	40007000 	.word	0x40007000
 8002500:	fffffbff 	.word	0xfffffbff
 8002504:	00001388 	.word	0x00001388
 8002508:	efffffff 	.word	0xefffffff
 800250c:	40010000 	.word	0x40010000
 8002510:	ffffdfff 	.word	0xffffdfff
 8002514:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002518:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <HAL_RCC_OscConfig+0x79c>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	049b      	lsls	r3, r3, #18
 8002520:	4013      	ands	r3, r2
 8002522:	d1dc      	bne.n	80024de <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002524:	4b37      	ldr	r3, [pc, #220]	; (8002604 <HAL_RCC_OscConfig+0x79c>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4a37      	ldr	r2, [pc, #220]	; (8002608 <HAL_RCC_OscConfig+0x7a0>)
 800252a:	4013      	ands	r3, r2
 800252c:	0019      	movs	r1, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253c:	431a      	orrs	r2, r3
 800253e:	4b31      	ldr	r3, [pc, #196]	; (8002604 <HAL_RCC_OscConfig+0x79c>)
 8002540:	430a      	orrs	r2, r1
 8002542:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002544:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <HAL_RCC_OscConfig+0x79c>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <HAL_RCC_OscConfig+0x79c>)
 800254a:	2180      	movs	r1, #128	; 0x80
 800254c:	0449      	lsls	r1, r1, #17
 800254e:	430a      	orrs	r2, r1
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7ff f99f 	bl	8001894 <HAL_GetTick>
 8002556:	0003      	movs	r3, r0
 8002558:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255c:	f7ff f99a 	bl	8001894 <HAL_GetTick>
 8002560:	0002      	movs	r2, r0
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e045      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800256e:	4b25      	ldr	r3, [pc, #148]	; (8002604 <HAL_RCC_OscConfig+0x79c>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	049b      	lsls	r3, r3, #18
 8002576:	4013      	ands	r3, r2
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0x6f4>
 800257a:	e03d      	b.n	80025f8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257c:	4b21      	ldr	r3, [pc, #132]	; (8002604 <HAL_RCC_OscConfig+0x79c>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b20      	ldr	r3, [pc, #128]	; (8002604 <HAL_RCC_OscConfig+0x79c>)
 8002582:	4922      	ldr	r1, [pc, #136]	; (800260c <HAL_RCC_OscConfig+0x7a4>)
 8002584:	400a      	ands	r2, r1
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7ff f984 	bl	8001894 <HAL_GetTick>
 800258c:	0003      	movs	r3, r0
 800258e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002592:	f7ff f97f 	bl	8001894 <HAL_GetTick>
 8002596:	0002      	movs	r2, r0
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e02a      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025a4:	4b17      	ldr	r3, [pc, #92]	; (8002604 <HAL_RCC_OscConfig+0x79c>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	049b      	lsls	r3, r3, #18
 80025ac:	4013      	ands	r3, r2
 80025ae:	d1f0      	bne.n	8002592 <HAL_RCC_OscConfig+0x72a>
 80025b0:	e022      	b.n	80025f8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e01d      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_RCC_OscConfig+0x79c>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	025b      	lsls	r3, r3, #9
 80025ca:	401a      	ands	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d10f      	bne.n	80025f4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	23f0      	movs	r3, #240	; 0xf0
 80025d8:	039b      	lsls	r3, r3, #14
 80025da:	401a      	ands	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d107      	bne.n	80025f4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	23c0      	movs	r3, #192	; 0xc0
 80025e8:	041b      	lsls	r3, r3, #16
 80025ea:	401a      	ands	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	0018      	movs	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b00a      	add	sp, #40	; 0x28
 8002600:	bdb0      	pop	{r4, r5, r7, pc}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	40021000 	.word	0x40021000
 8002608:	ff02ffff 	.word	0xff02ffff
 800260c:	feffffff 	.word	0xfeffffff

08002610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002610:	b5b0      	push	{r4, r5, r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e128      	b.n	8002876 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002624:	4b96      	ldr	r3, [pc, #600]	; (8002880 <HAL_RCC_ClockConfig+0x270>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2201      	movs	r2, #1
 800262a:	4013      	ands	r3, r2
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d91e      	bls.n	8002670 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	4b93      	ldr	r3, [pc, #588]	; (8002880 <HAL_RCC_ClockConfig+0x270>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2201      	movs	r2, #1
 8002638:	4393      	bics	r3, r2
 800263a:	0019      	movs	r1, r3
 800263c:	4b90      	ldr	r3, [pc, #576]	; (8002880 <HAL_RCC_ClockConfig+0x270>)
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002644:	f7ff f926 	bl	8001894 <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264c:	e009      	b.n	8002662 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264e:	f7ff f921 	bl	8001894 <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	4a8a      	ldr	r2, [pc, #552]	; (8002884 <HAL_RCC_ClockConfig+0x274>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e109      	b.n	8002876 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002662:	4b87      	ldr	r3, [pc, #540]	; (8002880 <HAL_RCC_ClockConfig+0x270>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2201      	movs	r2, #1
 8002668:	4013      	ands	r3, r2
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d1ee      	bne.n	800264e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2202      	movs	r2, #2
 8002676:	4013      	ands	r3, r2
 8002678:	d009      	beq.n	800268e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800267a:	4b83      	ldr	r3, [pc, #524]	; (8002888 <HAL_RCC_ClockConfig+0x278>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	22f0      	movs	r2, #240	; 0xf0
 8002680:	4393      	bics	r3, r2
 8002682:	0019      	movs	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	4b7f      	ldr	r3, [pc, #508]	; (8002888 <HAL_RCC_ClockConfig+0x278>)
 800268a:	430a      	orrs	r2, r1
 800268c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2201      	movs	r2, #1
 8002694:	4013      	ands	r3, r2
 8002696:	d100      	bne.n	800269a <HAL_RCC_ClockConfig+0x8a>
 8002698:	e089      	b.n	80027ae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026a2:	4b79      	ldr	r3, [pc, #484]	; (8002888 <HAL_RCC_ClockConfig+0x278>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	029b      	lsls	r3, r3, #10
 80026aa:	4013      	ands	r3, r2
 80026ac:	d120      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e0e1      	b.n	8002876 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d107      	bne.n	80026ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026ba:	4b73      	ldr	r3, [pc, #460]	; (8002888 <HAL_RCC_ClockConfig+0x278>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	049b      	lsls	r3, r3, #18
 80026c2:	4013      	ands	r3, r2
 80026c4:	d114      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e0d5      	b.n	8002876 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d106      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026d2:	4b6d      	ldr	r3, [pc, #436]	; (8002888 <HAL_RCC_ClockConfig+0x278>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2204      	movs	r2, #4
 80026d8:	4013      	ands	r3, r2
 80026da:	d109      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0ca      	b.n	8002876 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026e0:	4b69      	ldr	r3, [pc, #420]	; (8002888 <HAL_RCC_ClockConfig+0x278>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4013      	ands	r3, r2
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0c2      	b.n	8002876 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026f0:	4b65      	ldr	r3, [pc, #404]	; (8002888 <HAL_RCC_ClockConfig+0x278>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2203      	movs	r2, #3
 80026f6:	4393      	bics	r3, r2
 80026f8:	0019      	movs	r1, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	4b62      	ldr	r3, [pc, #392]	; (8002888 <HAL_RCC_ClockConfig+0x278>)
 8002700:	430a      	orrs	r2, r1
 8002702:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002704:	f7ff f8c6 	bl	8001894 <HAL_GetTick>
 8002708:	0003      	movs	r3, r0
 800270a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d111      	bne.n	8002738 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002714:	e009      	b.n	800272a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002716:	f7ff f8bd 	bl	8001894 <HAL_GetTick>
 800271a:	0002      	movs	r2, r0
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	4a58      	ldr	r2, [pc, #352]	; (8002884 <HAL_RCC_ClockConfig+0x274>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e0a5      	b.n	8002876 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800272a:	4b57      	ldr	r3, [pc, #348]	; (8002888 <HAL_RCC_ClockConfig+0x278>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	220c      	movs	r2, #12
 8002730:	4013      	ands	r3, r2
 8002732:	2b08      	cmp	r3, #8
 8002734:	d1ef      	bne.n	8002716 <HAL_RCC_ClockConfig+0x106>
 8002736:	e03a      	b.n	80027ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d111      	bne.n	8002764 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002740:	e009      	b.n	8002756 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002742:	f7ff f8a7 	bl	8001894 <HAL_GetTick>
 8002746:	0002      	movs	r2, r0
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	4a4d      	ldr	r2, [pc, #308]	; (8002884 <HAL_RCC_ClockConfig+0x274>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e08f      	b.n	8002876 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002756:	4b4c      	ldr	r3, [pc, #304]	; (8002888 <HAL_RCC_ClockConfig+0x278>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	220c      	movs	r2, #12
 800275c:	4013      	ands	r3, r2
 800275e:	2b0c      	cmp	r3, #12
 8002760:	d1ef      	bne.n	8002742 <HAL_RCC_ClockConfig+0x132>
 8002762:	e024      	b.n	80027ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d11b      	bne.n	80027a4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800276c:	e009      	b.n	8002782 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276e:	f7ff f891 	bl	8001894 <HAL_GetTick>
 8002772:	0002      	movs	r2, r0
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	4a42      	ldr	r2, [pc, #264]	; (8002884 <HAL_RCC_ClockConfig+0x274>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e079      	b.n	8002876 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002782:	4b41      	ldr	r3, [pc, #260]	; (8002888 <HAL_RCC_ClockConfig+0x278>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	220c      	movs	r2, #12
 8002788:	4013      	ands	r3, r2
 800278a:	2b04      	cmp	r3, #4
 800278c:	d1ef      	bne.n	800276e <HAL_RCC_ClockConfig+0x15e>
 800278e:	e00e      	b.n	80027ae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002790:	f7ff f880 	bl	8001894 <HAL_GetTick>
 8002794:	0002      	movs	r2, r0
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	4a3a      	ldr	r2, [pc, #232]	; (8002884 <HAL_RCC_ClockConfig+0x274>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e068      	b.n	8002876 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80027a4:	4b38      	ldr	r3, [pc, #224]	; (8002888 <HAL_RCC_ClockConfig+0x278>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	220c      	movs	r2, #12
 80027aa:	4013      	ands	r3, r2
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027ae:	4b34      	ldr	r3, [pc, #208]	; (8002880 <HAL_RCC_ClockConfig+0x270>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2201      	movs	r2, #1
 80027b4:	4013      	ands	r3, r2
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d21e      	bcs.n	80027fa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027bc:	4b30      	ldr	r3, [pc, #192]	; (8002880 <HAL_RCC_ClockConfig+0x270>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2201      	movs	r2, #1
 80027c2:	4393      	bics	r3, r2
 80027c4:	0019      	movs	r1, r3
 80027c6:	4b2e      	ldr	r3, [pc, #184]	; (8002880 <HAL_RCC_ClockConfig+0x270>)
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027ce:	f7ff f861 	bl	8001894 <HAL_GetTick>
 80027d2:	0003      	movs	r3, r0
 80027d4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d6:	e009      	b.n	80027ec <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d8:	f7ff f85c 	bl	8001894 <HAL_GetTick>
 80027dc:	0002      	movs	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	4a28      	ldr	r2, [pc, #160]	; (8002884 <HAL_RCC_ClockConfig+0x274>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e044      	b.n	8002876 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ec:	4b24      	ldr	r3, [pc, #144]	; (8002880 <HAL_RCC_ClockConfig+0x270>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2201      	movs	r2, #1
 80027f2:	4013      	ands	r3, r2
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d1ee      	bne.n	80027d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2204      	movs	r2, #4
 8002800:	4013      	ands	r3, r2
 8002802:	d009      	beq.n	8002818 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002804:	4b20      	ldr	r3, [pc, #128]	; (8002888 <HAL_RCC_ClockConfig+0x278>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4a20      	ldr	r2, [pc, #128]	; (800288c <HAL_RCC_ClockConfig+0x27c>)
 800280a:	4013      	ands	r3, r2
 800280c:	0019      	movs	r1, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_RCC_ClockConfig+0x278>)
 8002814:	430a      	orrs	r2, r1
 8002816:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2208      	movs	r2, #8
 800281e:	4013      	ands	r3, r2
 8002820:	d00a      	beq.n	8002838 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002822:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_RCC_ClockConfig+0x278>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	4a1a      	ldr	r2, [pc, #104]	; (8002890 <HAL_RCC_ClockConfig+0x280>)
 8002828:	4013      	ands	r3, r2
 800282a:	0019      	movs	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	00da      	lsls	r2, r3, #3
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <HAL_RCC_ClockConfig+0x278>)
 8002834:	430a      	orrs	r2, r1
 8002836:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002838:	f000 f832 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 800283c:	0001      	movs	r1, r0
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_RCC_ClockConfig+0x278>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	220f      	movs	r2, #15
 8002846:	4013      	ands	r3, r2
 8002848:	4a12      	ldr	r2, [pc, #72]	; (8002894 <HAL_RCC_ClockConfig+0x284>)
 800284a:	5cd3      	ldrb	r3, [r2, r3]
 800284c:	000a      	movs	r2, r1
 800284e:	40da      	lsrs	r2, r3
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_RCC_ClockConfig+0x288>)
 8002852:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <HAL_RCC_ClockConfig+0x28c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	250b      	movs	r5, #11
 800285a:	197c      	adds	r4, r7, r5
 800285c:	0018      	movs	r0, r3
 800285e:	f7fe ffd3 	bl	8001808 <HAL_InitTick>
 8002862:	0003      	movs	r3, r0
 8002864:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002866:	197b      	adds	r3, r7, r5
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800286e:	197b      	adds	r3, r7, r5
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	e000      	b.n	8002876 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	0018      	movs	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	b004      	add	sp, #16
 800287c:	bdb0      	pop	{r4, r5, r7, pc}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	40022000 	.word	0x40022000
 8002884:	00001388 	.word	0x00001388
 8002888:	40021000 	.word	0x40021000
 800288c:	fffff8ff 	.word	0xfffff8ff
 8002890:	ffffc7ff 	.word	0xffffc7ff
 8002894:	080057f4 	.word	0x080057f4
 8002898:	2000001c 	.word	0x2000001c
 800289c:	20000020 	.word	0x20000020

080028a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a0:	b5b0      	push	{r4, r5, r7, lr}
 80028a2:	b08e      	sub	sp, #56	; 0x38
 80028a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80028a6:	4b4c      	ldr	r3, [pc, #304]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ae:	230c      	movs	r3, #12
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b0c      	cmp	r3, #12
 80028b4:	d014      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x40>
 80028b6:	d900      	bls.n	80028ba <HAL_RCC_GetSysClockFreq+0x1a>
 80028b8:	e07b      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x112>
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d002      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x24>
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d00b      	beq.n	80028da <HAL_RCC_GetSysClockFreq+0x3a>
 80028c2:	e076      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028c4:	4b44      	ldr	r3, [pc, #272]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2210      	movs	r2, #16
 80028ca:	4013      	ands	r3, r2
 80028cc:	d002      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80028ce:	4b43      	ldr	r3, [pc, #268]	; (80029dc <HAL_RCC_GetSysClockFreq+0x13c>)
 80028d0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80028d2:	e07c      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80028d4:	4b42      	ldr	r3, [pc, #264]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x140>)
 80028d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028d8:	e079      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028da:	4b42      	ldr	r3, [pc, #264]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x144>)
 80028dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028de:	e076      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80028e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e2:	0c9a      	lsrs	r2, r3, #18
 80028e4:	230f      	movs	r3, #15
 80028e6:	401a      	ands	r2, r3
 80028e8:	4b3f      	ldr	r3, [pc, #252]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x148>)
 80028ea:	5c9b      	ldrb	r3, [r3, r2]
 80028ec:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	0d9a      	lsrs	r2, r3, #22
 80028f2:	2303      	movs	r3, #3
 80028f4:	4013      	ands	r3, r2
 80028f6:	3301      	adds	r3, #1
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028fa:	4b37      	ldr	r3, [pc, #220]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	025b      	lsls	r3, r3, #9
 8002902:	4013      	ands	r3, r2
 8002904:	d01a      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	4a35      	ldr	r2, [pc, #212]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002910:	2300      	movs	r3, #0
 8002912:	69b8      	ldr	r0, [r7, #24]
 8002914:	69f9      	ldr	r1, [r7, #28]
 8002916:	f7fd fcad 	bl	8000274 <__aeabi_lmul>
 800291a:	0002      	movs	r2, r0
 800291c:	000b      	movs	r3, r1
 800291e:	0010      	movs	r0, r2
 8002920:	0019      	movs	r1, r3
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f7fd fc81 	bl	8000234 <__aeabi_uldivmod>
 8002932:	0002      	movs	r2, r0
 8002934:	000b      	movs	r3, r1
 8002936:	0013      	movs	r3, r2
 8002938:	637b      	str	r3, [r7, #52]	; 0x34
 800293a:	e037      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800293c:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x138>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2210      	movs	r2, #16
 8002942:	4013      	ands	r3, r2
 8002944:	d01a      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	4a23      	ldr	r2, [pc, #140]	; (80029dc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002950:	2300      	movs	r3, #0
 8002952:	68b8      	ldr	r0, [r7, #8]
 8002954:	68f9      	ldr	r1, [r7, #12]
 8002956:	f7fd fc8d 	bl	8000274 <__aeabi_lmul>
 800295a:	0002      	movs	r2, r0
 800295c:	000b      	movs	r3, r1
 800295e:	0010      	movs	r0, r2
 8002960:	0019      	movs	r1, r3
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f7fd fc61 	bl	8000234 <__aeabi_uldivmod>
 8002972:	0002      	movs	r2, r0
 8002974:	000b      	movs	r3, r1
 8002976:	0013      	movs	r3, r2
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
 800297a:	e017      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	0018      	movs	r0, r3
 8002980:	2300      	movs	r3, #0
 8002982:	0019      	movs	r1, r3
 8002984:	4a16      	ldr	r2, [pc, #88]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002986:	2300      	movs	r3, #0
 8002988:	f7fd fc74 	bl	8000274 <__aeabi_lmul>
 800298c:	0002      	movs	r2, r0
 800298e:	000b      	movs	r3, r1
 8002990:	0010      	movs	r0, r2
 8002992:	0019      	movs	r1, r3
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	001c      	movs	r4, r3
 8002998:	2300      	movs	r3, #0
 800299a:	001d      	movs	r5, r3
 800299c:	0022      	movs	r2, r4
 800299e:	002b      	movs	r3, r5
 80029a0:	f7fd fc48 	bl	8000234 <__aeabi_uldivmod>
 80029a4:	0002      	movs	r2, r0
 80029a6:	000b      	movs	r3, r1
 80029a8:	0013      	movs	r3, r2
 80029aa:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80029ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029b0:	e00d      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	0b5b      	lsrs	r3, r3, #13
 80029b8:	2207      	movs	r2, #7
 80029ba:	4013      	ands	r3, r2
 80029bc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	3301      	adds	r3, #1
 80029c2:	2280      	movs	r2, #128	; 0x80
 80029c4:	0212      	lsls	r2, r2, #8
 80029c6:	409a      	lsls	r2, r3
 80029c8:	0013      	movs	r3, r2
 80029ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029cc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b00e      	add	sp, #56	; 0x38
 80029d6:	bdb0      	pop	{r4, r5, r7, pc}
 80029d8:	40021000 	.word	0x40021000
 80029dc:	003d0900 	.word	0x003d0900
 80029e0:	00f42400 	.word	0x00f42400
 80029e4:	007a1200 	.word	0x007a1200
 80029e8:	0800580c 	.word	0x0800580c

080029ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f0:	4b02      	ldr	r3, [pc, #8]	; (80029fc <HAL_RCC_GetHCLKFreq+0x10>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	0018      	movs	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	2000001c 	.word	0x2000001c

08002a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a04:	f7ff fff2 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a08:	0001      	movs	r1, r0
 8002a0a:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	0a1b      	lsrs	r3, r3, #8
 8002a10:	2207      	movs	r2, #7
 8002a12:	4013      	ands	r3, r2
 8002a14:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a16:	5cd3      	ldrb	r3, [r2, r3]
 8002a18:	40d9      	lsrs	r1, r3
 8002a1a:	000b      	movs	r3, r1
}
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	40021000 	.word	0x40021000
 8002a28:	08005804 	.word	0x08005804

08002a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a30:	f7ff ffdc 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a34:	0001      	movs	r1, r0
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	0adb      	lsrs	r3, r3, #11
 8002a3c:	2207      	movs	r2, #7
 8002a3e:	4013      	ands	r3, r2
 8002a40:	4a04      	ldr	r2, [pc, #16]	; (8002a54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a42:	5cd3      	ldrb	r3, [r2, r3]
 8002a44:	40d9      	lsrs	r1, r3
 8002a46:	000b      	movs	r3, r1
}
 8002a48:	0018      	movs	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	40021000 	.word	0x40021000
 8002a54:	08005804 	.word	0x08005804

08002a58 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002a60:	2317      	movs	r3, #23
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d106      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d100      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002a7e:	e0d9      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a80:	4ba4      	ldr	r3, [pc, #656]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	055b      	lsls	r3, r3, #21
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d10a      	bne.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8c:	4ba1      	ldr	r3, [pc, #644]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a90:	4ba0      	ldr	r3, [pc, #640]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a92:	2180      	movs	r1, #128	; 0x80
 8002a94:	0549      	lsls	r1, r1, #21
 8002a96:	430a      	orrs	r2, r1
 8002a98:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002a9a:	2317      	movs	r3, #23
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b9d      	ldr	r3, [pc, #628]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d11a      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aae:	4b9a      	ldr	r3, [pc, #616]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4b99      	ldr	r3, [pc, #612]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002ab4:	2180      	movs	r1, #128	; 0x80
 8002ab6:	0049      	lsls	r1, r1, #1
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002abc:	f7fe feea 	bl	8001894 <HAL_GetTick>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac6:	f7fe fee5 	bl	8001894 <HAL_GetTick>
 8002aca:	0002      	movs	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b64      	cmp	r3, #100	; 0x64
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e118      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad8:	4b8f      	ldr	r3, [pc, #572]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002ae4:	4b8b      	ldr	r3, [pc, #556]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	23c0      	movs	r3, #192	; 0xc0
 8002aea:	039b      	lsls	r3, r3, #14
 8002aec:	4013      	ands	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	23c0      	movs	r3, #192	; 0xc0
 8002af6:	039b      	lsls	r3, r3, #14
 8002af8:	4013      	ands	r3, r2
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d107      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	23c0      	movs	r3, #192	; 0xc0
 8002b06:	039b      	lsls	r3, r3, #14
 8002b08:	4013      	ands	r3, r2
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d013      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	23c0      	movs	r3, #192	; 0xc0
 8002b16:	029b      	lsls	r3, r3, #10
 8002b18:	401a      	ands	r2, r3
 8002b1a:	23c0      	movs	r3, #192	; 0xc0
 8002b1c:	029b      	lsls	r3, r3, #10
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d10a      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b22:	4b7c      	ldr	r3, [pc, #496]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	2380      	movs	r3, #128	; 0x80
 8002b28:	029b      	lsls	r3, r3, #10
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	029b      	lsls	r3, r3, #10
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d101      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0e8      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002b38:	4b76      	ldr	r3, [pc, #472]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b3c:	23c0      	movs	r3, #192	; 0xc0
 8002b3e:	029b      	lsls	r3, r3, #10
 8002b40:	4013      	ands	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d049      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	23c0      	movs	r3, #192	; 0xc0
 8002b50:	029b      	lsls	r3, r3, #10
 8002b52:	4013      	ands	r3, r2
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d004      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	4013      	ands	r3, r2
 8002b62:	d10d      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	23c0      	movs	r3, #192	; 0xc0
 8002b6a:	029b      	lsls	r3, r3, #10
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d034      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d02e      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002b80:	4b64      	ldr	r3, [pc, #400]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b84:	4a65      	ldr	r2, [pc, #404]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b8a:	4b62      	ldr	r3, [pc, #392]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b8e:	4b61      	ldr	r3, [pc, #388]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b90:	2180      	movs	r1, #128	; 0x80
 8002b92:	0309      	lsls	r1, r1, #12
 8002b94:	430a      	orrs	r2, r1
 8002b96:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b98:	4b5e      	ldr	r3, [pc, #376]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b9c:	4b5d      	ldr	r3, [pc, #372]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b9e:	4960      	ldr	r1, [pc, #384]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002ba0:	400a      	ands	r2, r1
 8002ba2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002ba4:	4b5b      	ldr	r3, [pc, #364]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d014      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fe6e 	bl	8001894 <HAL_GetTick>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bbc:	e009      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bbe:	f7fe fe69 	bl	8001894 <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	4a56      	ldr	r2, [pc, #344]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e09b      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bd2:	4b50      	ldr	r3, [pc, #320]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002bd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d0ef      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	23c0      	movs	r3, #192	; 0xc0
 8002be4:	029b      	lsls	r3, r3, #10
 8002be6:	401a      	ands	r2, r3
 8002be8:	23c0      	movs	r3, #192	; 0xc0
 8002bea:	029b      	lsls	r3, r3, #10
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d10c      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002bf0:	4b48      	ldr	r3, [pc, #288]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a4c      	ldr	r2, [pc, #304]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	23c0      	movs	r3, #192	; 0xc0
 8002c00:	039b      	lsls	r3, r3, #14
 8002c02:	401a      	ands	r2, r3
 8002c04:	4b43      	ldr	r3, [pc, #268]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002c06:	430a      	orrs	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	4b42      	ldr	r3, [pc, #264]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002c0c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	23c0      	movs	r3, #192	; 0xc0
 8002c14:	029b      	lsls	r3, r3, #10
 8002c16:	401a      	ands	r2, r3
 8002c18:	4b3e      	ldr	r3, [pc, #248]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c1e:	2317      	movs	r3, #23
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d105      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c28:	4b3a      	ldr	r3, [pc, #232]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c2c:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002c2e:	493f      	ldr	r1, [pc, #252]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c30:	400a      	ands	r2, r1
 8002c32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d009      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c3e:	4b35      	ldr	r3, [pc, #212]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c42:	2203      	movs	r2, #3
 8002c44:	4393      	bics	r3, r2
 8002c46:	0019      	movs	r1, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	4b31      	ldr	r3, [pc, #196]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2202      	movs	r2, #2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d009      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c5c:	4b2d      	ldr	r3, [pc, #180]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c60:	220c      	movs	r2, #12
 8002c62:	4393      	bics	r3, r2
 8002c64:	0019      	movs	r1, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	4b2a      	ldr	r3, [pc, #168]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2204      	movs	r2, #4
 8002c76:	4013      	ands	r3, r2
 8002c78:	d009      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c7a:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7e:	4a2c      	ldr	r2, [pc, #176]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	0019      	movs	r1, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	695a      	ldr	r2, [r3, #20]
 8002c88:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2208      	movs	r2, #8
 8002c94:	4013      	ands	r3, r2
 8002c96:	d009      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c98:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9c:	4a25      	ldr	r2, [pc, #148]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	0019      	movs	r1, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699a      	ldr	r2, [r3, #24]
 8002ca6:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d009      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cb8:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cbc:	4a17      	ldr	r2, [pc, #92]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	0019      	movs	r1, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69da      	ldr	r2, [r3, #28]
 8002cc6:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2240      	movs	r2, #64	; 0x40
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d009      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cd6:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cda:	4a17      	ldr	r2, [pc, #92]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	0019      	movs	r1, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d009      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002cf4:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf8:	4a10      	ldr	r2, [pc, #64]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	0019      	movs	r1, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1a      	ldr	r2, [r3, #32]
 8002d02:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002d04:	430a      	orrs	r2, r1
 8002d06:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b006      	add	sp, #24
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40007000 	.word	0x40007000
 8002d1c:	fffcffff 	.word	0xfffcffff
 8002d20:	fff7ffff 	.word	0xfff7ffff
 8002d24:	00001388 	.word	0x00001388
 8002d28:	ffcfffff 	.word	0xffcfffff
 8002d2c:	efffffff 	.word	0xefffffff
 8002d30:	fffff3ff 	.word	0xfffff3ff
 8002d34:	ffffcfff 	.word	0xffffcfff
 8002d38:	fbffffff 	.word	0xfbffffff
 8002d3c:	fff3ffff 	.word	0xfff3ffff

08002d40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e083      	b.n	8002e5a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	2382      	movs	r3, #130	; 0x82
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d009      	beq.n	8002d7a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	61da      	str	r2, [r3, #28]
 8002d6c:	e005      	b.n	8002d7a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2251      	movs	r2, #81	; 0x51
 8002d84:	5c9b      	ldrb	r3, [r3, r2]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d107      	bne.n	8002d9c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2250      	movs	r2, #80	; 0x50
 8002d90:	2100      	movs	r1, #0
 8002d92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	0018      	movs	r0, r3
 8002d98:	f7fe fbbe 	bl	8001518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2251      	movs	r2, #81	; 0x51
 8002da0:	2102      	movs	r1, #2
 8002da2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2140      	movs	r1, #64	; 0x40
 8002db0:	438a      	bics	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	2382      	movs	r3, #130	; 0x82
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	401a      	ands	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6899      	ldr	r1, [r3, #8]
 8002dc2:	2384      	movs	r3, #132	; 0x84
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	400b      	ands	r3, r1
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68d9      	ldr	r1, [r3, #12]
 8002dce:	2380      	movs	r3, #128	; 0x80
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	400b      	ands	r3, r1
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2102      	movs	r1, #2
 8002ddc:	400b      	ands	r3, r1
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	2101      	movs	r1, #1
 8002de6:	400b      	ands	r3, r1
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6999      	ldr	r1, [r3, #24]
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	400b      	ands	r3, r1
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	2138      	movs	r1, #56	; 0x38
 8002dfc:	400b      	ands	r3, r1
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	2180      	movs	r1, #128	; 0x80
 8002e06:	400b      	ands	r3, r1
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	0011      	movs	r1, r2
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	019b      	lsls	r3, r3, #6
 8002e14:	401a      	ands	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	0c1b      	lsrs	r3, r3, #16
 8002e24:	2204      	movs	r2, #4
 8002e26:	4013      	ands	r3, r2
 8002e28:	0019      	movs	r1, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	2210      	movs	r2, #16
 8002e30:	401a      	ands	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69da      	ldr	r2, [r3, #28]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4907      	ldr	r1, [pc, #28]	; (8002e64 <HAL_SPI_Init+0x124>)
 8002e46:	400a      	ands	r2, r1
 8002e48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2251      	movs	r2, #81	; 0x51
 8002e54:	2101      	movs	r1, #1
 8002e56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b002      	add	sp, #8
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	fffff7ff 	.word	0xfffff7ff

08002e68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	1dbb      	adds	r3, r7, #6
 8002e76:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e78:	231f      	movs	r3, #31
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2250      	movs	r2, #80	; 0x50
 8002e84:	5c9b      	ldrb	r3, [r3, r2]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_SPI_Transmit+0x26>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e13e      	b.n	800310c <HAL_SPI_Transmit+0x2a4>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2250      	movs	r2, #80	; 0x50
 8002e92:	2101      	movs	r1, #1
 8002e94:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e96:	f7fe fcfd 	bl	8001894 <HAL_GetTick>
 8002e9a:	0003      	movs	r3, r0
 8002e9c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002e9e:	2316      	movs	r3, #22
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	1dba      	adds	r2, r7, #6
 8002ea4:	8812      	ldrh	r2, [r2, #0]
 8002ea6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2251      	movs	r2, #81	; 0x51
 8002eac:	5c9b      	ldrb	r3, [r3, r2]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d004      	beq.n	8002ebe <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002eb4:	231f      	movs	r3, #31
 8002eb6:	18fb      	adds	r3, r7, r3
 8002eb8:	2202      	movs	r2, #2
 8002eba:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ebc:	e11b      	b.n	80030f6 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_SPI_Transmit+0x64>
 8002ec4:	1dbb      	adds	r3, r7, #6
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d104      	bne.n	8002ed6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002ecc:	231f      	movs	r3, #31
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ed4:	e10f      	b.n	80030f6 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2251      	movs	r2, #81	; 0x51
 8002eda:	2103      	movs	r1, #3
 8002edc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1dba      	adds	r2, r7, #6
 8002eee:	8812      	ldrh	r2, [r2, #0]
 8002ef0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1dba      	adds	r2, r7, #6
 8002ef6:	8812      	ldrh	r2, [r2, #0]
 8002ef8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	021b      	lsls	r3, r3, #8
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d110      	bne.n	8002f46 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2140      	movs	r1, #64	; 0x40
 8002f30:	438a      	bics	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2180      	movs	r1, #128	; 0x80
 8002f40:	01c9      	lsls	r1, r1, #7
 8002f42:	430a      	orrs	r2, r1
 8002f44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2240      	movs	r2, #64	; 0x40
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b40      	cmp	r3, #64	; 0x40
 8002f52:	d007      	beq.n	8002f64 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2140      	movs	r1, #64	; 0x40
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d14e      	bne.n	800300e <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d004      	beq.n	8002f82 <HAL_SPI_Transmit+0x11a>
 8002f78:	2316      	movs	r3, #22
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d13f      	bne.n	8003002 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	881a      	ldrh	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	1c9a      	adds	r2, r3, #2
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fa6:	e02c      	b.n	8003002 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d112      	bne.n	8002fdc <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	881a      	ldrh	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	1c9a      	adds	r2, r3, #2
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fda:	e012      	b.n	8003002 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fdc:	f7fe fc5a 	bl	8001894 <HAL_GetTick>
 8002fe0:	0002      	movs	r2, r0
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d802      	bhi.n	8002ff2 <HAL_SPI_Transmit+0x18a>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	d102      	bne.n	8002ff8 <HAL_SPI_Transmit+0x190>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d104      	bne.n	8003002 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8002ff8:	231f      	movs	r3, #31
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	701a      	strb	r2, [r3, #0]
          goto error;
 8003000:	e079      	b.n	80030f6 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1cd      	bne.n	8002fa8 <HAL_SPI_Transmit+0x140>
 800300c:	e04f      	b.n	80030ae <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d004      	beq.n	8003020 <HAL_SPI_Transmit+0x1b8>
 8003016:	2316      	movs	r3, #22
 8003018:	18fb      	adds	r3, r7, r3
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d141      	bne.n	80030a4 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	330c      	adds	r3, #12
 800302a:	7812      	ldrb	r2, [r2, #0]
 800302c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003046:	e02d      	b.n	80030a4 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2202      	movs	r2, #2
 8003050:	4013      	ands	r3, r2
 8003052:	2b02      	cmp	r3, #2
 8003054:	d113      	bne.n	800307e <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	330c      	adds	r3, #12
 8003060:	7812      	ldrb	r2, [r2, #0]
 8003062:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	86da      	strh	r2, [r3, #54]	; 0x36
 800307c:	e012      	b.n	80030a4 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800307e:	f7fe fc09 	bl	8001894 <HAL_GetTick>
 8003082:	0002      	movs	r2, r0
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d802      	bhi.n	8003094 <HAL_SPI_Transmit+0x22c>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	3301      	adds	r3, #1
 8003092:	d102      	bne.n	800309a <HAL_SPI_Transmit+0x232>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d104      	bne.n	80030a4 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 800309a:	231f      	movs	r3, #31
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	2203      	movs	r2, #3
 80030a0:	701a      	strb	r2, [r3, #0]
          goto error;
 80030a2:	e028      	b.n	80030f6 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1cc      	bne.n	8003048 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	6839      	ldr	r1, [r7, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	0018      	movs	r0, r3
 80030b6:	f000 fc07 	bl	80038c8 <SPI_EndRxTxTransaction>
 80030ba:	1e03      	subs	r3, r0, #0
 80030bc:	d002      	beq.n	80030c4 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2220      	movs	r2, #32
 80030c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10a      	bne.n	80030e2 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030cc:	2300      	movs	r3, #0
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d004      	beq.n	80030f4 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 80030ea:	231f      	movs	r3, #31
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	e000      	b.n	80030f6 <HAL_SPI_Transmit+0x28e>
  }

error:
 80030f4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2251      	movs	r2, #81	; 0x51
 80030fa:	2101      	movs	r1, #1
 80030fc:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2250      	movs	r2, #80	; 0x50
 8003102:	2100      	movs	r1, #0
 8003104:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003106:	231f      	movs	r3, #31
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	781b      	ldrb	r3, [r3, #0]
}
 800310c:	0018      	movs	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	b008      	add	sp, #32
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003114:	b590      	push	{r4, r7, lr}
 8003116:	b089      	sub	sp, #36	; 0x24
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	1dbb      	adds	r3, r7, #6
 8003122:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003124:	2317      	movs	r3, #23
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	2200      	movs	r2, #0
 800312a:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	2382      	movs	r3, #130	; 0x82
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	429a      	cmp	r2, r3
 8003136:	d113      	bne.n	8003160 <HAL_SPI_Receive+0x4c>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10f      	bne.n	8003160 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2251      	movs	r2, #81	; 0x51
 8003144:	2104      	movs	r1, #4
 8003146:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003148:	1dbb      	adds	r3, r7, #6
 800314a:	881c      	ldrh	r4, [r3, #0]
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	0023      	movs	r3, r4
 8003158:	f000 f902 	bl	8003360 <HAL_SPI_TransmitReceive>
 800315c:	0003      	movs	r3, r0
 800315e:	e0f9      	b.n	8003354 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2250      	movs	r2, #80	; 0x50
 8003164:	5c9b      	ldrb	r3, [r3, r2]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_SPI_Receive+0x5a>
 800316a:	2302      	movs	r3, #2
 800316c:	e0f2      	b.n	8003354 <HAL_SPI_Receive+0x240>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2250      	movs	r2, #80	; 0x50
 8003172:	2101      	movs	r1, #1
 8003174:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003176:	f7fe fb8d 	bl	8001894 <HAL_GetTick>
 800317a:	0003      	movs	r3, r0
 800317c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2251      	movs	r2, #81	; 0x51
 8003182:	5c9b      	ldrb	r3, [r3, r2]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b01      	cmp	r3, #1
 8003188:	d004      	beq.n	8003194 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800318a:	2317      	movs	r3, #23
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	2202      	movs	r2, #2
 8003190:	701a      	strb	r2, [r3, #0]
    goto error;
 8003192:	e0d4      	b.n	800333e <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_SPI_Receive+0x8e>
 800319a:	1dbb      	adds	r3, r7, #6
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d104      	bne.n	80031ac <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80031a2:	2317      	movs	r3, #23
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	2201      	movs	r2, #1
 80031a8:	701a      	strb	r2, [r3, #0]
    goto error;
 80031aa:	e0c8      	b.n	800333e <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2251      	movs	r2, #81	; 0x51
 80031b0:	2104      	movs	r1, #4
 80031b2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1dba      	adds	r2, r7, #6
 80031c4:	8812      	ldrh	r2, [r2, #0]
 80031c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1dba      	adds	r2, r7, #6
 80031cc:	8812      	ldrh	r2, [r2, #0]
 80031ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	021b      	lsls	r3, r3, #8
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d10f      	bne.n	800321a <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2140      	movs	r1, #64	; 0x40
 8003206:	438a      	bics	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4951      	ldr	r1, [pc, #324]	; (800335c <HAL_SPI_Receive+0x248>)
 8003216:	400a      	ands	r2, r1
 8003218:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2240      	movs	r2, #64	; 0x40
 8003222:	4013      	ands	r3, r2
 8003224:	2b40      	cmp	r3, #64	; 0x40
 8003226:	d007      	beq.n	8003238 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2140      	movs	r1, #64	; 0x40
 8003234:	430a      	orrs	r2, r1
 8003236:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d164      	bne.n	800330a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003240:	e02f      	b.n	80032a2 <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2201      	movs	r2, #1
 800324a:	4013      	ands	r3, r2
 800324c:	2b01      	cmp	r3, #1
 800324e:	d115      	bne.n	800327c <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	330c      	adds	r3, #12
 8003256:	001a      	movs	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	7812      	ldrb	r2, [r2, #0]
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	87da      	strh	r2, [r3, #62]	; 0x3e
 800327a:	e012      	b.n	80032a2 <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800327c:	f7fe fb0a 	bl	8001894 <HAL_GetTick>
 8003280:	0002      	movs	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d802      	bhi.n	8003292 <HAL_SPI_Receive+0x17e>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	3301      	adds	r3, #1
 8003290:	d102      	bne.n	8003298 <HAL_SPI_Receive+0x184>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d104      	bne.n	80032a2 <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8003298:	2317      	movs	r3, #23
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	2203      	movs	r2, #3
 800329e:	701a      	strb	r2, [r3, #0]
          goto error;
 80032a0:	e04d      	b.n	800333e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1ca      	bne.n	8003242 <HAL_SPI_Receive+0x12e>
 80032ac:	e032      	b.n	8003314 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2201      	movs	r2, #1
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d113      	bne.n	80032e4 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	b292      	uxth	r2, r2
 80032c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	1c9a      	adds	r2, r3, #2
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032e2:	e012      	b.n	800330a <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032e4:	f7fe fad6 	bl	8001894 <HAL_GetTick>
 80032e8:	0002      	movs	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d802      	bhi.n	80032fa <HAL_SPI_Receive+0x1e6>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	3301      	adds	r3, #1
 80032f8:	d102      	bne.n	8003300 <HAL_SPI_Receive+0x1ec>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d104      	bne.n	800330a <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 8003300:	2317      	movs	r3, #23
 8003302:	18fb      	adds	r3, r7, r3
 8003304:	2203      	movs	r2, #3
 8003306:	701a      	strb	r2, [r3, #0]
          goto error;
 8003308:	e019      	b.n	800333e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1cc      	bne.n	80032ae <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	6839      	ldr	r1, [r7, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	0018      	movs	r0, r3
 800331c:	f000 fa6a 	bl	80037f4 <SPI_EndRxTransaction>
 8003320:	1e03      	subs	r3, r0, #0
 8003322:	d002      	beq.n	800332a <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332e:	2b00      	cmp	r3, #0
 8003330:	d004      	beq.n	800333c <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 8003332:	2317      	movs	r3, #23
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	2201      	movs	r2, #1
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e000      	b.n	800333e <HAL_SPI_Receive+0x22a>
  }

error :
 800333c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2251      	movs	r2, #81	; 0x51
 8003342:	2101      	movs	r1, #1
 8003344:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2250      	movs	r2, #80	; 0x50
 800334a:	2100      	movs	r1, #0
 800334c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800334e:	2317      	movs	r3, #23
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	781b      	ldrb	r3, [r3, #0]
}
 8003354:	0018      	movs	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	b007      	add	sp, #28
 800335a:	bd90      	pop	{r4, r7, pc}
 800335c:	ffffbfff 	.word	0xffffbfff

08003360 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08c      	sub	sp, #48	; 0x30
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
 800336c:	001a      	movs	r2, r3
 800336e:	1cbb      	adds	r3, r7, #2
 8003370:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003372:	2301      	movs	r3, #1
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003376:	232b      	movs	r3, #43	; 0x2b
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2250      	movs	r2, #80	; 0x50
 8003382:	5c9b      	ldrb	r3, [r3, r2]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_SPI_TransmitReceive+0x2c>
 8003388:	2302      	movs	r3, #2
 800338a:	e1a0      	b.n	80036ce <HAL_SPI_TransmitReceive+0x36e>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2250      	movs	r2, #80	; 0x50
 8003390:	2101      	movs	r1, #1
 8003392:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003394:	f7fe fa7e 	bl	8001894 <HAL_GetTick>
 8003398:	0003      	movs	r3, r0
 800339a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800339c:	2023      	movs	r0, #35	; 0x23
 800339e:	183b      	adds	r3, r7, r0
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	2151      	movs	r1, #81	; 0x51
 80033a4:	5c52      	ldrb	r2, [r2, r1]
 80033a6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80033ae:	231a      	movs	r3, #26
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	1cba      	adds	r2, r7, #2
 80033b4:	8812      	ldrh	r2, [r2, #0]
 80033b6:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033b8:	183b      	adds	r3, r7, r0
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d011      	beq.n	80033e4 <HAL_SPI_TransmitReceive+0x84>
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	2382      	movs	r3, #130	; 0x82
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d107      	bne.n	80033da <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d103      	bne.n	80033da <HAL_SPI_TransmitReceive+0x7a>
 80033d2:	183b      	adds	r3, r7, r0
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d004      	beq.n	80033e4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80033da:	232b      	movs	r3, #43	; 0x2b
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	2202      	movs	r2, #2
 80033e0:	701a      	strb	r2, [r3, #0]
    goto error;
 80033e2:	e169      	b.n	80036b8 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d006      	beq.n	80033f8 <HAL_SPI_TransmitReceive+0x98>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_SPI_TransmitReceive+0x98>
 80033f0:	1cbb      	adds	r3, r7, #2
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d104      	bne.n	8003402 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80033f8:	232b      	movs	r3, #43	; 0x2b
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	2201      	movs	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]
    goto error;
 8003400:	e15a      	b.n	80036b8 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2251      	movs	r2, #81	; 0x51
 8003406:	5c9b      	ldrb	r3, [r3, r2]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b04      	cmp	r3, #4
 800340c:	d003      	beq.n	8003416 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2251      	movs	r2, #81	; 0x51
 8003412:	2105      	movs	r1, #5
 8003414:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1cba      	adds	r2, r7, #2
 8003426:	8812      	ldrh	r2, [r2, #0]
 8003428:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1cba      	adds	r2, r7, #2
 800342e:	8812      	ldrh	r2, [r2, #0]
 8003430:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1cba      	adds	r2, r7, #2
 800343c:	8812      	ldrh	r2, [r2, #0]
 800343e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	1cba      	adds	r2, r7, #2
 8003444:	8812      	ldrh	r2, [r2, #0]
 8003446:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2240      	movs	r2, #64	; 0x40
 800345c:	4013      	ands	r3, r2
 800345e:	2b40      	cmp	r3, #64	; 0x40
 8003460:	d007      	beq.n	8003472 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2140      	movs	r1, #64	; 0x40
 800346e:	430a      	orrs	r2, r1
 8003470:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	429a      	cmp	r2, r3
 800347c:	d000      	beq.n	8003480 <HAL_SPI_TransmitReceive+0x120>
 800347e:	e07a      	b.n	8003576 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d004      	beq.n	8003492 <HAL_SPI_TransmitReceive+0x132>
 8003488:	231a      	movs	r3, #26
 800348a:	18fb      	adds	r3, r7, r3
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d166      	bne.n	8003560 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	881a      	ldrh	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	1c9a      	adds	r2, r3, #2
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034b6:	e053      	b.n	8003560 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2202      	movs	r2, #2
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d11b      	bne.n	80034fe <HAL_SPI_TransmitReceive+0x19e>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d016      	beq.n	80034fe <HAL_SPI_TransmitReceive+0x19e>
 80034d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d113      	bne.n	80034fe <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	881a      	ldrh	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	1c9a      	adds	r2, r3, #2
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2201      	movs	r2, #1
 8003506:	4013      	ands	r3, r2
 8003508:	2b01      	cmp	r3, #1
 800350a:	d119      	bne.n	8003540 <HAL_SPI_TransmitReceive+0x1e0>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d014      	beq.n	8003540 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	b292      	uxth	r2, r2
 8003522:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003528:	1c9a      	adds	r2, r3, #2
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800353c:	2301      	movs	r3, #1
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003540:	f7fe f9a8 	bl	8001894 <HAL_GetTick>
 8003544:	0002      	movs	r2, r0
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800354c:	429a      	cmp	r2, r3
 800354e:	d807      	bhi.n	8003560 <HAL_SPI_TransmitReceive+0x200>
 8003550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003552:	3301      	adds	r3, #1
 8003554:	d004      	beq.n	8003560 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8003556:	232b      	movs	r3, #43	; 0x2b
 8003558:	18fb      	adds	r3, r7, r3
 800355a:	2203      	movs	r2, #3
 800355c:	701a      	strb	r2, [r3, #0]
        goto error;
 800355e:	e0ab      	b.n	80036b8 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1a6      	bne.n	80034b8 <HAL_SPI_TransmitReceive+0x158>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1a1      	bne.n	80034b8 <HAL_SPI_TransmitReceive+0x158>
 8003574:	e07f      	b.n	8003676 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <HAL_SPI_TransmitReceive+0x22a>
 800357e:	231a      	movs	r3, #26
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d000      	beq.n	800358a <HAL_SPI_TransmitReceive+0x22a>
 8003588:	e06b      	b.n	8003662 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	330c      	adds	r3, #12
 8003594:	7812      	ldrb	r2, [r2, #0]
 8003596:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035b0:	e057      	b.n	8003662 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2202      	movs	r2, #2
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d11c      	bne.n	80035fa <HAL_SPI_TransmitReceive+0x29a>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d017      	beq.n	80035fa <HAL_SPI_TransmitReceive+0x29a>
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d114      	bne.n	80035fa <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	330c      	adds	r3, #12
 80035da:	7812      	ldrb	r2, [r2, #0]
 80035dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2201      	movs	r2, #1
 8003602:	4013      	ands	r3, r2
 8003604:	2b01      	cmp	r3, #1
 8003606:	d119      	bne.n	800363c <HAL_SPI_TransmitReceive+0x2dc>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d014      	beq.n	800363c <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003638:	2301      	movs	r3, #1
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800363c:	f7fe f92a 	bl	8001894 <HAL_GetTick>
 8003640:	0002      	movs	r2, r0
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003648:	429a      	cmp	r2, r3
 800364a:	d802      	bhi.n	8003652 <HAL_SPI_TransmitReceive+0x2f2>
 800364c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364e:	3301      	adds	r3, #1
 8003650:	d102      	bne.n	8003658 <HAL_SPI_TransmitReceive+0x2f8>
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	2b00      	cmp	r3, #0
 8003656:	d104      	bne.n	8003662 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8003658:	232b      	movs	r3, #43	; 0x2b
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	2203      	movs	r2, #3
 800365e:	701a      	strb	r2, [r3, #0]
        goto error;
 8003660:	e02a      	b.n	80036b8 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1a2      	bne.n	80035b2 <HAL_SPI_TransmitReceive+0x252>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d19d      	bne.n	80035b2 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003678:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	0018      	movs	r0, r3
 800367e:	f000 f923 	bl	80038c8 <SPI_EndRxTxTransaction>
 8003682:	1e03      	subs	r3, r0, #0
 8003684:	d007      	beq.n	8003696 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8003686:	232b      	movs	r3, #43	; 0x2b
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003694:	e010      	b.n	80036b8 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10b      	bne.n	80036b6 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	e000      	b.n	80036b8 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 80036b6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2251      	movs	r2, #81	; 0x51
 80036bc:	2101      	movs	r1, #1
 80036be:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2250      	movs	r2, #80	; 0x50
 80036c4:	2100      	movs	r1, #0
 80036c6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80036c8:	232b      	movs	r3, #43	; 0x2b
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	781b      	ldrb	r3, [r3, #0]
}
 80036ce:	0018      	movs	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b00c      	add	sp, #48	; 0x30
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	1dfb      	adds	r3, r7, #7
 80036e6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036e8:	f7fe f8d4 	bl	8001894 <HAL_GetTick>
 80036ec:	0002      	movs	r2, r0
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	18d3      	adds	r3, r2, r3
 80036f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036f8:	f7fe f8cc 	bl	8001894 <HAL_GetTick>
 80036fc:	0003      	movs	r3, r0
 80036fe:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003700:	4b3a      	ldr	r3, [pc, #232]	; (80037ec <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	015b      	lsls	r3, r3, #5
 8003706:	0d1b      	lsrs	r3, r3, #20
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	4353      	muls	r3, r2
 800370c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800370e:	e058      	b.n	80037c2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	3301      	adds	r3, #1
 8003714:	d055      	beq.n	80037c2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003716:	f7fe f8bd 	bl	8001894 <HAL_GetTick>
 800371a:	0002      	movs	r2, r0
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	69fa      	ldr	r2, [r7, #28]
 8003722:	429a      	cmp	r2, r3
 8003724:	d902      	bls.n	800372c <SPI_WaitFlagStateUntilTimeout+0x54>
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d142      	bne.n	80037b2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	21e0      	movs	r1, #224	; 0xe0
 8003738:	438a      	bics	r2, r1
 800373a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	2382      	movs	r3, #130	; 0x82
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	429a      	cmp	r2, r3
 8003746:	d113      	bne.n	8003770 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	2380      	movs	r3, #128	; 0x80
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	429a      	cmp	r2, r3
 8003752:	d005      	beq.n	8003760 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	429a      	cmp	r2, r3
 800375e:	d107      	bne.n	8003770 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2140      	movs	r1, #64	; 0x40
 800376c:	438a      	bics	r2, r1
 800376e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	019b      	lsls	r3, r3, #6
 8003778:	429a      	cmp	r2, r3
 800377a:	d110      	bne.n	800379e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	491a      	ldr	r1, [pc, #104]	; (80037f0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003788:	400a      	ands	r2, r1
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2180      	movs	r1, #128	; 0x80
 8003798:	0189      	lsls	r1, r1, #6
 800379a:	430a      	orrs	r2, r1
 800379c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2251      	movs	r2, #81	; 0x51
 80037a2:	2101      	movs	r1, #1
 80037a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2250      	movs	r2, #80	; 0x50
 80037aa:	2100      	movs	r1, #0
 80037ac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e017      	b.n	80037e2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	3b01      	subs	r3, #1
 80037c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	4013      	ands	r3, r2
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	425a      	negs	r2, r3
 80037d2:	4153      	adcs	r3, r2
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	001a      	movs	r2, r3
 80037d8:	1dfb      	adds	r3, r7, #7
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d197      	bne.n	8003710 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	0018      	movs	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b008      	add	sp, #32
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	2000001c 	.word	0x2000001c
 80037f0:	ffffdfff 	.word	0xffffdfff

080037f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	2382      	movs	r3, #130	; 0x82
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	429a      	cmp	r2, r3
 800380a:	d113      	bne.n	8003834 <SPI_EndRxTransaction+0x40>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	2380      	movs	r3, #128	; 0x80
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	429a      	cmp	r2, r3
 8003816:	d005      	beq.n	8003824 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	2380      	movs	r3, #128	; 0x80
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	429a      	cmp	r2, r3
 8003822:	d107      	bne.n	8003834 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2140      	movs	r1, #64	; 0x40
 8003830:	438a      	bics	r2, r1
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	2382      	movs	r3, #130	; 0x82
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	429a      	cmp	r2, r3
 800383e:	d12b      	bne.n	8003898 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	2380      	movs	r3, #128	; 0x80
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	429a      	cmp	r2, r3
 800384a:	d012      	beq.n	8003872 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	0013      	movs	r3, r2
 8003856:	2200      	movs	r2, #0
 8003858:	2180      	movs	r1, #128	; 0x80
 800385a:	f7ff ff3d 	bl	80036d8 <SPI_WaitFlagStateUntilTimeout>
 800385e:	1e03      	subs	r3, r0, #0
 8003860:	d02d      	beq.n	80038be <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003866:	2220      	movs	r2, #32
 8003868:	431a      	orrs	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e026      	b.n	80038c0 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	0013      	movs	r3, r2
 800387c:	2200      	movs	r2, #0
 800387e:	2101      	movs	r1, #1
 8003880:	f7ff ff2a 	bl	80036d8 <SPI_WaitFlagStateUntilTimeout>
 8003884:	1e03      	subs	r3, r0, #0
 8003886:	d01a      	beq.n	80038be <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388c:	2220      	movs	r2, #32
 800388e:	431a      	orrs	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e013      	b.n	80038c0 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	0013      	movs	r3, r2
 80038a2:	2200      	movs	r2, #0
 80038a4:	2101      	movs	r1, #1
 80038a6:	f7ff ff17 	bl	80036d8 <SPI_WaitFlagStateUntilTimeout>
 80038aa:	1e03      	subs	r3, r0, #0
 80038ac:	d007      	beq.n	80038be <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	2220      	movs	r2, #32
 80038b4:	431a      	orrs	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e000      	b.n	80038c0 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	0018      	movs	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	b004      	add	sp, #16
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80038d4:	4b1d      	ldr	r3, [pc, #116]	; (800394c <SPI_EndRxTxTransaction+0x84>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	491d      	ldr	r1, [pc, #116]	; (8003950 <SPI_EndRxTxTransaction+0x88>)
 80038da:	0018      	movs	r0, r3
 80038dc:	f7fc fc1e 	bl	800011c <__udivsi3>
 80038e0:	0003      	movs	r3, r0
 80038e2:	001a      	movs	r2, r3
 80038e4:	0013      	movs	r3, r2
 80038e6:	015b      	lsls	r3, r3, #5
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	189b      	adds	r3, r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	2382      	movs	r3, #130	; 0x82
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d112      	bne.n	8003924 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	0013      	movs	r3, r2
 8003908:	2200      	movs	r2, #0
 800390a:	2180      	movs	r1, #128	; 0x80
 800390c:	f7ff fee4 	bl	80036d8 <SPI_WaitFlagStateUntilTimeout>
 8003910:	1e03      	subs	r3, r0, #0
 8003912:	d016      	beq.n	8003942 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003918:	2220      	movs	r2, #32
 800391a:	431a      	orrs	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e00f      	b.n	8003944 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	3b01      	subs	r3, #1
 800392e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2280      	movs	r2, #128	; 0x80
 8003938:	4013      	ands	r3, r2
 800393a:	2b80      	cmp	r3, #128	; 0x80
 800393c:	d0f2      	beq.n	8003924 <SPI_EndRxTxTransaction+0x5c>
 800393e:	e000      	b.n	8003942 <SPI_EndRxTxTransaction+0x7a>
        break;
 8003940:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	0018      	movs	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	b006      	add	sp, #24
 800394a:	bd80      	pop	{r7, pc}
 800394c:	2000001c 	.word	0x2000001c
 8003950:	016e3600 	.word	0x016e3600

08003954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e044      	b.n	80039f0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800396a:	2b00      	cmp	r3, #0
 800396c:	d107      	bne.n	800397e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2274      	movs	r2, #116	; 0x74
 8003972:	2100      	movs	r1, #0
 8003974:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	0018      	movs	r0, r3
 800397a:	f7fd fe11 	bl	80015a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2224      	movs	r2, #36	; 0x24
 8003982:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2101      	movs	r1, #1
 8003990:	438a      	bics	r2, r1
 8003992:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	0018      	movs	r0, r3
 8003998:	f000 f8d8 	bl	8003b4c <UART_SetConfig>
 800399c:	0003      	movs	r3, r0
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e024      	b.n	80039f0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	0018      	movs	r0, r3
 80039b2:	f000 fb89 	bl	80040c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	490d      	ldr	r1, [pc, #52]	; (80039f8 <HAL_UART_Init+0xa4>)
 80039c2:	400a      	ands	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	212a      	movs	r1, #42	; 0x2a
 80039d2:	438a      	bics	r2, r1
 80039d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2101      	movs	r1, #1
 80039e2:	430a      	orrs	r2, r1
 80039e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	0018      	movs	r0, r3
 80039ea:	f000 fc21 	bl	8004230 <UART_CheckIdleState>
 80039ee:	0003      	movs	r3, r0
}
 80039f0:	0018      	movs	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b002      	add	sp, #8
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	ffffb7ff 	.word	0xffffb7ff

080039fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	1dbb      	adds	r3, r7, #6
 8003a0a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d000      	beq.n	8003a16 <HAL_UART_Transmit+0x1a>
 8003a14:	e095      	b.n	8003b42 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_UART_Transmit+0x28>
 8003a1c:	1dbb      	adds	r3, r7, #6
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e08d      	b.n	8003b44 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	015b      	lsls	r3, r3, #5
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d109      	bne.n	8003a48 <HAL_UART_Transmit+0x4c>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d105      	bne.n	8003a48 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	4013      	ands	r3, r2
 8003a42:	d001      	beq.n	8003a48 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e07d      	b.n	8003b44 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2274      	movs	r2, #116	; 0x74
 8003a4c:	5c9b      	ldrb	r3, [r3, r2]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_UART_Transmit+0x5a>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e076      	b.n	8003b44 <HAL_UART_Transmit+0x148>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2274      	movs	r2, #116	; 0x74
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2280      	movs	r2, #128	; 0x80
 8003a62:	2100      	movs	r1, #0
 8003a64:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2221      	movs	r2, #33	; 0x21
 8003a6a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a6c:	f7fd ff12 	bl	8001894 <HAL_GetTick>
 8003a70:	0003      	movs	r3, r0
 8003a72:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1dba      	adds	r2, r7, #6
 8003a78:	2150      	movs	r1, #80	; 0x50
 8003a7a:	8812      	ldrh	r2, [r2, #0]
 8003a7c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1dba      	adds	r2, r7, #6
 8003a82:	2152      	movs	r1, #82	; 0x52
 8003a84:	8812      	ldrh	r2, [r2, #0]
 8003a86:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	2380      	movs	r3, #128	; 0x80
 8003a8e:	015b      	lsls	r3, r3, #5
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d108      	bne.n	8003aa6 <HAL_UART_Transmit+0xaa>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d104      	bne.n	8003aa6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	e003      	b.n	8003aae <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2274      	movs	r2, #116	; 0x74
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003ab6:	e02c      	b.n	8003b12 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	0013      	movs	r3, r2
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2180      	movs	r1, #128	; 0x80
 8003ac6:	f000 fbfb 	bl	80042c0 <UART_WaitOnFlagUntilTimeout>
 8003aca:	1e03      	subs	r3, r0, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e038      	b.n	8003b44 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10b      	bne.n	8003af0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	001a      	movs	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	05d2      	lsls	r2, r2, #23
 8003ae4:	0dd2      	lsrs	r2, r2, #23
 8003ae6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	3302      	adds	r3, #2
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	e007      	b.n	8003b00 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	781a      	ldrb	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	3301      	adds	r3, #1
 8003afe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2252      	movs	r2, #82	; 0x52
 8003b04:	5a9b      	ldrh	r3, [r3, r2]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b299      	uxth	r1, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2252      	movs	r2, #82	; 0x52
 8003b10:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2252      	movs	r2, #82	; 0x52
 8003b16:	5a9b      	ldrh	r3, [r3, r2]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1cc      	bne.n	8003ab8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	0013      	movs	r3, r2
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2140      	movs	r1, #64	; 0x40
 8003b2c:	f000 fbc8 	bl	80042c0 <UART_WaitOnFlagUntilTimeout>
 8003b30:	1e03      	subs	r3, r0, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e005      	b.n	8003b44 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e000      	b.n	8003b44 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003b42:	2302      	movs	r3, #2
  }
}
 8003b44:	0018      	movs	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b008      	add	sp, #32
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b4c:	b5b0      	push	{r4, r5, r7, lr}
 8003b4e:	b08e      	sub	sp, #56	; 0x38
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b54:	231a      	movs	r3, #26
 8003b56:	2218      	movs	r2, #24
 8003b58:	4694      	mov	ip, r2
 8003b5a:	44bc      	add	ip, r7
 8003b5c:	4463      	add	r3, ip
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	431a      	orrs	r2, r3
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4ab0      	ldr	r2, [pc, #704]	; (8003e44 <UART_SetConfig+0x2f8>)
 8003b82:	4013      	ands	r3, r2
 8003b84:	0019      	movs	r1, r3
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4aac      	ldr	r2, [pc, #688]	; (8003e48 <UART_SetConfig+0x2fc>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	0019      	movs	r1, r3
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4aa6      	ldr	r2, [pc, #664]	; (8003e4c <UART_SetConfig+0x300>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d004      	beq.n	8003bc2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4aa1      	ldr	r2, [pc, #644]	; (8003e50 <UART_SetConfig+0x304>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	0019      	movs	r1, r3
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a9d      	ldr	r2, [pc, #628]	; (8003e54 <UART_SetConfig+0x308>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d136      	bne.n	8003c50 <UART_SetConfig+0x104>
 8003be2:	4b9d      	ldr	r3, [pc, #628]	; (8003e58 <UART_SetConfig+0x30c>)
 8003be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be6:	2203      	movs	r2, #3
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d020      	beq.n	8003c30 <UART_SetConfig+0xe4>
 8003bee:	d827      	bhi.n	8003c40 <UART_SetConfig+0xf4>
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d00d      	beq.n	8003c10 <UART_SetConfig+0xc4>
 8003bf4:	d824      	bhi.n	8003c40 <UART_SetConfig+0xf4>
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <UART_SetConfig+0xb4>
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d010      	beq.n	8003c20 <UART_SetConfig+0xd4>
 8003bfe:	e01f      	b.n	8003c40 <UART_SetConfig+0xf4>
 8003c00:	231b      	movs	r3, #27
 8003c02:	2218      	movs	r2, #24
 8003c04:	4694      	mov	ip, r2
 8003c06:	44bc      	add	ip, r7
 8003c08:	4463      	add	r3, ip
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	e0c5      	b.n	8003d9c <UART_SetConfig+0x250>
 8003c10:	231b      	movs	r3, #27
 8003c12:	2218      	movs	r2, #24
 8003c14:	4694      	mov	ip, r2
 8003c16:	44bc      	add	ip, r7
 8003c18:	4463      	add	r3, ip
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	e0bd      	b.n	8003d9c <UART_SetConfig+0x250>
 8003c20:	231b      	movs	r3, #27
 8003c22:	2218      	movs	r2, #24
 8003c24:	4694      	mov	ip, r2
 8003c26:	44bc      	add	ip, r7
 8003c28:	4463      	add	r3, ip
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	e0b5      	b.n	8003d9c <UART_SetConfig+0x250>
 8003c30:	231b      	movs	r3, #27
 8003c32:	2218      	movs	r2, #24
 8003c34:	4694      	mov	ip, r2
 8003c36:	44bc      	add	ip, r7
 8003c38:	4463      	add	r3, ip
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	701a      	strb	r2, [r3, #0]
 8003c3e:	e0ad      	b.n	8003d9c <UART_SetConfig+0x250>
 8003c40:	231b      	movs	r3, #27
 8003c42:	2218      	movs	r2, #24
 8003c44:	4694      	mov	ip, r2
 8003c46:	44bc      	add	ip, r7
 8003c48:	4463      	add	r3, ip
 8003c4a:	2210      	movs	r2, #16
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	e0a5      	b.n	8003d9c <UART_SetConfig+0x250>
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a81      	ldr	r2, [pc, #516]	; (8003e5c <UART_SetConfig+0x310>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d136      	bne.n	8003cc8 <UART_SetConfig+0x17c>
 8003c5a:	4b7f      	ldr	r3, [pc, #508]	; (8003e58 <UART_SetConfig+0x30c>)
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5e:	220c      	movs	r2, #12
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b0c      	cmp	r3, #12
 8003c64:	d020      	beq.n	8003ca8 <UART_SetConfig+0x15c>
 8003c66:	d827      	bhi.n	8003cb8 <UART_SetConfig+0x16c>
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d00d      	beq.n	8003c88 <UART_SetConfig+0x13c>
 8003c6c:	d824      	bhi.n	8003cb8 <UART_SetConfig+0x16c>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <UART_SetConfig+0x12c>
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d010      	beq.n	8003c98 <UART_SetConfig+0x14c>
 8003c76:	e01f      	b.n	8003cb8 <UART_SetConfig+0x16c>
 8003c78:	231b      	movs	r3, #27
 8003c7a:	2218      	movs	r2, #24
 8003c7c:	4694      	mov	ip, r2
 8003c7e:	44bc      	add	ip, r7
 8003c80:	4463      	add	r3, ip
 8003c82:	2200      	movs	r2, #0
 8003c84:	701a      	strb	r2, [r3, #0]
 8003c86:	e089      	b.n	8003d9c <UART_SetConfig+0x250>
 8003c88:	231b      	movs	r3, #27
 8003c8a:	2218      	movs	r2, #24
 8003c8c:	4694      	mov	ip, r2
 8003c8e:	44bc      	add	ip, r7
 8003c90:	4463      	add	r3, ip
 8003c92:	2202      	movs	r2, #2
 8003c94:	701a      	strb	r2, [r3, #0]
 8003c96:	e081      	b.n	8003d9c <UART_SetConfig+0x250>
 8003c98:	231b      	movs	r3, #27
 8003c9a:	2218      	movs	r2, #24
 8003c9c:	4694      	mov	ip, r2
 8003c9e:	44bc      	add	ip, r7
 8003ca0:	4463      	add	r3, ip
 8003ca2:	2204      	movs	r2, #4
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	e079      	b.n	8003d9c <UART_SetConfig+0x250>
 8003ca8:	231b      	movs	r3, #27
 8003caa:	2218      	movs	r2, #24
 8003cac:	4694      	mov	ip, r2
 8003cae:	44bc      	add	ip, r7
 8003cb0:	4463      	add	r3, ip
 8003cb2:	2208      	movs	r2, #8
 8003cb4:	701a      	strb	r2, [r3, #0]
 8003cb6:	e071      	b.n	8003d9c <UART_SetConfig+0x250>
 8003cb8:	231b      	movs	r3, #27
 8003cba:	2218      	movs	r2, #24
 8003cbc:	4694      	mov	ip, r2
 8003cbe:	44bc      	add	ip, r7
 8003cc0:	4463      	add	r3, ip
 8003cc2:	2210      	movs	r2, #16
 8003cc4:	701a      	strb	r2, [r3, #0]
 8003cc6:	e069      	b.n	8003d9c <UART_SetConfig+0x250>
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a64      	ldr	r2, [pc, #400]	; (8003e60 <UART_SetConfig+0x314>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d107      	bne.n	8003ce2 <UART_SetConfig+0x196>
 8003cd2:	231b      	movs	r3, #27
 8003cd4:	2218      	movs	r2, #24
 8003cd6:	4694      	mov	ip, r2
 8003cd8:	44bc      	add	ip, r7
 8003cda:	4463      	add	r3, ip
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
 8003ce0:	e05c      	b.n	8003d9c <UART_SetConfig+0x250>
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a5f      	ldr	r2, [pc, #380]	; (8003e64 <UART_SetConfig+0x318>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d107      	bne.n	8003cfc <UART_SetConfig+0x1b0>
 8003cec:	231b      	movs	r3, #27
 8003cee:	2218      	movs	r2, #24
 8003cf0:	4694      	mov	ip, r2
 8003cf2:	44bc      	add	ip, r7
 8003cf4:	4463      	add	r3, ip
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	e04f      	b.n	8003d9c <UART_SetConfig+0x250>
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a52      	ldr	r2, [pc, #328]	; (8003e4c <UART_SetConfig+0x300>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d143      	bne.n	8003d8e <UART_SetConfig+0x242>
 8003d06:	4b54      	ldr	r3, [pc, #336]	; (8003e58 <UART_SetConfig+0x30c>)
 8003d08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d0a:	23c0      	movs	r3, #192	; 0xc0
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	4013      	ands	r3, r2
 8003d10:	22c0      	movs	r2, #192	; 0xc0
 8003d12:	0112      	lsls	r2, r2, #4
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d02a      	beq.n	8003d6e <UART_SetConfig+0x222>
 8003d18:	22c0      	movs	r2, #192	; 0xc0
 8003d1a:	0112      	lsls	r2, r2, #4
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d82e      	bhi.n	8003d7e <UART_SetConfig+0x232>
 8003d20:	2280      	movs	r2, #128	; 0x80
 8003d22:	0112      	lsls	r2, r2, #4
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d012      	beq.n	8003d4e <UART_SetConfig+0x202>
 8003d28:	2280      	movs	r2, #128	; 0x80
 8003d2a:	0112      	lsls	r2, r2, #4
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d826      	bhi.n	8003d7e <UART_SetConfig+0x232>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d004      	beq.n	8003d3e <UART_SetConfig+0x1f2>
 8003d34:	2280      	movs	r2, #128	; 0x80
 8003d36:	00d2      	lsls	r2, r2, #3
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d010      	beq.n	8003d5e <UART_SetConfig+0x212>
 8003d3c:	e01f      	b.n	8003d7e <UART_SetConfig+0x232>
 8003d3e:	231b      	movs	r3, #27
 8003d40:	2218      	movs	r2, #24
 8003d42:	4694      	mov	ip, r2
 8003d44:	44bc      	add	ip, r7
 8003d46:	4463      	add	r3, ip
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	e026      	b.n	8003d9c <UART_SetConfig+0x250>
 8003d4e:	231b      	movs	r3, #27
 8003d50:	2218      	movs	r2, #24
 8003d52:	4694      	mov	ip, r2
 8003d54:	44bc      	add	ip, r7
 8003d56:	4463      	add	r3, ip
 8003d58:	2202      	movs	r2, #2
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	e01e      	b.n	8003d9c <UART_SetConfig+0x250>
 8003d5e:	231b      	movs	r3, #27
 8003d60:	2218      	movs	r2, #24
 8003d62:	4694      	mov	ip, r2
 8003d64:	44bc      	add	ip, r7
 8003d66:	4463      	add	r3, ip
 8003d68:	2204      	movs	r2, #4
 8003d6a:	701a      	strb	r2, [r3, #0]
 8003d6c:	e016      	b.n	8003d9c <UART_SetConfig+0x250>
 8003d6e:	231b      	movs	r3, #27
 8003d70:	2218      	movs	r2, #24
 8003d72:	4694      	mov	ip, r2
 8003d74:	44bc      	add	ip, r7
 8003d76:	4463      	add	r3, ip
 8003d78:	2208      	movs	r2, #8
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	e00e      	b.n	8003d9c <UART_SetConfig+0x250>
 8003d7e:	231b      	movs	r3, #27
 8003d80:	2218      	movs	r2, #24
 8003d82:	4694      	mov	ip, r2
 8003d84:	44bc      	add	ip, r7
 8003d86:	4463      	add	r3, ip
 8003d88:	2210      	movs	r2, #16
 8003d8a:	701a      	strb	r2, [r3, #0]
 8003d8c:	e006      	b.n	8003d9c <UART_SetConfig+0x250>
 8003d8e:	231b      	movs	r3, #27
 8003d90:	2218      	movs	r2, #24
 8003d92:	4694      	mov	ip, r2
 8003d94:	44bc      	add	ip, r7
 8003d96:	4463      	add	r3, ip
 8003d98:	2210      	movs	r2, #16
 8003d9a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a2a      	ldr	r2, [pc, #168]	; (8003e4c <UART_SetConfig+0x300>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d000      	beq.n	8003da8 <UART_SetConfig+0x25c>
 8003da6:	e09e      	b.n	8003ee6 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003da8:	231b      	movs	r3, #27
 8003daa:	2218      	movs	r2, #24
 8003dac:	4694      	mov	ip, r2
 8003dae:	44bc      	add	ip, r7
 8003db0:	4463      	add	r3, ip
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d01d      	beq.n	8003df4 <UART_SetConfig+0x2a8>
 8003db8:	dc20      	bgt.n	8003dfc <UART_SetConfig+0x2b0>
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d015      	beq.n	8003dea <UART_SetConfig+0x29e>
 8003dbe:	dc1d      	bgt.n	8003dfc <UART_SetConfig+0x2b0>
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <UART_SetConfig+0x27e>
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d005      	beq.n	8003dd4 <UART_SetConfig+0x288>
 8003dc8:	e018      	b.n	8003dfc <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dca:	f7fe fe19 	bl	8002a00 <HAL_RCC_GetPCLK1Freq>
 8003dce:	0003      	movs	r3, r0
 8003dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003dd2:	e01d      	b.n	8003e10 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dd4:	4b20      	ldr	r3, [pc, #128]	; (8003e58 <UART_SetConfig+0x30c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2210      	movs	r2, #16
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d002      	beq.n	8003de4 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003dde:	4b22      	ldr	r3, [pc, #136]	; (8003e68 <UART_SetConfig+0x31c>)
 8003de0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003de2:	e015      	b.n	8003e10 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8003de4:	4b21      	ldr	r3, [pc, #132]	; (8003e6c <UART_SetConfig+0x320>)
 8003de6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003de8:	e012      	b.n	8003e10 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dea:	f7fe fd59 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8003dee:	0003      	movs	r3, r0
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003df2:	e00d      	b.n	8003e10 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003df4:	2380      	movs	r3, #128	; 0x80
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003dfa:	e009      	b.n	8003e10 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003e00:	231a      	movs	r3, #26
 8003e02:	2218      	movs	r2, #24
 8003e04:	4694      	mov	ip, r2
 8003e06:	44bc      	add	ip, r7
 8003e08:	4463      	add	r3, ip
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	701a      	strb	r2, [r3, #0]
        break;
 8003e0e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d100      	bne.n	8003e18 <UART_SetConfig+0x2cc>
 8003e16:	e13c      	b.n	8004092 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	0013      	movs	r3, r2
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	189b      	adds	r3, r3, r2
 8003e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d305      	bcc.n	8003e34 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d91d      	bls.n	8003e70 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8003e34:	231a      	movs	r3, #26
 8003e36:	2218      	movs	r2, #24
 8003e38:	4694      	mov	ip, r2
 8003e3a:	44bc      	add	ip, r7
 8003e3c:	4463      	add	r3, ip
 8003e3e:	2201      	movs	r2, #1
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	e126      	b.n	8004092 <UART_SetConfig+0x546>
 8003e44:	efff69f3 	.word	0xefff69f3
 8003e48:	ffffcfff 	.word	0xffffcfff
 8003e4c:	40004800 	.word	0x40004800
 8003e50:	fffff4ff 	.word	0xfffff4ff
 8003e54:	40013800 	.word	0x40013800
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40004400 	.word	0x40004400
 8003e60:	40004c00 	.word	0x40004c00
 8003e64:	40005000 	.word	0x40005000
 8003e68:	003d0900 	.word	0x003d0900
 8003e6c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e72:	613b      	str	r3, [r7, #16]
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	6939      	ldr	r1, [r7, #16]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	000b      	movs	r3, r1
 8003e7e:	0e1b      	lsrs	r3, r3, #24
 8003e80:	0010      	movs	r0, r2
 8003e82:	0205      	lsls	r5, r0, #8
 8003e84:	431d      	orrs	r5, r3
 8003e86:	000b      	movs	r3, r1
 8003e88:	021c      	lsls	r4, r3, #8
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	085b      	lsrs	r3, r3, #1
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	68b8      	ldr	r0, [r7, #8]
 8003e98:	68f9      	ldr	r1, [r7, #12]
 8003e9a:	1900      	adds	r0, r0, r4
 8003e9c:	4169      	adcs	r1, r5
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	607b      	str	r3, [r7, #4]
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f7fc f9c2 	bl	8000234 <__aeabi_uldivmod>
 8003eb0:	0002      	movs	r2, r0
 8003eb2:	000b      	movs	r3, r1
 8003eb4:	0013      	movs	r3, r2
 8003eb6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eba:	23c0      	movs	r3, #192	; 0xc0
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d309      	bcc.n	8003ed6 <UART_SetConfig+0x38a>
 8003ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	035b      	lsls	r3, r3, #13
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d204      	bcs.n	8003ed6 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ed2:	60da      	str	r2, [r3, #12]
 8003ed4:	e0dd      	b.n	8004092 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003ed6:	231a      	movs	r3, #26
 8003ed8:	2218      	movs	r2, #24
 8003eda:	4694      	mov	ip, r2
 8003edc:	44bc      	add	ip, r7
 8003ede:	4463      	add	r3, ip
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e0d5      	b.n	8004092 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	69da      	ldr	r2, [r3, #28]
 8003eea:	2380      	movs	r3, #128	; 0x80
 8003eec:	021b      	lsls	r3, r3, #8
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d000      	beq.n	8003ef4 <UART_SetConfig+0x3a8>
 8003ef2:	e074      	b.n	8003fde <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8003ef4:	231b      	movs	r3, #27
 8003ef6:	2218      	movs	r2, #24
 8003ef8:	4694      	mov	ip, r2
 8003efa:	44bc      	add	ip, r7
 8003efc:	4463      	add	r3, ip
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d822      	bhi.n	8003f4a <UART_SetConfig+0x3fe>
 8003f04:	009a      	lsls	r2, r3, #2
 8003f06:	4b6b      	ldr	r3, [pc, #428]	; (80040b4 <UART_SetConfig+0x568>)
 8003f08:	18d3      	adds	r3, r2, r3
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f0e:	f7fe fd77 	bl	8002a00 <HAL_RCC_GetPCLK1Freq>
 8003f12:	0003      	movs	r3, r0
 8003f14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f16:	e022      	b.n	8003f5e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f18:	f7fe fd88 	bl	8002a2c <HAL_RCC_GetPCLK2Freq>
 8003f1c:	0003      	movs	r3, r0
 8003f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f20:	e01d      	b.n	8003f5e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f22:	4b65      	ldr	r3, [pc, #404]	; (80040b8 <UART_SetConfig+0x56c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2210      	movs	r2, #16
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d002      	beq.n	8003f32 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003f2c:	4b63      	ldr	r3, [pc, #396]	; (80040bc <UART_SetConfig+0x570>)
 8003f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003f30:	e015      	b.n	8003f5e <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8003f32:	4b63      	ldr	r3, [pc, #396]	; (80040c0 <UART_SetConfig+0x574>)
 8003f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f36:	e012      	b.n	8003f5e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f38:	f7fe fcb2 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8003f3c:	0003      	movs	r3, r0
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f40:	e00d      	b.n	8003f5e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	021b      	lsls	r3, r3, #8
 8003f46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f48:	e009      	b.n	8003f5e <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003f4e:	231a      	movs	r3, #26
 8003f50:	2218      	movs	r2, #24
 8003f52:	4694      	mov	ip, r2
 8003f54:	44bc      	add	ip, r7
 8003f56:	4463      	add	r3, ip
 8003f58:	2201      	movs	r2, #1
 8003f5a:	701a      	strb	r2, [r3, #0]
        break;
 8003f5c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d100      	bne.n	8003f66 <UART_SetConfig+0x41a>
 8003f64:	e095      	b.n	8004092 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f68:	005a      	lsls	r2, r3, #1
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	085b      	lsrs	r3, r3, #1
 8003f70:	18d2      	adds	r2, r2, r3
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	0019      	movs	r1, r3
 8003f78:	0010      	movs	r0, r2
 8003f7a:	f7fc f8cf 	bl	800011c <__udivsi3>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	2b0f      	cmp	r3, #15
 8003f88:	d921      	bls.n	8003fce <UART_SetConfig+0x482>
 8003f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	025b      	lsls	r3, r3, #9
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d21c      	bcs.n	8003fce <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	200e      	movs	r0, #14
 8003f9a:	2418      	movs	r4, #24
 8003f9c:	193b      	adds	r3, r7, r4
 8003f9e:	181b      	adds	r3, r3, r0
 8003fa0:	210f      	movs	r1, #15
 8003fa2:	438a      	bics	r2, r1
 8003fa4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	085b      	lsrs	r3, r3, #1
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2207      	movs	r2, #7
 8003fae:	4013      	ands	r3, r2
 8003fb0:	b299      	uxth	r1, r3
 8003fb2:	193b      	adds	r3, r7, r4
 8003fb4:	181b      	adds	r3, r3, r0
 8003fb6:	193a      	adds	r2, r7, r4
 8003fb8:	1812      	adds	r2, r2, r0
 8003fba:	8812      	ldrh	r2, [r2, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	193a      	adds	r2, r7, r4
 8003fc6:	1812      	adds	r2, r2, r0
 8003fc8:	8812      	ldrh	r2, [r2, #0]
 8003fca:	60da      	str	r2, [r3, #12]
 8003fcc:	e061      	b.n	8004092 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003fce:	231a      	movs	r3, #26
 8003fd0:	2218      	movs	r2, #24
 8003fd2:	4694      	mov	ip, r2
 8003fd4:	44bc      	add	ip, r7
 8003fd6:	4463      	add	r3, ip
 8003fd8:	2201      	movs	r2, #1
 8003fda:	701a      	strb	r2, [r3, #0]
 8003fdc:	e059      	b.n	8004092 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fde:	231b      	movs	r3, #27
 8003fe0:	2218      	movs	r2, #24
 8003fe2:	4694      	mov	ip, r2
 8003fe4:	44bc      	add	ip, r7
 8003fe6:	4463      	add	r3, ip
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d822      	bhi.n	8004034 <UART_SetConfig+0x4e8>
 8003fee:	009a      	lsls	r2, r3, #2
 8003ff0:	4b34      	ldr	r3, [pc, #208]	; (80040c4 <UART_SetConfig+0x578>)
 8003ff2:	18d3      	adds	r3, r2, r3
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff8:	f7fe fd02 	bl	8002a00 <HAL_RCC_GetPCLK1Freq>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004000:	e022      	b.n	8004048 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004002:	f7fe fd13 	bl	8002a2c <HAL_RCC_GetPCLK2Freq>
 8004006:	0003      	movs	r3, r0
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800400a:	e01d      	b.n	8004048 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800400c:	4b2a      	ldr	r3, [pc, #168]	; (80040b8 <UART_SetConfig+0x56c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2210      	movs	r2, #16
 8004012:	4013      	ands	r3, r2
 8004014:	d002      	beq.n	800401c <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004016:	4b29      	ldr	r3, [pc, #164]	; (80040bc <UART_SetConfig+0x570>)
 8004018:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800401a:	e015      	b.n	8004048 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 800401c:	4b28      	ldr	r3, [pc, #160]	; (80040c0 <UART_SetConfig+0x574>)
 800401e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004020:	e012      	b.n	8004048 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004022:	f7fe fc3d 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8004026:	0003      	movs	r3, r0
 8004028:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800402a:	e00d      	b.n	8004048 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	021b      	lsls	r3, r3, #8
 8004030:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004032:	e009      	b.n	8004048 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004038:	231a      	movs	r3, #26
 800403a:	2218      	movs	r2, #24
 800403c:	4694      	mov	ip, r2
 800403e:	44bc      	add	ip, r7
 8004040:	4463      	add	r3, ip
 8004042:	2201      	movs	r2, #1
 8004044:	701a      	strb	r2, [r3, #0]
        break;
 8004046:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d021      	beq.n	8004092 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	085a      	lsrs	r2, r3, #1
 8004054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004056:	18d2      	adds	r2, r2, r3
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	0019      	movs	r1, r3
 800405e:	0010      	movs	r0, r2
 8004060:	f7fc f85c 	bl	800011c <__udivsi3>
 8004064:	0003      	movs	r3, r0
 8004066:	b29b      	uxth	r3, r3
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	2b0f      	cmp	r3, #15
 800406e:	d909      	bls.n	8004084 <UART_SetConfig+0x538>
 8004070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004072:	2380      	movs	r3, #128	; 0x80
 8004074:	025b      	lsls	r3, r3, #9
 8004076:	429a      	cmp	r2, r3
 8004078:	d204      	bcs.n	8004084 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	e006      	b.n	8004092 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004084:	231a      	movs	r3, #26
 8004086:	2218      	movs	r2, #24
 8004088:	4694      	mov	ip, r2
 800408a:	44bc      	add	ip, r7
 800408c:	4463      	add	r3, ip
 800408e:	2201      	movs	r2, #1
 8004090:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	2200      	movs	r2, #0
 8004096:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	2200      	movs	r2, #0
 800409c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800409e:	231a      	movs	r3, #26
 80040a0:	2218      	movs	r2, #24
 80040a2:	4694      	mov	ip, r2
 80040a4:	44bc      	add	ip, r7
 80040a6:	4463      	add	r3, ip
 80040a8:	781b      	ldrb	r3, [r3, #0]
}
 80040aa:	0018      	movs	r0, r3
 80040ac:	46bd      	mov	sp, r7
 80040ae:	b00e      	add	sp, #56	; 0x38
 80040b0:	bdb0      	pop	{r4, r5, r7, pc}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	08005818 	.word	0x08005818
 80040b8:	40021000 	.word	0x40021000
 80040bc:	003d0900 	.word	0x003d0900
 80040c0:	00f42400 	.word	0x00f42400
 80040c4:	0800583c 	.word	0x0800583c

080040c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	2201      	movs	r2, #1
 80040d6:	4013      	ands	r3, r2
 80040d8:	d00b      	beq.n	80040f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	4a4a      	ldr	r2, [pc, #296]	; (800420c <UART_AdvFeatureConfig+0x144>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	0019      	movs	r1, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	2202      	movs	r2, #2
 80040f8:	4013      	ands	r3, r2
 80040fa:	d00b      	beq.n	8004114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	4a43      	ldr	r2, [pc, #268]	; (8004210 <UART_AdvFeatureConfig+0x148>)
 8004104:	4013      	ands	r3, r2
 8004106:	0019      	movs	r1, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	2204      	movs	r2, #4
 800411a:	4013      	ands	r3, r2
 800411c:	d00b      	beq.n	8004136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	4a3b      	ldr	r2, [pc, #236]	; (8004214 <UART_AdvFeatureConfig+0x14c>)
 8004126:	4013      	ands	r3, r2
 8004128:	0019      	movs	r1, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	2208      	movs	r2, #8
 800413c:	4013      	ands	r3, r2
 800413e:	d00b      	beq.n	8004158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4a34      	ldr	r2, [pc, #208]	; (8004218 <UART_AdvFeatureConfig+0x150>)
 8004148:	4013      	ands	r3, r2
 800414a:	0019      	movs	r1, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	2210      	movs	r2, #16
 800415e:	4013      	ands	r3, r2
 8004160:	d00b      	beq.n	800417a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	4a2c      	ldr	r2, [pc, #176]	; (800421c <UART_AdvFeatureConfig+0x154>)
 800416a:	4013      	ands	r3, r2
 800416c:	0019      	movs	r1, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	2220      	movs	r2, #32
 8004180:	4013      	ands	r3, r2
 8004182:	d00b      	beq.n	800419c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	4a25      	ldr	r2, [pc, #148]	; (8004220 <UART_AdvFeatureConfig+0x158>)
 800418c:	4013      	ands	r3, r2
 800418e:	0019      	movs	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	2240      	movs	r2, #64	; 0x40
 80041a2:	4013      	ands	r3, r2
 80041a4:	d01d      	beq.n	80041e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	4a1d      	ldr	r2, [pc, #116]	; (8004224 <UART_AdvFeatureConfig+0x15c>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	0019      	movs	r1, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041c2:	2380      	movs	r3, #128	; 0x80
 80041c4:	035b      	lsls	r3, r3, #13
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d10b      	bne.n	80041e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	4a15      	ldr	r2, [pc, #84]	; (8004228 <UART_AdvFeatureConfig+0x160>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	0019      	movs	r1, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	2280      	movs	r2, #128	; 0x80
 80041e8:	4013      	ands	r3, r2
 80041ea:	d00b      	beq.n	8004204 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	4a0e      	ldr	r2, [pc, #56]	; (800422c <UART_AdvFeatureConfig+0x164>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	0019      	movs	r1, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	605a      	str	r2, [r3, #4]
  }
}
 8004204:	46c0      	nop			; (mov r8, r8)
 8004206:	46bd      	mov	sp, r7
 8004208:	b002      	add	sp, #8
 800420a:	bd80      	pop	{r7, pc}
 800420c:	fffdffff 	.word	0xfffdffff
 8004210:	fffeffff 	.word	0xfffeffff
 8004214:	fffbffff 	.word	0xfffbffff
 8004218:	ffff7fff 	.word	0xffff7fff
 800421c:	ffffefff 	.word	0xffffefff
 8004220:	ffffdfff 	.word	0xffffdfff
 8004224:	ffefffff 	.word	0xffefffff
 8004228:	ff9fffff 	.word	0xff9fffff
 800422c:	fff7ffff 	.word	0xfff7ffff

08004230 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af02      	add	r7, sp, #8
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2280      	movs	r2, #128	; 0x80
 800423c:	2100      	movs	r1, #0
 800423e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004240:	f7fd fb28 	bl	8001894 <HAL_GetTick>
 8004244:	0003      	movs	r3, r0
 8004246:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2208      	movs	r2, #8
 8004250:	4013      	ands	r3, r2
 8004252:	2b08      	cmp	r3, #8
 8004254:	d10c      	bne.n	8004270 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2280      	movs	r2, #128	; 0x80
 800425a:	0391      	lsls	r1, r2, #14
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	4a17      	ldr	r2, [pc, #92]	; (80042bc <UART_CheckIdleState+0x8c>)
 8004260:	9200      	str	r2, [sp, #0]
 8004262:	2200      	movs	r2, #0
 8004264:	f000 f82c 	bl	80042c0 <UART_WaitOnFlagUntilTimeout>
 8004268:	1e03      	subs	r3, r0, #0
 800426a:	d001      	beq.n	8004270 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e021      	b.n	80042b4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2204      	movs	r2, #4
 8004278:	4013      	ands	r3, r2
 800427a:	2b04      	cmp	r3, #4
 800427c:	d10c      	bne.n	8004298 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2280      	movs	r2, #128	; 0x80
 8004282:	03d1      	lsls	r1, r2, #15
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	4a0d      	ldr	r2, [pc, #52]	; (80042bc <UART_CheckIdleState+0x8c>)
 8004288:	9200      	str	r2, [sp, #0]
 800428a:	2200      	movs	r2, #0
 800428c:	f000 f818 	bl	80042c0 <UART_WaitOnFlagUntilTimeout>
 8004290:	1e03      	subs	r3, r0, #0
 8004292:	d001      	beq.n	8004298 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e00d      	b.n	80042b4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2220      	movs	r2, #32
 80042a2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2274      	movs	r2, #116	; 0x74
 80042ae:	2100      	movs	r1, #0
 80042b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	0018      	movs	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	b004      	add	sp, #16
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	01ffffff 	.word	0x01ffffff

080042c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b094      	sub	sp, #80	; 0x50
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	1dfb      	adds	r3, r7, #7
 80042ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d0:	e0a3      	b.n	800441a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042d4:	3301      	adds	r3, #1
 80042d6:	d100      	bne.n	80042da <UART_WaitOnFlagUntilTimeout+0x1a>
 80042d8:	e09f      	b.n	800441a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042da:	f7fd fadb 	bl	8001894 <HAL_GetTick>
 80042de:	0002      	movs	r2, r0
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d302      	bcc.n	80042f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80042ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d13d      	bne.n	800436c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f0:	f3ef 8310 	mrs	r3, PRIMASK
 80042f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042f8:	647b      	str	r3, [r7, #68]	; 0x44
 80042fa:	2301      	movs	r3, #1
 80042fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004300:	f383 8810 	msr	PRIMASK, r3
}
 8004304:	46c0      	nop			; (mov r8, r8)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	494c      	ldr	r1, [pc, #304]	; (8004444 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004312:	400a      	ands	r2, r1
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004318:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431c:	f383 8810 	msr	PRIMASK, r3
}
 8004320:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004322:	f3ef 8310 	mrs	r3, PRIMASK
 8004326:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432a:	643b      	str	r3, [r7, #64]	; 0x40
 800432c:	2301      	movs	r3, #1
 800432e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004332:	f383 8810 	msr	PRIMASK, r3
}
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2101      	movs	r1, #1
 8004344:	438a      	bics	r2, r1
 8004346:	609a      	str	r2, [r3, #8]
 8004348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800434a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800434e:	f383 8810 	msr	PRIMASK, r3
}
 8004352:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2274      	movs	r2, #116	; 0x74
 8004364:	2100      	movs	r1, #0
 8004366:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e067      	b.n	800443c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2204      	movs	r2, #4
 8004374:	4013      	ands	r3, r2
 8004376:	d050      	beq.n	800441a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	69da      	ldr	r2, [r3, #28]
 800437e:	2380      	movs	r3, #128	; 0x80
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	401a      	ands	r2, r3
 8004384:	2380      	movs	r3, #128	; 0x80
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	429a      	cmp	r2, r3
 800438a:	d146      	bne.n	800441a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2280      	movs	r2, #128	; 0x80
 8004392:	0112      	lsls	r2, r2, #4
 8004394:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004396:	f3ef 8310 	mrs	r3, PRIMASK
 800439a:	613b      	str	r3, [r7, #16]
  return(result);
 800439c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800439e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a0:	2301      	movs	r3, #1
 80043a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f383 8810 	msr	PRIMASK, r3
}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4923      	ldr	r1, [pc, #140]	; (8004444 <UART_WaitOnFlagUntilTimeout+0x184>)
 80043b8:	400a      	ands	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	f383 8810 	msr	PRIMASK, r3
}
 80043c6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c8:	f3ef 8310 	mrs	r3, PRIMASK
 80043cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80043ce:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80043d2:	2301      	movs	r3, #1
 80043d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	f383 8810 	msr	PRIMASK, r3
}
 80043dc:	46c0      	nop			; (mov r8, r8)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2101      	movs	r1, #1
 80043ea:	438a      	bics	r2, r1
 80043ec:	609a      	str	r2, [r3, #8]
 80043ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	f383 8810 	msr	PRIMASK, r3
}
 80043f8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2280      	movs	r2, #128	; 0x80
 800440a:	2120      	movs	r1, #32
 800440c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2274      	movs	r2, #116	; 0x74
 8004412:	2100      	movs	r1, #0
 8004414:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e010      	b.n	800443c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	4013      	ands	r3, r2
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	425a      	negs	r2, r3
 800442a:	4153      	adcs	r3, r2
 800442c:	b2db      	uxtb	r3, r3
 800442e:	001a      	movs	r2, r3
 8004430:	1dfb      	adds	r3, r7, #7
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d100      	bne.n	800443a <UART_WaitOnFlagUntilTimeout+0x17a>
 8004438:	e74b      	b.n	80042d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	0018      	movs	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	b014      	add	sp, #80	; 0x50
 8004442:	bd80      	pop	{r7, pc}
 8004444:	fffffe5f 	.word	0xfffffe5f

08004448 <__errno>:
 8004448:	4b01      	ldr	r3, [pc, #4]	; (8004450 <__errno+0x8>)
 800444a:	6818      	ldr	r0, [r3, #0]
 800444c:	4770      	bx	lr
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	20000028 	.word	0x20000028

08004454 <__libc_init_array>:
 8004454:	b570      	push	{r4, r5, r6, lr}
 8004456:	2600      	movs	r6, #0
 8004458:	4d0c      	ldr	r5, [pc, #48]	; (800448c <__libc_init_array+0x38>)
 800445a:	4c0d      	ldr	r4, [pc, #52]	; (8004490 <__libc_init_array+0x3c>)
 800445c:	1b64      	subs	r4, r4, r5
 800445e:	10a4      	asrs	r4, r4, #2
 8004460:	42a6      	cmp	r6, r4
 8004462:	d109      	bne.n	8004478 <__libc_init_array+0x24>
 8004464:	2600      	movs	r6, #0
 8004466:	f001 f98b 	bl	8005780 <_init>
 800446a:	4d0a      	ldr	r5, [pc, #40]	; (8004494 <__libc_init_array+0x40>)
 800446c:	4c0a      	ldr	r4, [pc, #40]	; (8004498 <__libc_init_array+0x44>)
 800446e:	1b64      	subs	r4, r4, r5
 8004470:	10a4      	asrs	r4, r4, #2
 8004472:	42a6      	cmp	r6, r4
 8004474:	d105      	bne.n	8004482 <__libc_init_array+0x2e>
 8004476:	bd70      	pop	{r4, r5, r6, pc}
 8004478:	00b3      	lsls	r3, r6, #2
 800447a:	58eb      	ldr	r3, [r5, r3]
 800447c:	4798      	blx	r3
 800447e:	3601      	adds	r6, #1
 8004480:	e7ee      	b.n	8004460 <__libc_init_array+0xc>
 8004482:	00b3      	lsls	r3, r6, #2
 8004484:	58eb      	ldr	r3, [r5, r3]
 8004486:	4798      	blx	r3
 8004488:	3601      	adds	r6, #1
 800448a:	e7f2      	b.n	8004472 <__libc_init_array+0x1e>
 800448c:	08005900 	.word	0x08005900
 8004490:	08005900 	.word	0x08005900
 8004494:	08005900 	.word	0x08005900
 8004498:	08005904 	.word	0x08005904

0800449c <memset>:
 800449c:	0003      	movs	r3, r0
 800449e:	1882      	adds	r2, r0, r2
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d100      	bne.n	80044a6 <memset+0xa>
 80044a4:	4770      	bx	lr
 80044a6:	7019      	strb	r1, [r3, #0]
 80044a8:	3301      	adds	r3, #1
 80044aa:	e7f9      	b.n	80044a0 <memset+0x4>

080044ac <iprintf>:
 80044ac:	b40f      	push	{r0, r1, r2, r3}
 80044ae:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <iprintf+0x30>)
 80044b0:	b513      	push	{r0, r1, r4, lr}
 80044b2:	681c      	ldr	r4, [r3, #0]
 80044b4:	2c00      	cmp	r4, #0
 80044b6:	d005      	beq.n	80044c4 <iprintf+0x18>
 80044b8:	69a3      	ldr	r3, [r4, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d102      	bne.n	80044c4 <iprintf+0x18>
 80044be:	0020      	movs	r0, r4
 80044c0:	f000 f890 	bl	80045e4 <__sinit>
 80044c4:	ab05      	add	r3, sp, #20
 80044c6:	0020      	movs	r0, r4
 80044c8:	9a04      	ldr	r2, [sp, #16]
 80044ca:	68a1      	ldr	r1, [r4, #8]
 80044cc:	9301      	str	r3, [sp, #4]
 80044ce:	f000 fb15 	bl	8004afc <_vfiprintf_r>
 80044d2:	bc16      	pop	{r1, r2, r4}
 80044d4:	bc08      	pop	{r3}
 80044d6:	b004      	add	sp, #16
 80044d8:	4718      	bx	r3
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	20000028 	.word	0x20000028

080044e0 <siprintf>:
 80044e0:	b40e      	push	{r1, r2, r3}
 80044e2:	b500      	push	{lr}
 80044e4:	490b      	ldr	r1, [pc, #44]	; (8004514 <siprintf+0x34>)
 80044e6:	b09c      	sub	sp, #112	; 0x70
 80044e8:	ab1d      	add	r3, sp, #116	; 0x74
 80044ea:	9002      	str	r0, [sp, #8]
 80044ec:	9006      	str	r0, [sp, #24]
 80044ee:	9107      	str	r1, [sp, #28]
 80044f0:	9104      	str	r1, [sp, #16]
 80044f2:	4809      	ldr	r0, [pc, #36]	; (8004518 <siprintf+0x38>)
 80044f4:	4909      	ldr	r1, [pc, #36]	; (800451c <siprintf+0x3c>)
 80044f6:	cb04      	ldmia	r3!, {r2}
 80044f8:	9105      	str	r1, [sp, #20]
 80044fa:	6800      	ldr	r0, [r0, #0]
 80044fc:	a902      	add	r1, sp, #8
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	f000 f9d4 	bl	80048ac <_svfiprintf_r>
 8004504:	2300      	movs	r3, #0
 8004506:	9a02      	ldr	r2, [sp, #8]
 8004508:	7013      	strb	r3, [r2, #0]
 800450a:	b01c      	add	sp, #112	; 0x70
 800450c:	bc08      	pop	{r3}
 800450e:	b003      	add	sp, #12
 8004510:	4718      	bx	r3
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	7fffffff 	.word	0x7fffffff
 8004518:	20000028 	.word	0x20000028
 800451c:	ffff0208 	.word	0xffff0208

08004520 <std>:
 8004520:	2300      	movs	r3, #0
 8004522:	b510      	push	{r4, lr}
 8004524:	0004      	movs	r4, r0
 8004526:	6003      	str	r3, [r0, #0]
 8004528:	6043      	str	r3, [r0, #4]
 800452a:	6083      	str	r3, [r0, #8]
 800452c:	8181      	strh	r1, [r0, #12]
 800452e:	6643      	str	r3, [r0, #100]	; 0x64
 8004530:	0019      	movs	r1, r3
 8004532:	81c2      	strh	r2, [r0, #14]
 8004534:	6103      	str	r3, [r0, #16]
 8004536:	6143      	str	r3, [r0, #20]
 8004538:	6183      	str	r3, [r0, #24]
 800453a:	2208      	movs	r2, #8
 800453c:	305c      	adds	r0, #92	; 0x5c
 800453e:	f7ff ffad 	bl	800449c <memset>
 8004542:	4b05      	ldr	r3, [pc, #20]	; (8004558 <std+0x38>)
 8004544:	6263      	str	r3, [r4, #36]	; 0x24
 8004546:	4b05      	ldr	r3, [pc, #20]	; (800455c <std+0x3c>)
 8004548:	6224      	str	r4, [r4, #32]
 800454a:	62a3      	str	r3, [r4, #40]	; 0x28
 800454c:	4b04      	ldr	r3, [pc, #16]	; (8004560 <std+0x40>)
 800454e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004550:	4b04      	ldr	r3, [pc, #16]	; (8004564 <std+0x44>)
 8004552:	6323      	str	r3, [r4, #48]	; 0x30
 8004554:	bd10      	pop	{r4, pc}
 8004556:	46c0      	nop			; (mov r8, r8)
 8004558:	08005099 	.word	0x08005099
 800455c:	080050c1 	.word	0x080050c1
 8004560:	080050f9 	.word	0x080050f9
 8004564:	08005125 	.word	0x08005125

08004568 <_cleanup_r>:
 8004568:	b510      	push	{r4, lr}
 800456a:	4902      	ldr	r1, [pc, #8]	; (8004574 <_cleanup_r+0xc>)
 800456c:	f000 f8ba 	bl	80046e4 <_fwalk_reent>
 8004570:	bd10      	pop	{r4, pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	08005431 	.word	0x08005431

08004578 <__sfmoreglue>:
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	2568      	movs	r5, #104	; 0x68
 800457c:	1e4a      	subs	r2, r1, #1
 800457e:	4355      	muls	r5, r2
 8004580:	000e      	movs	r6, r1
 8004582:	0029      	movs	r1, r5
 8004584:	3174      	adds	r1, #116	; 0x74
 8004586:	f000 f8d1 	bl	800472c <_malloc_r>
 800458a:	1e04      	subs	r4, r0, #0
 800458c:	d008      	beq.n	80045a0 <__sfmoreglue+0x28>
 800458e:	2100      	movs	r1, #0
 8004590:	002a      	movs	r2, r5
 8004592:	6001      	str	r1, [r0, #0]
 8004594:	6046      	str	r6, [r0, #4]
 8004596:	300c      	adds	r0, #12
 8004598:	60a0      	str	r0, [r4, #8]
 800459a:	3268      	adds	r2, #104	; 0x68
 800459c:	f7ff ff7e 	bl	800449c <memset>
 80045a0:	0020      	movs	r0, r4
 80045a2:	bd70      	pop	{r4, r5, r6, pc}

080045a4 <__sfp_lock_acquire>:
 80045a4:	b510      	push	{r4, lr}
 80045a6:	4802      	ldr	r0, [pc, #8]	; (80045b0 <__sfp_lock_acquire+0xc>)
 80045a8:	f000 f8bd 	bl	8004726 <__retarget_lock_acquire_recursive>
 80045ac:	bd10      	pop	{r4, pc}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	2000037c 	.word	0x2000037c

080045b4 <__sfp_lock_release>:
 80045b4:	b510      	push	{r4, lr}
 80045b6:	4802      	ldr	r0, [pc, #8]	; (80045c0 <__sfp_lock_release+0xc>)
 80045b8:	f000 f8b6 	bl	8004728 <__retarget_lock_release_recursive>
 80045bc:	bd10      	pop	{r4, pc}
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	2000037c 	.word	0x2000037c

080045c4 <__sinit_lock_acquire>:
 80045c4:	b510      	push	{r4, lr}
 80045c6:	4802      	ldr	r0, [pc, #8]	; (80045d0 <__sinit_lock_acquire+0xc>)
 80045c8:	f000 f8ad 	bl	8004726 <__retarget_lock_acquire_recursive>
 80045cc:	bd10      	pop	{r4, pc}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	20000377 	.word	0x20000377

080045d4 <__sinit_lock_release>:
 80045d4:	b510      	push	{r4, lr}
 80045d6:	4802      	ldr	r0, [pc, #8]	; (80045e0 <__sinit_lock_release+0xc>)
 80045d8:	f000 f8a6 	bl	8004728 <__retarget_lock_release_recursive>
 80045dc:	bd10      	pop	{r4, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	20000377 	.word	0x20000377

080045e4 <__sinit>:
 80045e4:	b513      	push	{r0, r1, r4, lr}
 80045e6:	0004      	movs	r4, r0
 80045e8:	f7ff ffec 	bl	80045c4 <__sinit_lock_acquire>
 80045ec:	69a3      	ldr	r3, [r4, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <__sinit+0x14>
 80045f2:	f7ff ffef 	bl	80045d4 <__sinit_lock_release>
 80045f6:	bd13      	pop	{r0, r1, r4, pc}
 80045f8:	64a3      	str	r3, [r4, #72]	; 0x48
 80045fa:	64e3      	str	r3, [r4, #76]	; 0x4c
 80045fc:	6523      	str	r3, [r4, #80]	; 0x50
 80045fe:	4b13      	ldr	r3, [pc, #76]	; (800464c <__sinit+0x68>)
 8004600:	4a13      	ldr	r2, [pc, #76]	; (8004650 <__sinit+0x6c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	62a2      	str	r2, [r4, #40]	; 0x28
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	42a3      	cmp	r3, r4
 800460a:	d101      	bne.n	8004610 <__sinit+0x2c>
 800460c:	2301      	movs	r3, #1
 800460e:	61a3      	str	r3, [r4, #24]
 8004610:	0020      	movs	r0, r4
 8004612:	f000 f81f 	bl	8004654 <__sfp>
 8004616:	6060      	str	r0, [r4, #4]
 8004618:	0020      	movs	r0, r4
 800461a:	f000 f81b 	bl	8004654 <__sfp>
 800461e:	60a0      	str	r0, [r4, #8]
 8004620:	0020      	movs	r0, r4
 8004622:	f000 f817 	bl	8004654 <__sfp>
 8004626:	2200      	movs	r2, #0
 8004628:	2104      	movs	r1, #4
 800462a:	60e0      	str	r0, [r4, #12]
 800462c:	6860      	ldr	r0, [r4, #4]
 800462e:	f7ff ff77 	bl	8004520 <std>
 8004632:	2201      	movs	r2, #1
 8004634:	2109      	movs	r1, #9
 8004636:	68a0      	ldr	r0, [r4, #8]
 8004638:	f7ff ff72 	bl	8004520 <std>
 800463c:	2202      	movs	r2, #2
 800463e:	2112      	movs	r1, #18
 8004640:	68e0      	ldr	r0, [r4, #12]
 8004642:	f7ff ff6d 	bl	8004520 <std>
 8004646:	2301      	movs	r3, #1
 8004648:	61a3      	str	r3, [r4, #24]
 800464a:	e7d2      	b.n	80045f2 <__sinit+0xe>
 800464c:	08005860 	.word	0x08005860
 8004650:	08004569 	.word	0x08004569

08004654 <__sfp>:
 8004654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004656:	0007      	movs	r7, r0
 8004658:	f7ff ffa4 	bl	80045a4 <__sfp_lock_acquire>
 800465c:	4b1f      	ldr	r3, [pc, #124]	; (80046dc <__sfp+0x88>)
 800465e:	681e      	ldr	r6, [r3, #0]
 8004660:	69b3      	ldr	r3, [r6, #24]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <__sfp+0x18>
 8004666:	0030      	movs	r0, r6
 8004668:	f7ff ffbc 	bl	80045e4 <__sinit>
 800466c:	3648      	adds	r6, #72	; 0x48
 800466e:	68b4      	ldr	r4, [r6, #8]
 8004670:	6873      	ldr	r3, [r6, #4]
 8004672:	3b01      	subs	r3, #1
 8004674:	d504      	bpl.n	8004680 <__sfp+0x2c>
 8004676:	6833      	ldr	r3, [r6, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d022      	beq.n	80046c2 <__sfp+0x6e>
 800467c:	6836      	ldr	r6, [r6, #0]
 800467e:	e7f6      	b.n	800466e <__sfp+0x1a>
 8004680:	220c      	movs	r2, #12
 8004682:	5ea5      	ldrsh	r5, [r4, r2]
 8004684:	2d00      	cmp	r5, #0
 8004686:	d11a      	bne.n	80046be <__sfp+0x6a>
 8004688:	0020      	movs	r0, r4
 800468a:	4b15      	ldr	r3, [pc, #84]	; (80046e0 <__sfp+0x8c>)
 800468c:	3058      	adds	r0, #88	; 0x58
 800468e:	60e3      	str	r3, [r4, #12]
 8004690:	6665      	str	r5, [r4, #100]	; 0x64
 8004692:	f000 f847 	bl	8004724 <__retarget_lock_init_recursive>
 8004696:	f7ff ff8d 	bl	80045b4 <__sfp_lock_release>
 800469a:	0020      	movs	r0, r4
 800469c:	2208      	movs	r2, #8
 800469e:	0029      	movs	r1, r5
 80046a0:	6025      	str	r5, [r4, #0]
 80046a2:	60a5      	str	r5, [r4, #8]
 80046a4:	6065      	str	r5, [r4, #4]
 80046a6:	6125      	str	r5, [r4, #16]
 80046a8:	6165      	str	r5, [r4, #20]
 80046aa:	61a5      	str	r5, [r4, #24]
 80046ac:	305c      	adds	r0, #92	; 0x5c
 80046ae:	f7ff fef5 	bl	800449c <memset>
 80046b2:	6365      	str	r5, [r4, #52]	; 0x34
 80046b4:	63a5      	str	r5, [r4, #56]	; 0x38
 80046b6:	64a5      	str	r5, [r4, #72]	; 0x48
 80046b8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80046ba:	0020      	movs	r0, r4
 80046bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046be:	3468      	adds	r4, #104	; 0x68
 80046c0:	e7d7      	b.n	8004672 <__sfp+0x1e>
 80046c2:	2104      	movs	r1, #4
 80046c4:	0038      	movs	r0, r7
 80046c6:	f7ff ff57 	bl	8004578 <__sfmoreglue>
 80046ca:	1e04      	subs	r4, r0, #0
 80046cc:	6030      	str	r0, [r6, #0]
 80046ce:	d1d5      	bne.n	800467c <__sfp+0x28>
 80046d0:	f7ff ff70 	bl	80045b4 <__sfp_lock_release>
 80046d4:	230c      	movs	r3, #12
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	e7ef      	b.n	80046ba <__sfp+0x66>
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	08005860 	.word	0x08005860
 80046e0:	ffff0001 	.word	0xffff0001

080046e4 <_fwalk_reent>:
 80046e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046e6:	0004      	movs	r4, r0
 80046e8:	0006      	movs	r6, r0
 80046ea:	2700      	movs	r7, #0
 80046ec:	9101      	str	r1, [sp, #4]
 80046ee:	3448      	adds	r4, #72	; 0x48
 80046f0:	6863      	ldr	r3, [r4, #4]
 80046f2:	68a5      	ldr	r5, [r4, #8]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	9b00      	ldr	r3, [sp, #0]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	d504      	bpl.n	8004708 <_fwalk_reent+0x24>
 80046fe:	6824      	ldr	r4, [r4, #0]
 8004700:	2c00      	cmp	r4, #0
 8004702:	d1f5      	bne.n	80046f0 <_fwalk_reent+0xc>
 8004704:	0038      	movs	r0, r7
 8004706:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004708:	89ab      	ldrh	r3, [r5, #12]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d908      	bls.n	8004720 <_fwalk_reent+0x3c>
 800470e:	220e      	movs	r2, #14
 8004710:	5eab      	ldrsh	r3, [r5, r2]
 8004712:	3301      	adds	r3, #1
 8004714:	d004      	beq.n	8004720 <_fwalk_reent+0x3c>
 8004716:	0029      	movs	r1, r5
 8004718:	0030      	movs	r0, r6
 800471a:	9b01      	ldr	r3, [sp, #4]
 800471c:	4798      	blx	r3
 800471e:	4307      	orrs	r7, r0
 8004720:	3568      	adds	r5, #104	; 0x68
 8004722:	e7e8      	b.n	80046f6 <_fwalk_reent+0x12>

08004724 <__retarget_lock_init_recursive>:
 8004724:	4770      	bx	lr

08004726 <__retarget_lock_acquire_recursive>:
 8004726:	4770      	bx	lr

08004728 <__retarget_lock_release_recursive>:
 8004728:	4770      	bx	lr
	...

0800472c <_malloc_r>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	2303      	movs	r3, #3
 8004730:	1ccd      	adds	r5, r1, #3
 8004732:	439d      	bics	r5, r3
 8004734:	3508      	adds	r5, #8
 8004736:	0006      	movs	r6, r0
 8004738:	2d0c      	cmp	r5, #12
 800473a:	d21f      	bcs.n	800477c <_malloc_r+0x50>
 800473c:	250c      	movs	r5, #12
 800473e:	42a9      	cmp	r1, r5
 8004740:	d81e      	bhi.n	8004780 <_malloc_r+0x54>
 8004742:	0030      	movs	r0, r6
 8004744:	f000 ff5c 	bl	8005600 <__malloc_lock>
 8004748:	4925      	ldr	r1, [pc, #148]	; (80047e0 <_malloc_r+0xb4>)
 800474a:	680a      	ldr	r2, [r1, #0]
 800474c:	0014      	movs	r4, r2
 800474e:	2c00      	cmp	r4, #0
 8004750:	d11a      	bne.n	8004788 <_malloc_r+0x5c>
 8004752:	4f24      	ldr	r7, [pc, #144]	; (80047e4 <_malloc_r+0xb8>)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d104      	bne.n	8004764 <_malloc_r+0x38>
 800475a:	0021      	movs	r1, r4
 800475c:	0030      	movs	r0, r6
 800475e:	f000 fc89 	bl	8005074 <_sbrk_r>
 8004762:	6038      	str	r0, [r7, #0]
 8004764:	0029      	movs	r1, r5
 8004766:	0030      	movs	r0, r6
 8004768:	f000 fc84 	bl	8005074 <_sbrk_r>
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	d12b      	bne.n	80047c8 <_malloc_r+0x9c>
 8004770:	230c      	movs	r3, #12
 8004772:	0030      	movs	r0, r6
 8004774:	6033      	str	r3, [r6, #0]
 8004776:	f000 ff4b 	bl	8005610 <__malloc_unlock>
 800477a:	e003      	b.n	8004784 <_malloc_r+0x58>
 800477c:	2d00      	cmp	r5, #0
 800477e:	dade      	bge.n	800473e <_malloc_r+0x12>
 8004780:	230c      	movs	r3, #12
 8004782:	6033      	str	r3, [r6, #0]
 8004784:	2000      	movs	r0, #0
 8004786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	1b5b      	subs	r3, r3, r5
 800478c:	d419      	bmi.n	80047c2 <_malloc_r+0x96>
 800478e:	2b0b      	cmp	r3, #11
 8004790:	d903      	bls.n	800479a <_malloc_r+0x6e>
 8004792:	6023      	str	r3, [r4, #0]
 8004794:	18e4      	adds	r4, r4, r3
 8004796:	6025      	str	r5, [r4, #0]
 8004798:	e003      	b.n	80047a2 <_malloc_r+0x76>
 800479a:	6863      	ldr	r3, [r4, #4]
 800479c:	42a2      	cmp	r2, r4
 800479e:	d10e      	bne.n	80047be <_malloc_r+0x92>
 80047a0:	600b      	str	r3, [r1, #0]
 80047a2:	0030      	movs	r0, r6
 80047a4:	f000 ff34 	bl	8005610 <__malloc_unlock>
 80047a8:	0020      	movs	r0, r4
 80047aa:	2207      	movs	r2, #7
 80047ac:	300b      	adds	r0, #11
 80047ae:	1d23      	adds	r3, r4, #4
 80047b0:	4390      	bics	r0, r2
 80047b2:	1ac2      	subs	r2, r0, r3
 80047b4:	4298      	cmp	r0, r3
 80047b6:	d0e6      	beq.n	8004786 <_malloc_r+0x5a>
 80047b8:	1a1b      	subs	r3, r3, r0
 80047ba:	50a3      	str	r3, [r4, r2]
 80047bc:	e7e3      	b.n	8004786 <_malloc_r+0x5a>
 80047be:	6053      	str	r3, [r2, #4]
 80047c0:	e7ef      	b.n	80047a2 <_malloc_r+0x76>
 80047c2:	0022      	movs	r2, r4
 80047c4:	6864      	ldr	r4, [r4, #4]
 80047c6:	e7c2      	b.n	800474e <_malloc_r+0x22>
 80047c8:	2303      	movs	r3, #3
 80047ca:	1cc4      	adds	r4, r0, #3
 80047cc:	439c      	bics	r4, r3
 80047ce:	42a0      	cmp	r0, r4
 80047d0:	d0e1      	beq.n	8004796 <_malloc_r+0x6a>
 80047d2:	1a21      	subs	r1, r4, r0
 80047d4:	0030      	movs	r0, r6
 80047d6:	f000 fc4d 	bl	8005074 <_sbrk_r>
 80047da:	1c43      	adds	r3, r0, #1
 80047dc:	d1db      	bne.n	8004796 <_malloc_r+0x6a>
 80047de:	e7c7      	b.n	8004770 <_malloc_r+0x44>
 80047e0:	20000274 	.word	0x20000274
 80047e4:	20000278 	.word	0x20000278

080047e8 <__ssputs_r>:
 80047e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ea:	688e      	ldr	r6, [r1, #8]
 80047ec:	b085      	sub	sp, #20
 80047ee:	0007      	movs	r7, r0
 80047f0:	000c      	movs	r4, r1
 80047f2:	9203      	str	r2, [sp, #12]
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	429e      	cmp	r6, r3
 80047f8:	d83c      	bhi.n	8004874 <__ssputs_r+0x8c>
 80047fa:	2390      	movs	r3, #144	; 0x90
 80047fc:	898a      	ldrh	r2, [r1, #12]
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	421a      	tst	r2, r3
 8004802:	d034      	beq.n	800486e <__ssputs_r+0x86>
 8004804:	2503      	movs	r5, #3
 8004806:	6909      	ldr	r1, [r1, #16]
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	1a5b      	subs	r3, r3, r1
 800480c:	9302      	str	r3, [sp, #8]
 800480e:	6963      	ldr	r3, [r4, #20]
 8004810:	9802      	ldr	r0, [sp, #8]
 8004812:	435d      	muls	r5, r3
 8004814:	0feb      	lsrs	r3, r5, #31
 8004816:	195d      	adds	r5, r3, r5
 8004818:	9b01      	ldr	r3, [sp, #4]
 800481a:	106d      	asrs	r5, r5, #1
 800481c:	3301      	adds	r3, #1
 800481e:	181b      	adds	r3, r3, r0
 8004820:	42ab      	cmp	r3, r5
 8004822:	d900      	bls.n	8004826 <__ssputs_r+0x3e>
 8004824:	001d      	movs	r5, r3
 8004826:	0553      	lsls	r3, r2, #21
 8004828:	d532      	bpl.n	8004890 <__ssputs_r+0xa8>
 800482a:	0029      	movs	r1, r5
 800482c:	0038      	movs	r0, r7
 800482e:	f7ff ff7d 	bl	800472c <_malloc_r>
 8004832:	1e06      	subs	r6, r0, #0
 8004834:	d109      	bne.n	800484a <__ssputs_r+0x62>
 8004836:	230c      	movs	r3, #12
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	2340      	movs	r3, #64	; 0x40
 800483c:	2001      	movs	r0, #1
 800483e:	89a2      	ldrh	r2, [r4, #12]
 8004840:	4240      	negs	r0, r0
 8004842:	4313      	orrs	r3, r2
 8004844:	81a3      	strh	r3, [r4, #12]
 8004846:	b005      	add	sp, #20
 8004848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800484a:	9a02      	ldr	r2, [sp, #8]
 800484c:	6921      	ldr	r1, [r4, #16]
 800484e:	f000 feba 	bl	80055c6 <memcpy>
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	4a14      	ldr	r2, [pc, #80]	; (80048a8 <__ssputs_r+0xc0>)
 8004856:	401a      	ands	r2, r3
 8004858:	2380      	movs	r3, #128	; 0x80
 800485a:	4313      	orrs	r3, r2
 800485c:	81a3      	strh	r3, [r4, #12]
 800485e:	9b02      	ldr	r3, [sp, #8]
 8004860:	6126      	str	r6, [r4, #16]
 8004862:	18f6      	adds	r6, r6, r3
 8004864:	6026      	str	r6, [r4, #0]
 8004866:	6165      	str	r5, [r4, #20]
 8004868:	9e01      	ldr	r6, [sp, #4]
 800486a:	1aed      	subs	r5, r5, r3
 800486c:	60a5      	str	r5, [r4, #8]
 800486e:	9b01      	ldr	r3, [sp, #4]
 8004870:	429e      	cmp	r6, r3
 8004872:	d900      	bls.n	8004876 <__ssputs_r+0x8e>
 8004874:	9e01      	ldr	r6, [sp, #4]
 8004876:	0032      	movs	r2, r6
 8004878:	9903      	ldr	r1, [sp, #12]
 800487a:	6820      	ldr	r0, [r4, #0]
 800487c:	f000 feac 	bl	80055d8 <memmove>
 8004880:	68a3      	ldr	r3, [r4, #8]
 8004882:	2000      	movs	r0, #0
 8004884:	1b9b      	subs	r3, r3, r6
 8004886:	60a3      	str	r3, [r4, #8]
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	199e      	adds	r6, r3, r6
 800488c:	6026      	str	r6, [r4, #0]
 800488e:	e7da      	b.n	8004846 <__ssputs_r+0x5e>
 8004890:	002a      	movs	r2, r5
 8004892:	0038      	movs	r0, r7
 8004894:	f000 ff0e 	bl	80056b4 <_realloc_r>
 8004898:	1e06      	subs	r6, r0, #0
 800489a:	d1e0      	bne.n	800485e <__ssputs_r+0x76>
 800489c:	0038      	movs	r0, r7
 800489e:	6921      	ldr	r1, [r4, #16]
 80048a0:	f000 febe 	bl	8005620 <_free_r>
 80048a4:	e7c7      	b.n	8004836 <__ssputs_r+0x4e>
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	fffffb7f 	.word	0xfffffb7f

080048ac <_svfiprintf_r>:
 80048ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ae:	b0a1      	sub	sp, #132	; 0x84
 80048b0:	9003      	str	r0, [sp, #12]
 80048b2:	001d      	movs	r5, r3
 80048b4:	898b      	ldrh	r3, [r1, #12]
 80048b6:	000f      	movs	r7, r1
 80048b8:	0016      	movs	r6, r2
 80048ba:	061b      	lsls	r3, r3, #24
 80048bc:	d511      	bpl.n	80048e2 <_svfiprintf_r+0x36>
 80048be:	690b      	ldr	r3, [r1, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10e      	bne.n	80048e2 <_svfiprintf_r+0x36>
 80048c4:	2140      	movs	r1, #64	; 0x40
 80048c6:	f7ff ff31 	bl	800472c <_malloc_r>
 80048ca:	6038      	str	r0, [r7, #0]
 80048cc:	6138      	str	r0, [r7, #16]
 80048ce:	2800      	cmp	r0, #0
 80048d0:	d105      	bne.n	80048de <_svfiprintf_r+0x32>
 80048d2:	230c      	movs	r3, #12
 80048d4:	9a03      	ldr	r2, [sp, #12]
 80048d6:	3801      	subs	r0, #1
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	b021      	add	sp, #132	; 0x84
 80048dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048de:	2340      	movs	r3, #64	; 0x40
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	2300      	movs	r3, #0
 80048e4:	ac08      	add	r4, sp, #32
 80048e6:	6163      	str	r3, [r4, #20]
 80048e8:	3320      	adds	r3, #32
 80048ea:	7663      	strb	r3, [r4, #25]
 80048ec:	3310      	adds	r3, #16
 80048ee:	76a3      	strb	r3, [r4, #26]
 80048f0:	9507      	str	r5, [sp, #28]
 80048f2:	0035      	movs	r5, r6
 80048f4:	782b      	ldrb	r3, [r5, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <_svfiprintf_r+0x52>
 80048fa:	2b25      	cmp	r3, #37	; 0x25
 80048fc:	d147      	bne.n	800498e <_svfiprintf_r+0xe2>
 80048fe:	1bab      	subs	r3, r5, r6
 8004900:	9305      	str	r3, [sp, #20]
 8004902:	42b5      	cmp	r5, r6
 8004904:	d00c      	beq.n	8004920 <_svfiprintf_r+0x74>
 8004906:	0032      	movs	r2, r6
 8004908:	0039      	movs	r1, r7
 800490a:	9803      	ldr	r0, [sp, #12]
 800490c:	f7ff ff6c 	bl	80047e8 <__ssputs_r>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d100      	bne.n	8004916 <_svfiprintf_r+0x6a>
 8004914:	e0ae      	b.n	8004a74 <_svfiprintf_r+0x1c8>
 8004916:	6962      	ldr	r2, [r4, #20]
 8004918:	9b05      	ldr	r3, [sp, #20]
 800491a:	4694      	mov	ip, r2
 800491c:	4463      	add	r3, ip
 800491e:	6163      	str	r3, [r4, #20]
 8004920:	782b      	ldrb	r3, [r5, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d100      	bne.n	8004928 <_svfiprintf_r+0x7c>
 8004926:	e0a5      	b.n	8004a74 <_svfiprintf_r+0x1c8>
 8004928:	2201      	movs	r2, #1
 800492a:	2300      	movs	r3, #0
 800492c:	4252      	negs	r2, r2
 800492e:	6062      	str	r2, [r4, #4]
 8004930:	a904      	add	r1, sp, #16
 8004932:	3254      	adds	r2, #84	; 0x54
 8004934:	1852      	adds	r2, r2, r1
 8004936:	1c6e      	adds	r6, r5, #1
 8004938:	6023      	str	r3, [r4, #0]
 800493a:	60e3      	str	r3, [r4, #12]
 800493c:	60a3      	str	r3, [r4, #8]
 800493e:	7013      	strb	r3, [r2, #0]
 8004940:	65a3      	str	r3, [r4, #88]	; 0x58
 8004942:	2205      	movs	r2, #5
 8004944:	7831      	ldrb	r1, [r6, #0]
 8004946:	4854      	ldr	r0, [pc, #336]	; (8004a98 <_svfiprintf_r+0x1ec>)
 8004948:	f000 fe32 	bl	80055b0 <memchr>
 800494c:	1c75      	adds	r5, r6, #1
 800494e:	2800      	cmp	r0, #0
 8004950:	d11f      	bne.n	8004992 <_svfiprintf_r+0xe6>
 8004952:	6822      	ldr	r2, [r4, #0]
 8004954:	06d3      	lsls	r3, r2, #27
 8004956:	d504      	bpl.n	8004962 <_svfiprintf_r+0xb6>
 8004958:	2353      	movs	r3, #83	; 0x53
 800495a:	a904      	add	r1, sp, #16
 800495c:	185b      	adds	r3, r3, r1
 800495e:	2120      	movs	r1, #32
 8004960:	7019      	strb	r1, [r3, #0]
 8004962:	0713      	lsls	r3, r2, #28
 8004964:	d504      	bpl.n	8004970 <_svfiprintf_r+0xc4>
 8004966:	2353      	movs	r3, #83	; 0x53
 8004968:	a904      	add	r1, sp, #16
 800496a:	185b      	adds	r3, r3, r1
 800496c:	212b      	movs	r1, #43	; 0x2b
 800496e:	7019      	strb	r1, [r3, #0]
 8004970:	7833      	ldrb	r3, [r6, #0]
 8004972:	2b2a      	cmp	r3, #42	; 0x2a
 8004974:	d016      	beq.n	80049a4 <_svfiprintf_r+0xf8>
 8004976:	0035      	movs	r5, r6
 8004978:	2100      	movs	r1, #0
 800497a:	200a      	movs	r0, #10
 800497c:	68e3      	ldr	r3, [r4, #12]
 800497e:	782a      	ldrb	r2, [r5, #0]
 8004980:	1c6e      	adds	r6, r5, #1
 8004982:	3a30      	subs	r2, #48	; 0x30
 8004984:	2a09      	cmp	r2, #9
 8004986:	d94e      	bls.n	8004a26 <_svfiprintf_r+0x17a>
 8004988:	2900      	cmp	r1, #0
 800498a:	d111      	bne.n	80049b0 <_svfiprintf_r+0x104>
 800498c:	e017      	b.n	80049be <_svfiprintf_r+0x112>
 800498e:	3501      	adds	r5, #1
 8004990:	e7b0      	b.n	80048f4 <_svfiprintf_r+0x48>
 8004992:	4b41      	ldr	r3, [pc, #260]	; (8004a98 <_svfiprintf_r+0x1ec>)
 8004994:	6822      	ldr	r2, [r4, #0]
 8004996:	1ac0      	subs	r0, r0, r3
 8004998:	2301      	movs	r3, #1
 800499a:	4083      	lsls	r3, r0
 800499c:	4313      	orrs	r3, r2
 800499e:	002e      	movs	r6, r5
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	e7ce      	b.n	8004942 <_svfiprintf_r+0x96>
 80049a4:	9b07      	ldr	r3, [sp, #28]
 80049a6:	1d19      	adds	r1, r3, #4
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	9107      	str	r1, [sp, #28]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	db01      	blt.n	80049b4 <_svfiprintf_r+0x108>
 80049b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80049b2:	e004      	b.n	80049be <_svfiprintf_r+0x112>
 80049b4:	425b      	negs	r3, r3
 80049b6:	60e3      	str	r3, [r4, #12]
 80049b8:	2302      	movs	r3, #2
 80049ba:	4313      	orrs	r3, r2
 80049bc:	6023      	str	r3, [r4, #0]
 80049be:	782b      	ldrb	r3, [r5, #0]
 80049c0:	2b2e      	cmp	r3, #46	; 0x2e
 80049c2:	d10a      	bne.n	80049da <_svfiprintf_r+0x12e>
 80049c4:	786b      	ldrb	r3, [r5, #1]
 80049c6:	2b2a      	cmp	r3, #42	; 0x2a
 80049c8:	d135      	bne.n	8004a36 <_svfiprintf_r+0x18a>
 80049ca:	9b07      	ldr	r3, [sp, #28]
 80049cc:	3502      	adds	r5, #2
 80049ce:	1d1a      	adds	r2, r3, #4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	9207      	str	r2, [sp, #28]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	db2b      	blt.n	8004a30 <_svfiprintf_r+0x184>
 80049d8:	9309      	str	r3, [sp, #36]	; 0x24
 80049da:	4e30      	ldr	r6, [pc, #192]	; (8004a9c <_svfiprintf_r+0x1f0>)
 80049dc:	2203      	movs	r2, #3
 80049de:	0030      	movs	r0, r6
 80049e0:	7829      	ldrb	r1, [r5, #0]
 80049e2:	f000 fde5 	bl	80055b0 <memchr>
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d006      	beq.n	80049f8 <_svfiprintf_r+0x14c>
 80049ea:	2340      	movs	r3, #64	; 0x40
 80049ec:	1b80      	subs	r0, r0, r6
 80049ee:	4083      	lsls	r3, r0
 80049f0:	6822      	ldr	r2, [r4, #0]
 80049f2:	3501      	adds	r5, #1
 80049f4:	4313      	orrs	r3, r2
 80049f6:	6023      	str	r3, [r4, #0]
 80049f8:	7829      	ldrb	r1, [r5, #0]
 80049fa:	2206      	movs	r2, #6
 80049fc:	4828      	ldr	r0, [pc, #160]	; (8004aa0 <_svfiprintf_r+0x1f4>)
 80049fe:	1c6e      	adds	r6, r5, #1
 8004a00:	7621      	strb	r1, [r4, #24]
 8004a02:	f000 fdd5 	bl	80055b0 <memchr>
 8004a06:	2800      	cmp	r0, #0
 8004a08:	d03c      	beq.n	8004a84 <_svfiprintf_r+0x1d8>
 8004a0a:	4b26      	ldr	r3, [pc, #152]	; (8004aa4 <_svfiprintf_r+0x1f8>)
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d125      	bne.n	8004a5c <_svfiprintf_r+0x1b0>
 8004a10:	2207      	movs	r2, #7
 8004a12:	9b07      	ldr	r3, [sp, #28]
 8004a14:	3307      	adds	r3, #7
 8004a16:	4393      	bics	r3, r2
 8004a18:	3308      	adds	r3, #8
 8004a1a:	9307      	str	r3, [sp, #28]
 8004a1c:	6963      	ldr	r3, [r4, #20]
 8004a1e:	9a04      	ldr	r2, [sp, #16]
 8004a20:	189b      	adds	r3, r3, r2
 8004a22:	6163      	str	r3, [r4, #20]
 8004a24:	e765      	b.n	80048f2 <_svfiprintf_r+0x46>
 8004a26:	4343      	muls	r3, r0
 8004a28:	0035      	movs	r5, r6
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	189b      	adds	r3, r3, r2
 8004a2e:	e7a6      	b.n	800497e <_svfiprintf_r+0xd2>
 8004a30:	2301      	movs	r3, #1
 8004a32:	425b      	negs	r3, r3
 8004a34:	e7d0      	b.n	80049d8 <_svfiprintf_r+0x12c>
 8004a36:	2300      	movs	r3, #0
 8004a38:	200a      	movs	r0, #10
 8004a3a:	001a      	movs	r2, r3
 8004a3c:	3501      	adds	r5, #1
 8004a3e:	6063      	str	r3, [r4, #4]
 8004a40:	7829      	ldrb	r1, [r5, #0]
 8004a42:	1c6e      	adds	r6, r5, #1
 8004a44:	3930      	subs	r1, #48	; 0x30
 8004a46:	2909      	cmp	r1, #9
 8004a48:	d903      	bls.n	8004a52 <_svfiprintf_r+0x1a6>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0c5      	beq.n	80049da <_svfiprintf_r+0x12e>
 8004a4e:	9209      	str	r2, [sp, #36]	; 0x24
 8004a50:	e7c3      	b.n	80049da <_svfiprintf_r+0x12e>
 8004a52:	4342      	muls	r2, r0
 8004a54:	0035      	movs	r5, r6
 8004a56:	2301      	movs	r3, #1
 8004a58:	1852      	adds	r2, r2, r1
 8004a5a:	e7f1      	b.n	8004a40 <_svfiprintf_r+0x194>
 8004a5c:	ab07      	add	r3, sp, #28
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	003a      	movs	r2, r7
 8004a62:	0021      	movs	r1, r4
 8004a64:	4b10      	ldr	r3, [pc, #64]	; (8004aa8 <_svfiprintf_r+0x1fc>)
 8004a66:	9803      	ldr	r0, [sp, #12]
 8004a68:	e000      	b.n	8004a6c <_svfiprintf_r+0x1c0>
 8004a6a:	bf00      	nop
 8004a6c:	9004      	str	r0, [sp, #16]
 8004a6e:	9b04      	ldr	r3, [sp, #16]
 8004a70:	3301      	adds	r3, #1
 8004a72:	d1d3      	bne.n	8004a1c <_svfiprintf_r+0x170>
 8004a74:	89bb      	ldrh	r3, [r7, #12]
 8004a76:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004a78:	065b      	lsls	r3, r3, #25
 8004a7a:	d400      	bmi.n	8004a7e <_svfiprintf_r+0x1d2>
 8004a7c:	e72d      	b.n	80048da <_svfiprintf_r+0x2e>
 8004a7e:	2001      	movs	r0, #1
 8004a80:	4240      	negs	r0, r0
 8004a82:	e72a      	b.n	80048da <_svfiprintf_r+0x2e>
 8004a84:	ab07      	add	r3, sp, #28
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	003a      	movs	r2, r7
 8004a8a:	0021      	movs	r1, r4
 8004a8c:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <_svfiprintf_r+0x1fc>)
 8004a8e:	9803      	ldr	r0, [sp, #12]
 8004a90:	f000 f9de 	bl	8004e50 <_printf_i>
 8004a94:	e7ea      	b.n	8004a6c <_svfiprintf_r+0x1c0>
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	080058c4 	.word	0x080058c4
 8004a9c:	080058ca 	.word	0x080058ca
 8004aa0:	080058ce 	.word	0x080058ce
 8004aa4:	00000000 	.word	0x00000000
 8004aa8:	080047e9 	.word	0x080047e9

08004aac <__sfputc_r>:
 8004aac:	6893      	ldr	r3, [r2, #8]
 8004aae:	b510      	push	{r4, lr}
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	6093      	str	r3, [r2, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	da04      	bge.n	8004ac2 <__sfputc_r+0x16>
 8004ab8:	6994      	ldr	r4, [r2, #24]
 8004aba:	42a3      	cmp	r3, r4
 8004abc:	db07      	blt.n	8004ace <__sfputc_r+0x22>
 8004abe:	290a      	cmp	r1, #10
 8004ac0:	d005      	beq.n	8004ace <__sfputc_r+0x22>
 8004ac2:	6813      	ldr	r3, [r2, #0]
 8004ac4:	1c58      	adds	r0, r3, #1
 8004ac6:	6010      	str	r0, [r2, #0]
 8004ac8:	7019      	strb	r1, [r3, #0]
 8004aca:	0008      	movs	r0, r1
 8004acc:	bd10      	pop	{r4, pc}
 8004ace:	f000 fb2f 	bl	8005130 <__swbuf_r>
 8004ad2:	0001      	movs	r1, r0
 8004ad4:	e7f9      	b.n	8004aca <__sfputc_r+0x1e>

08004ad6 <__sfputs_r>:
 8004ad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad8:	0006      	movs	r6, r0
 8004ada:	000f      	movs	r7, r1
 8004adc:	0014      	movs	r4, r2
 8004ade:	18d5      	adds	r5, r2, r3
 8004ae0:	42ac      	cmp	r4, r5
 8004ae2:	d101      	bne.n	8004ae8 <__sfputs_r+0x12>
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	e007      	b.n	8004af8 <__sfputs_r+0x22>
 8004ae8:	7821      	ldrb	r1, [r4, #0]
 8004aea:	003a      	movs	r2, r7
 8004aec:	0030      	movs	r0, r6
 8004aee:	f7ff ffdd 	bl	8004aac <__sfputc_r>
 8004af2:	3401      	adds	r4, #1
 8004af4:	1c43      	adds	r3, r0, #1
 8004af6:	d1f3      	bne.n	8004ae0 <__sfputs_r+0xa>
 8004af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004afc <_vfiprintf_r>:
 8004afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004afe:	b0a1      	sub	sp, #132	; 0x84
 8004b00:	0006      	movs	r6, r0
 8004b02:	000c      	movs	r4, r1
 8004b04:	001f      	movs	r7, r3
 8004b06:	9203      	str	r2, [sp, #12]
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d004      	beq.n	8004b16 <_vfiprintf_r+0x1a>
 8004b0c:	6983      	ldr	r3, [r0, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <_vfiprintf_r+0x1a>
 8004b12:	f7ff fd67 	bl	80045e4 <__sinit>
 8004b16:	4b8e      	ldr	r3, [pc, #568]	; (8004d50 <_vfiprintf_r+0x254>)
 8004b18:	429c      	cmp	r4, r3
 8004b1a:	d11c      	bne.n	8004b56 <_vfiprintf_r+0x5a>
 8004b1c:	6874      	ldr	r4, [r6, #4]
 8004b1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b20:	07db      	lsls	r3, r3, #31
 8004b22:	d405      	bmi.n	8004b30 <_vfiprintf_r+0x34>
 8004b24:	89a3      	ldrh	r3, [r4, #12]
 8004b26:	059b      	lsls	r3, r3, #22
 8004b28:	d402      	bmi.n	8004b30 <_vfiprintf_r+0x34>
 8004b2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b2c:	f7ff fdfb 	bl	8004726 <__retarget_lock_acquire_recursive>
 8004b30:	89a3      	ldrh	r3, [r4, #12]
 8004b32:	071b      	lsls	r3, r3, #28
 8004b34:	d502      	bpl.n	8004b3c <_vfiprintf_r+0x40>
 8004b36:	6923      	ldr	r3, [r4, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d11d      	bne.n	8004b78 <_vfiprintf_r+0x7c>
 8004b3c:	0021      	movs	r1, r4
 8004b3e:	0030      	movs	r0, r6
 8004b40:	f000 fb60 	bl	8005204 <__swsetup_r>
 8004b44:	2800      	cmp	r0, #0
 8004b46:	d017      	beq.n	8004b78 <_vfiprintf_r+0x7c>
 8004b48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b4a:	07db      	lsls	r3, r3, #31
 8004b4c:	d50d      	bpl.n	8004b6a <_vfiprintf_r+0x6e>
 8004b4e:	2001      	movs	r0, #1
 8004b50:	4240      	negs	r0, r0
 8004b52:	b021      	add	sp, #132	; 0x84
 8004b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b56:	4b7f      	ldr	r3, [pc, #508]	; (8004d54 <_vfiprintf_r+0x258>)
 8004b58:	429c      	cmp	r4, r3
 8004b5a:	d101      	bne.n	8004b60 <_vfiprintf_r+0x64>
 8004b5c:	68b4      	ldr	r4, [r6, #8]
 8004b5e:	e7de      	b.n	8004b1e <_vfiprintf_r+0x22>
 8004b60:	4b7d      	ldr	r3, [pc, #500]	; (8004d58 <_vfiprintf_r+0x25c>)
 8004b62:	429c      	cmp	r4, r3
 8004b64:	d1db      	bne.n	8004b1e <_vfiprintf_r+0x22>
 8004b66:	68f4      	ldr	r4, [r6, #12]
 8004b68:	e7d9      	b.n	8004b1e <_vfiprintf_r+0x22>
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	059b      	lsls	r3, r3, #22
 8004b6e:	d4ee      	bmi.n	8004b4e <_vfiprintf_r+0x52>
 8004b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b72:	f7ff fdd9 	bl	8004728 <__retarget_lock_release_recursive>
 8004b76:	e7ea      	b.n	8004b4e <_vfiprintf_r+0x52>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	ad08      	add	r5, sp, #32
 8004b7c:	616b      	str	r3, [r5, #20]
 8004b7e:	3320      	adds	r3, #32
 8004b80:	766b      	strb	r3, [r5, #25]
 8004b82:	3310      	adds	r3, #16
 8004b84:	76ab      	strb	r3, [r5, #26]
 8004b86:	9707      	str	r7, [sp, #28]
 8004b88:	9f03      	ldr	r7, [sp, #12]
 8004b8a:	783b      	ldrb	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <_vfiprintf_r+0x98>
 8004b90:	2b25      	cmp	r3, #37	; 0x25
 8004b92:	d14e      	bne.n	8004c32 <_vfiprintf_r+0x136>
 8004b94:	9b03      	ldr	r3, [sp, #12]
 8004b96:	1afb      	subs	r3, r7, r3
 8004b98:	9305      	str	r3, [sp, #20]
 8004b9a:	9b03      	ldr	r3, [sp, #12]
 8004b9c:	429f      	cmp	r7, r3
 8004b9e:	d00d      	beq.n	8004bbc <_vfiprintf_r+0xc0>
 8004ba0:	9b05      	ldr	r3, [sp, #20]
 8004ba2:	0021      	movs	r1, r4
 8004ba4:	0030      	movs	r0, r6
 8004ba6:	9a03      	ldr	r2, [sp, #12]
 8004ba8:	f7ff ff95 	bl	8004ad6 <__sfputs_r>
 8004bac:	1c43      	adds	r3, r0, #1
 8004bae:	d100      	bne.n	8004bb2 <_vfiprintf_r+0xb6>
 8004bb0:	e0b5      	b.n	8004d1e <_vfiprintf_r+0x222>
 8004bb2:	696a      	ldr	r2, [r5, #20]
 8004bb4:	9b05      	ldr	r3, [sp, #20]
 8004bb6:	4694      	mov	ip, r2
 8004bb8:	4463      	add	r3, ip
 8004bba:	616b      	str	r3, [r5, #20]
 8004bbc:	783b      	ldrb	r3, [r7, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d100      	bne.n	8004bc4 <_vfiprintf_r+0xc8>
 8004bc2:	e0ac      	b.n	8004d1e <_vfiprintf_r+0x222>
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	1c7b      	adds	r3, r7, #1
 8004bc8:	9303      	str	r3, [sp, #12]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	4252      	negs	r2, r2
 8004bce:	606a      	str	r2, [r5, #4]
 8004bd0:	a904      	add	r1, sp, #16
 8004bd2:	3254      	adds	r2, #84	; 0x54
 8004bd4:	1852      	adds	r2, r2, r1
 8004bd6:	602b      	str	r3, [r5, #0]
 8004bd8:	60eb      	str	r3, [r5, #12]
 8004bda:	60ab      	str	r3, [r5, #8]
 8004bdc:	7013      	strb	r3, [r2, #0]
 8004bde:	65ab      	str	r3, [r5, #88]	; 0x58
 8004be0:	9b03      	ldr	r3, [sp, #12]
 8004be2:	2205      	movs	r2, #5
 8004be4:	7819      	ldrb	r1, [r3, #0]
 8004be6:	485d      	ldr	r0, [pc, #372]	; (8004d5c <_vfiprintf_r+0x260>)
 8004be8:	f000 fce2 	bl	80055b0 <memchr>
 8004bec:	9b03      	ldr	r3, [sp, #12]
 8004bee:	1c5f      	adds	r7, r3, #1
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	d120      	bne.n	8004c36 <_vfiprintf_r+0x13a>
 8004bf4:	682a      	ldr	r2, [r5, #0]
 8004bf6:	06d3      	lsls	r3, r2, #27
 8004bf8:	d504      	bpl.n	8004c04 <_vfiprintf_r+0x108>
 8004bfa:	2353      	movs	r3, #83	; 0x53
 8004bfc:	a904      	add	r1, sp, #16
 8004bfe:	185b      	adds	r3, r3, r1
 8004c00:	2120      	movs	r1, #32
 8004c02:	7019      	strb	r1, [r3, #0]
 8004c04:	0713      	lsls	r3, r2, #28
 8004c06:	d504      	bpl.n	8004c12 <_vfiprintf_r+0x116>
 8004c08:	2353      	movs	r3, #83	; 0x53
 8004c0a:	a904      	add	r1, sp, #16
 8004c0c:	185b      	adds	r3, r3, r1
 8004c0e:	212b      	movs	r1, #43	; 0x2b
 8004c10:	7019      	strb	r1, [r3, #0]
 8004c12:	9b03      	ldr	r3, [sp, #12]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b2a      	cmp	r3, #42	; 0x2a
 8004c18:	d016      	beq.n	8004c48 <_vfiprintf_r+0x14c>
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	68eb      	ldr	r3, [r5, #12]
 8004c1e:	9f03      	ldr	r7, [sp, #12]
 8004c20:	783a      	ldrb	r2, [r7, #0]
 8004c22:	1c78      	adds	r0, r7, #1
 8004c24:	3a30      	subs	r2, #48	; 0x30
 8004c26:	4684      	mov	ip, r0
 8004c28:	2a09      	cmp	r2, #9
 8004c2a:	d94f      	bls.n	8004ccc <_vfiprintf_r+0x1d0>
 8004c2c:	2900      	cmp	r1, #0
 8004c2e:	d111      	bne.n	8004c54 <_vfiprintf_r+0x158>
 8004c30:	e017      	b.n	8004c62 <_vfiprintf_r+0x166>
 8004c32:	3701      	adds	r7, #1
 8004c34:	e7a9      	b.n	8004b8a <_vfiprintf_r+0x8e>
 8004c36:	4b49      	ldr	r3, [pc, #292]	; (8004d5c <_vfiprintf_r+0x260>)
 8004c38:	682a      	ldr	r2, [r5, #0]
 8004c3a:	1ac0      	subs	r0, r0, r3
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	4083      	lsls	r3, r0
 8004c40:	4313      	orrs	r3, r2
 8004c42:	602b      	str	r3, [r5, #0]
 8004c44:	9703      	str	r7, [sp, #12]
 8004c46:	e7cb      	b.n	8004be0 <_vfiprintf_r+0xe4>
 8004c48:	9b07      	ldr	r3, [sp, #28]
 8004c4a:	1d19      	adds	r1, r3, #4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	9107      	str	r1, [sp, #28]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	db01      	blt.n	8004c58 <_vfiprintf_r+0x15c>
 8004c54:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c56:	e004      	b.n	8004c62 <_vfiprintf_r+0x166>
 8004c58:	425b      	negs	r3, r3
 8004c5a:	60eb      	str	r3, [r5, #12]
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	602b      	str	r3, [r5, #0]
 8004c62:	783b      	ldrb	r3, [r7, #0]
 8004c64:	2b2e      	cmp	r3, #46	; 0x2e
 8004c66:	d10a      	bne.n	8004c7e <_vfiprintf_r+0x182>
 8004c68:	787b      	ldrb	r3, [r7, #1]
 8004c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c6c:	d137      	bne.n	8004cde <_vfiprintf_r+0x1e2>
 8004c6e:	9b07      	ldr	r3, [sp, #28]
 8004c70:	3702      	adds	r7, #2
 8004c72:	1d1a      	adds	r2, r3, #4
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	9207      	str	r2, [sp, #28]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	db2d      	blt.n	8004cd8 <_vfiprintf_r+0x1dc>
 8004c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c7e:	2203      	movs	r2, #3
 8004c80:	7839      	ldrb	r1, [r7, #0]
 8004c82:	4837      	ldr	r0, [pc, #220]	; (8004d60 <_vfiprintf_r+0x264>)
 8004c84:	f000 fc94 	bl	80055b0 <memchr>
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	d007      	beq.n	8004c9c <_vfiprintf_r+0x1a0>
 8004c8c:	4b34      	ldr	r3, [pc, #208]	; (8004d60 <_vfiprintf_r+0x264>)
 8004c8e:	682a      	ldr	r2, [r5, #0]
 8004c90:	1ac0      	subs	r0, r0, r3
 8004c92:	2340      	movs	r3, #64	; 0x40
 8004c94:	4083      	lsls	r3, r0
 8004c96:	4313      	orrs	r3, r2
 8004c98:	3701      	adds	r7, #1
 8004c9a:	602b      	str	r3, [r5, #0]
 8004c9c:	7839      	ldrb	r1, [r7, #0]
 8004c9e:	1c7b      	adds	r3, r7, #1
 8004ca0:	2206      	movs	r2, #6
 8004ca2:	4830      	ldr	r0, [pc, #192]	; (8004d64 <_vfiprintf_r+0x268>)
 8004ca4:	9303      	str	r3, [sp, #12]
 8004ca6:	7629      	strb	r1, [r5, #24]
 8004ca8:	f000 fc82 	bl	80055b0 <memchr>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d045      	beq.n	8004d3c <_vfiprintf_r+0x240>
 8004cb0:	4b2d      	ldr	r3, [pc, #180]	; (8004d68 <_vfiprintf_r+0x26c>)
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d127      	bne.n	8004d06 <_vfiprintf_r+0x20a>
 8004cb6:	2207      	movs	r2, #7
 8004cb8:	9b07      	ldr	r3, [sp, #28]
 8004cba:	3307      	adds	r3, #7
 8004cbc:	4393      	bics	r3, r2
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	9307      	str	r3, [sp, #28]
 8004cc2:	696b      	ldr	r3, [r5, #20]
 8004cc4:	9a04      	ldr	r2, [sp, #16]
 8004cc6:	189b      	adds	r3, r3, r2
 8004cc8:	616b      	str	r3, [r5, #20]
 8004cca:	e75d      	b.n	8004b88 <_vfiprintf_r+0x8c>
 8004ccc:	210a      	movs	r1, #10
 8004cce:	434b      	muls	r3, r1
 8004cd0:	4667      	mov	r7, ip
 8004cd2:	189b      	adds	r3, r3, r2
 8004cd4:	3909      	subs	r1, #9
 8004cd6:	e7a3      	b.n	8004c20 <_vfiprintf_r+0x124>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	425b      	negs	r3, r3
 8004cdc:	e7ce      	b.n	8004c7c <_vfiprintf_r+0x180>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	001a      	movs	r2, r3
 8004ce2:	3701      	adds	r7, #1
 8004ce4:	606b      	str	r3, [r5, #4]
 8004ce6:	7839      	ldrb	r1, [r7, #0]
 8004ce8:	1c78      	adds	r0, r7, #1
 8004cea:	3930      	subs	r1, #48	; 0x30
 8004cec:	4684      	mov	ip, r0
 8004cee:	2909      	cmp	r1, #9
 8004cf0:	d903      	bls.n	8004cfa <_vfiprintf_r+0x1fe>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0c3      	beq.n	8004c7e <_vfiprintf_r+0x182>
 8004cf6:	9209      	str	r2, [sp, #36]	; 0x24
 8004cf8:	e7c1      	b.n	8004c7e <_vfiprintf_r+0x182>
 8004cfa:	230a      	movs	r3, #10
 8004cfc:	435a      	muls	r2, r3
 8004cfe:	4667      	mov	r7, ip
 8004d00:	1852      	adds	r2, r2, r1
 8004d02:	3b09      	subs	r3, #9
 8004d04:	e7ef      	b.n	8004ce6 <_vfiprintf_r+0x1ea>
 8004d06:	ab07      	add	r3, sp, #28
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	0022      	movs	r2, r4
 8004d0c:	0029      	movs	r1, r5
 8004d0e:	0030      	movs	r0, r6
 8004d10:	4b16      	ldr	r3, [pc, #88]	; (8004d6c <_vfiprintf_r+0x270>)
 8004d12:	e000      	b.n	8004d16 <_vfiprintf_r+0x21a>
 8004d14:	bf00      	nop
 8004d16:	9004      	str	r0, [sp, #16]
 8004d18:	9b04      	ldr	r3, [sp, #16]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	d1d1      	bne.n	8004cc2 <_vfiprintf_r+0x1c6>
 8004d1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d20:	07db      	lsls	r3, r3, #31
 8004d22:	d405      	bmi.n	8004d30 <_vfiprintf_r+0x234>
 8004d24:	89a3      	ldrh	r3, [r4, #12]
 8004d26:	059b      	lsls	r3, r3, #22
 8004d28:	d402      	bmi.n	8004d30 <_vfiprintf_r+0x234>
 8004d2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d2c:	f7ff fcfc 	bl	8004728 <__retarget_lock_release_recursive>
 8004d30:	89a3      	ldrh	r3, [r4, #12]
 8004d32:	065b      	lsls	r3, r3, #25
 8004d34:	d500      	bpl.n	8004d38 <_vfiprintf_r+0x23c>
 8004d36:	e70a      	b.n	8004b4e <_vfiprintf_r+0x52>
 8004d38:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004d3a:	e70a      	b.n	8004b52 <_vfiprintf_r+0x56>
 8004d3c:	ab07      	add	r3, sp, #28
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	0022      	movs	r2, r4
 8004d42:	0029      	movs	r1, r5
 8004d44:	0030      	movs	r0, r6
 8004d46:	4b09      	ldr	r3, [pc, #36]	; (8004d6c <_vfiprintf_r+0x270>)
 8004d48:	f000 f882 	bl	8004e50 <_printf_i>
 8004d4c:	e7e3      	b.n	8004d16 <_vfiprintf_r+0x21a>
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	08005884 	.word	0x08005884
 8004d54:	080058a4 	.word	0x080058a4
 8004d58:	08005864 	.word	0x08005864
 8004d5c:	080058c4 	.word	0x080058c4
 8004d60:	080058ca 	.word	0x080058ca
 8004d64:	080058ce 	.word	0x080058ce
 8004d68:	00000000 	.word	0x00000000
 8004d6c:	08004ad7 	.word	0x08004ad7

08004d70 <_printf_common>:
 8004d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d72:	0015      	movs	r5, r2
 8004d74:	9301      	str	r3, [sp, #4]
 8004d76:	688a      	ldr	r2, [r1, #8]
 8004d78:	690b      	ldr	r3, [r1, #16]
 8004d7a:	000c      	movs	r4, r1
 8004d7c:	9000      	str	r0, [sp, #0]
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	da00      	bge.n	8004d84 <_printf_common+0x14>
 8004d82:	0013      	movs	r3, r2
 8004d84:	0022      	movs	r2, r4
 8004d86:	602b      	str	r3, [r5, #0]
 8004d88:	3243      	adds	r2, #67	; 0x43
 8004d8a:	7812      	ldrb	r2, [r2, #0]
 8004d8c:	2a00      	cmp	r2, #0
 8004d8e:	d001      	beq.n	8004d94 <_printf_common+0x24>
 8004d90:	3301      	adds	r3, #1
 8004d92:	602b      	str	r3, [r5, #0]
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	069b      	lsls	r3, r3, #26
 8004d98:	d502      	bpl.n	8004da0 <_printf_common+0x30>
 8004d9a:	682b      	ldr	r3, [r5, #0]
 8004d9c:	3302      	adds	r3, #2
 8004d9e:	602b      	str	r3, [r5, #0]
 8004da0:	6822      	ldr	r2, [r4, #0]
 8004da2:	2306      	movs	r3, #6
 8004da4:	0017      	movs	r7, r2
 8004da6:	401f      	ands	r7, r3
 8004da8:	421a      	tst	r2, r3
 8004daa:	d027      	beq.n	8004dfc <_printf_common+0x8c>
 8004dac:	0023      	movs	r3, r4
 8004dae:	3343      	adds	r3, #67	; 0x43
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	1e5a      	subs	r2, r3, #1
 8004db4:	4193      	sbcs	r3, r2
 8004db6:	6822      	ldr	r2, [r4, #0]
 8004db8:	0692      	lsls	r2, r2, #26
 8004dba:	d430      	bmi.n	8004e1e <_printf_common+0xae>
 8004dbc:	0022      	movs	r2, r4
 8004dbe:	9901      	ldr	r1, [sp, #4]
 8004dc0:	9800      	ldr	r0, [sp, #0]
 8004dc2:	9e08      	ldr	r6, [sp, #32]
 8004dc4:	3243      	adds	r2, #67	; 0x43
 8004dc6:	47b0      	blx	r6
 8004dc8:	1c43      	adds	r3, r0, #1
 8004dca:	d025      	beq.n	8004e18 <_printf_common+0xa8>
 8004dcc:	2306      	movs	r3, #6
 8004dce:	6820      	ldr	r0, [r4, #0]
 8004dd0:	682a      	ldr	r2, [r5, #0]
 8004dd2:	68e1      	ldr	r1, [r4, #12]
 8004dd4:	2500      	movs	r5, #0
 8004dd6:	4003      	ands	r3, r0
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d103      	bne.n	8004de4 <_printf_common+0x74>
 8004ddc:	1a8d      	subs	r5, r1, r2
 8004dde:	43eb      	mvns	r3, r5
 8004de0:	17db      	asrs	r3, r3, #31
 8004de2:	401d      	ands	r5, r3
 8004de4:	68a3      	ldr	r3, [r4, #8]
 8004de6:	6922      	ldr	r2, [r4, #16]
 8004de8:	4293      	cmp	r3, r2
 8004dea:	dd01      	ble.n	8004df0 <_printf_common+0x80>
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	18ed      	adds	r5, r5, r3
 8004df0:	2700      	movs	r7, #0
 8004df2:	42bd      	cmp	r5, r7
 8004df4:	d120      	bne.n	8004e38 <_printf_common+0xc8>
 8004df6:	2000      	movs	r0, #0
 8004df8:	e010      	b.n	8004e1c <_printf_common+0xac>
 8004dfa:	3701      	adds	r7, #1
 8004dfc:	68e3      	ldr	r3, [r4, #12]
 8004dfe:	682a      	ldr	r2, [r5, #0]
 8004e00:	1a9b      	subs	r3, r3, r2
 8004e02:	42bb      	cmp	r3, r7
 8004e04:	ddd2      	ble.n	8004dac <_printf_common+0x3c>
 8004e06:	0022      	movs	r2, r4
 8004e08:	2301      	movs	r3, #1
 8004e0a:	9901      	ldr	r1, [sp, #4]
 8004e0c:	9800      	ldr	r0, [sp, #0]
 8004e0e:	9e08      	ldr	r6, [sp, #32]
 8004e10:	3219      	adds	r2, #25
 8004e12:	47b0      	blx	r6
 8004e14:	1c43      	adds	r3, r0, #1
 8004e16:	d1f0      	bne.n	8004dfa <_printf_common+0x8a>
 8004e18:	2001      	movs	r0, #1
 8004e1a:	4240      	negs	r0, r0
 8004e1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e1e:	2030      	movs	r0, #48	; 0x30
 8004e20:	18e1      	adds	r1, r4, r3
 8004e22:	3143      	adds	r1, #67	; 0x43
 8004e24:	7008      	strb	r0, [r1, #0]
 8004e26:	0021      	movs	r1, r4
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	3145      	adds	r1, #69	; 0x45
 8004e2c:	7809      	ldrb	r1, [r1, #0]
 8004e2e:	18a2      	adds	r2, r4, r2
 8004e30:	3243      	adds	r2, #67	; 0x43
 8004e32:	3302      	adds	r3, #2
 8004e34:	7011      	strb	r1, [r2, #0]
 8004e36:	e7c1      	b.n	8004dbc <_printf_common+0x4c>
 8004e38:	0022      	movs	r2, r4
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	9901      	ldr	r1, [sp, #4]
 8004e3e:	9800      	ldr	r0, [sp, #0]
 8004e40:	9e08      	ldr	r6, [sp, #32]
 8004e42:	321a      	adds	r2, #26
 8004e44:	47b0      	blx	r6
 8004e46:	1c43      	adds	r3, r0, #1
 8004e48:	d0e6      	beq.n	8004e18 <_printf_common+0xa8>
 8004e4a:	3701      	adds	r7, #1
 8004e4c:	e7d1      	b.n	8004df2 <_printf_common+0x82>
	...

08004e50 <_printf_i>:
 8004e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e52:	b08b      	sub	sp, #44	; 0x2c
 8004e54:	9206      	str	r2, [sp, #24]
 8004e56:	000a      	movs	r2, r1
 8004e58:	3243      	adds	r2, #67	; 0x43
 8004e5a:	9307      	str	r3, [sp, #28]
 8004e5c:	9005      	str	r0, [sp, #20]
 8004e5e:	9204      	str	r2, [sp, #16]
 8004e60:	7e0a      	ldrb	r2, [r1, #24]
 8004e62:	000c      	movs	r4, r1
 8004e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e66:	2a78      	cmp	r2, #120	; 0x78
 8004e68:	d806      	bhi.n	8004e78 <_printf_i+0x28>
 8004e6a:	2a62      	cmp	r2, #98	; 0x62
 8004e6c:	d808      	bhi.n	8004e80 <_printf_i+0x30>
 8004e6e:	2a00      	cmp	r2, #0
 8004e70:	d100      	bne.n	8004e74 <_printf_i+0x24>
 8004e72:	e0c0      	b.n	8004ff6 <_printf_i+0x1a6>
 8004e74:	2a58      	cmp	r2, #88	; 0x58
 8004e76:	d052      	beq.n	8004f1e <_printf_i+0xce>
 8004e78:	0026      	movs	r6, r4
 8004e7a:	3642      	adds	r6, #66	; 0x42
 8004e7c:	7032      	strb	r2, [r6, #0]
 8004e7e:	e022      	b.n	8004ec6 <_printf_i+0x76>
 8004e80:	0010      	movs	r0, r2
 8004e82:	3863      	subs	r0, #99	; 0x63
 8004e84:	2815      	cmp	r0, #21
 8004e86:	d8f7      	bhi.n	8004e78 <_printf_i+0x28>
 8004e88:	f7fb f93e 	bl	8000108 <__gnu_thumb1_case_shi>
 8004e8c:	001f0016 	.word	0x001f0016
 8004e90:	fff6fff6 	.word	0xfff6fff6
 8004e94:	fff6fff6 	.word	0xfff6fff6
 8004e98:	fff6001f 	.word	0xfff6001f
 8004e9c:	fff6fff6 	.word	0xfff6fff6
 8004ea0:	00a8fff6 	.word	0x00a8fff6
 8004ea4:	009a0036 	.word	0x009a0036
 8004ea8:	fff6fff6 	.word	0xfff6fff6
 8004eac:	fff600b9 	.word	0xfff600b9
 8004eb0:	fff60036 	.word	0xfff60036
 8004eb4:	009efff6 	.word	0x009efff6
 8004eb8:	0026      	movs	r6, r4
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	3642      	adds	r6, #66	; 0x42
 8004ebe:	1d11      	adds	r1, r2, #4
 8004ec0:	6019      	str	r1, [r3, #0]
 8004ec2:	6813      	ldr	r3, [r2, #0]
 8004ec4:	7033      	strb	r3, [r6, #0]
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e0a7      	b.n	800501a <_printf_i+0x1ca>
 8004eca:	6808      	ldr	r0, [r1, #0]
 8004ecc:	6819      	ldr	r1, [r3, #0]
 8004ece:	1d0a      	adds	r2, r1, #4
 8004ed0:	0605      	lsls	r5, r0, #24
 8004ed2:	d50b      	bpl.n	8004eec <_printf_i+0x9c>
 8004ed4:	680d      	ldr	r5, [r1, #0]
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	2d00      	cmp	r5, #0
 8004eda:	da03      	bge.n	8004ee4 <_printf_i+0x94>
 8004edc:	232d      	movs	r3, #45	; 0x2d
 8004ede:	9a04      	ldr	r2, [sp, #16]
 8004ee0:	426d      	negs	r5, r5
 8004ee2:	7013      	strb	r3, [r2, #0]
 8004ee4:	4b61      	ldr	r3, [pc, #388]	; (800506c <_printf_i+0x21c>)
 8004ee6:	270a      	movs	r7, #10
 8004ee8:	9303      	str	r3, [sp, #12]
 8004eea:	e032      	b.n	8004f52 <_printf_i+0x102>
 8004eec:	680d      	ldr	r5, [r1, #0]
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	0641      	lsls	r1, r0, #25
 8004ef2:	d5f1      	bpl.n	8004ed8 <_printf_i+0x88>
 8004ef4:	b22d      	sxth	r5, r5
 8004ef6:	e7ef      	b.n	8004ed8 <_printf_i+0x88>
 8004ef8:	680d      	ldr	r5, [r1, #0]
 8004efa:	6819      	ldr	r1, [r3, #0]
 8004efc:	1d08      	adds	r0, r1, #4
 8004efe:	6018      	str	r0, [r3, #0]
 8004f00:	062e      	lsls	r6, r5, #24
 8004f02:	d501      	bpl.n	8004f08 <_printf_i+0xb8>
 8004f04:	680d      	ldr	r5, [r1, #0]
 8004f06:	e003      	b.n	8004f10 <_printf_i+0xc0>
 8004f08:	066d      	lsls	r5, r5, #25
 8004f0a:	d5fb      	bpl.n	8004f04 <_printf_i+0xb4>
 8004f0c:	680d      	ldr	r5, [r1, #0]
 8004f0e:	b2ad      	uxth	r5, r5
 8004f10:	4b56      	ldr	r3, [pc, #344]	; (800506c <_printf_i+0x21c>)
 8004f12:	270a      	movs	r7, #10
 8004f14:	9303      	str	r3, [sp, #12]
 8004f16:	2a6f      	cmp	r2, #111	; 0x6f
 8004f18:	d117      	bne.n	8004f4a <_printf_i+0xfa>
 8004f1a:	2708      	movs	r7, #8
 8004f1c:	e015      	b.n	8004f4a <_printf_i+0xfa>
 8004f1e:	3145      	adds	r1, #69	; 0x45
 8004f20:	700a      	strb	r2, [r1, #0]
 8004f22:	4a52      	ldr	r2, [pc, #328]	; (800506c <_printf_i+0x21c>)
 8004f24:	9203      	str	r2, [sp, #12]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	6821      	ldr	r1, [r4, #0]
 8004f2a:	ca20      	ldmia	r2!, {r5}
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	0608      	lsls	r0, r1, #24
 8004f30:	d550      	bpl.n	8004fd4 <_printf_i+0x184>
 8004f32:	07cb      	lsls	r3, r1, #31
 8004f34:	d502      	bpl.n	8004f3c <_printf_i+0xec>
 8004f36:	2320      	movs	r3, #32
 8004f38:	4319      	orrs	r1, r3
 8004f3a:	6021      	str	r1, [r4, #0]
 8004f3c:	2710      	movs	r7, #16
 8004f3e:	2d00      	cmp	r5, #0
 8004f40:	d103      	bne.n	8004f4a <_printf_i+0xfa>
 8004f42:	2320      	movs	r3, #32
 8004f44:	6822      	ldr	r2, [r4, #0]
 8004f46:	439a      	bics	r2, r3
 8004f48:	6022      	str	r2, [r4, #0]
 8004f4a:	0023      	movs	r3, r4
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	3343      	adds	r3, #67	; 0x43
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	6863      	ldr	r3, [r4, #4]
 8004f54:	60a3      	str	r3, [r4, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	db03      	blt.n	8004f62 <_printf_i+0x112>
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	6821      	ldr	r1, [r4, #0]
 8004f5e:	4391      	bics	r1, r2
 8004f60:	6021      	str	r1, [r4, #0]
 8004f62:	2d00      	cmp	r5, #0
 8004f64:	d102      	bne.n	8004f6c <_printf_i+0x11c>
 8004f66:	9e04      	ldr	r6, [sp, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00c      	beq.n	8004f86 <_printf_i+0x136>
 8004f6c:	9e04      	ldr	r6, [sp, #16]
 8004f6e:	0028      	movs	r0, r5
 8004f70:	0039      	movs	r1, r7
 8004f72:	f7fb f959 	bl	8000228 <__aeabi_uidivmod>
 8004f76:	9b03      	ldr	r3, [sp, #12]
 8004f78:	3e01      	subs	r6, #1
 8004f7a:	5c5b      	ldrb	r3, [r3, r1]
 8004f7c:	7033      	strb	r3, [r6, #0]
 8004f7e:	002b      	movs	r3, r5
 8004f80:	0005      	movs	r5, r0
 8004f82:	429f      	cmp	r7, r3
 8004f84:	d9f3      	bls.n	8004f6e <_printf_i+0x11e>
 8004f86:	2f08      	cmp	r7, #8
 8004f88:	d109      	bne.n	8004f9e <_printf_i+0x14e>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	07db      	lsls	r3, r3, #31
 8004f8e:	d506      	bpl.n	8004f9e <_printf_i+0x14e>
 8004f90:	6863      	ldr	r3, [r4, #4]
 8004f92:	6922      	ldr	r2, [r4, #16]
 8004f94:	4293      	cmp	r3, r2
 8004f96:	dc02      	bgt.n	8004f9e <_printf_i+0x14e>
 8004f98:	2330      	movs	r3, #48	; 0x30
 8004f9a:	3e01      	subs	r6, #1
 8004f9c:	7033      	strb	r3, [r6, #0]
 8004f9e:	9b04      	ldr	r3, [sp, #16]
 8004fa0:	1b9b      	subs	r3, r3, r6
 8004fa2:	6123      	str	r3, [r4, #16]
 8004fa4:	9b07      	ldr	r3, [sp, #28]
 8004fa6:	0021      	movs	r1, r4
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	9805      	ldr	r0, [sp, #20]
 8004fac:	9b06      	ldr	r3, [sp, #24]
 8004fae:	aa09      	add	r2, sp, #36	; 0x24
 8004fb0:	f7ff fede 	bl	8004d70 <_printf_common>
 8004fb4:	1c43      	adds	r3, r0, #1
 8004fb6:	d135      	bne.n	8005024 <_printf_i+0x1d4>
 8004fb8:	2001      	movs	r0, #1
 8004fba:	4240      	negs	r0, r0
 8004fbc:	b00b      	add	sp, #44	; 0x2c
 8004fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	6809      	ldr	r1, [r1, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	6022      	str	r2, [r4, #0]
 8004fc8:	0022      	movs	r2, r4
 8004fca:	2178      	movs	r1, #120	; 0x78
 8004fcc:	3245      	adds	r2, #69	; 0x45
 8004fce:	7011      	strb	r1, [r2, #0]
 8004fd0:	4a27      	ldr	r2, [pc, #156]	; (8005070 <_printf_i+0x220>)
 8004fd2:	e7a7      	b.n	8004f24 <_printf_i+0xd4>
 8004fd4:	0648      	lsls	r0, r1, #25
 8004fd6:	d5ac      	bpl.n	8004f32 <_printf_i+0xe2>
 8004fd8:	b2ad      	uxth	r5, r5
 8004fda:	e7aa      	b.n	8004f32 <_printf_i+0xe2>
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	680d      	ldr	r5, [r1, #0]
 8004fe0:	1d10      	adds	r0, r2, #4
 8004fe2:	6949      	ldr	r1, [r1, #20]
 8004fe4:	6018      	str	r0, [r3, #0]
 8004fe6:	6813      	ldr	r3, [r2, #0]
 8004fe8:	062e      	lsls	r6, r5, #24
 8004fea:	d501      	bpl.n	8004ff0 <_printf_i+0x1a0>
 8004fec:	6019      	str	r1, [r3, #0]
 8004fee:	e002      	b.n	8004ff6 <_printf_i+0x1a6>
 8004ff0:	066d      	lsls	r5, r5, #25
 8004ff2:	d5fb      	bpl.n	8004fec <_printf_i+0x19c>
 8004ff4:	8019      	strh	r1, [r3, #0]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	9e04      	ldr	r6, [sp, #16]
 8004ffa:	6123      	str	r3, [r4, #16]
 8004ffc:	e7d2      	b.n	8004fa4 <_printf_i+0x154>
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	1d11      	adds	r1, r2, #4
 8005002:	6019      	str	r1, [r3, #0]
 8005004:	6816      	ldr	r6, [r2, #0]
 8005006:	2100      	movs	r1, #0
 8005008:	0030      	movs	r0, r6
 800500a:	6862      	ldr	r2, [r4, #4]
 800500c:	f000 fad0 	bl	80055b0 <memchr>
 8005010:	2800      	cmp	r0, #0
 8005012:	d001      	beq.n	8005018 <_printf_i+0x1c8>
 8005014:	1b80      	subs	r0, r0, r6
 8005016:	6060      	str	r0, [r4, #4]
 8005018:	6863      	ldr	r3, [r4, #4]
 800501a:	6123      	str	r3, [r4, #16]
 800501c:	2300      	movs	r3, #0
 800501e:	9a04      	ldr	r2, [sp, #16]
 8005020:	7013      	strb	r3, [r2, #0]
 8005022:	e7bf      	b.n	8004fa4 <_printf_i+0x154>
 8005024:	6923      	ldr	r3, [r4, #16]
 8005026:	0032      	movs	r2, r6
 8005028:	9906      	ldr	r1, [sp, #24]
 800502a:	9805      	ldr	r0, [sp, #20]
 800502c:	9d07      	ldr	r5, [sp, #28]
 800502e:	47a8      	blx	r5
 8005030:	1c43      	adds	r3, r0, #1
 8005032:	d0c1      	beq.n	8004fb8 <_printf_i+0x168>
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	079b      	lsls	r3, r3, #30
 8005038:	d415      	bmi.n	8005066 <_printf_i+0x216>
 800503a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800503c:	68e0      	ldr	r0, [r4, #12]
 800503e:	4298      	cmp	r0, r3
 8005040:	dabc      	bge.n	8004fbc <_printf_i+0x16c>
 8005042:	0018      	movs	r0, r3
 8005044:	e7ba      	b.n	8004fbc <_printf_i+0x16c>
 8005046:	0022      	movs	r2, r4
 8005048:	2301      	movs	r3, #1
 800504a:	9906      	ldr	r1, [sp, #24]
 800504c:	9805      	ldr	r0, [sp, #20]
 800504e:	9e07      	ldr	r6, [sp, #28]
 8005050:	3219      	adds	r2, #25
 8005052:	47b0      	blx	r6
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	d0af      	beq.n	8004fb8 <_printf_i+0x168>
 8005058:	3501      	adds	r5, #1
 800505a:	68e3      	ldr	r3, [r4, #12]
 800505c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800505e:	1a9b      	subs	r3, r3, r2
 8005060:	42ab      	cmp	r3, r5
 8005062:	dcf0      	bgt.n	8005046 <_printf_i+0x1f6>
 8005064:	e7e9      	b.n	800503a <_printf_i+0x1ea>
 8005066:	2500      	movs	r5, #0
 8005068:	e7f7      	b.n	800505a <_printf_i+0x20a>
 800506a:	46c0      	nop			; (mov r8, r8)
 800506c:	080058d5 	.word	0x080058d5
 8005070:	080058e6 	.word	0x080058e6

08005074 <_sbrk_r>:
 8005074:	2300      	movs	r3, #0
 8005076:	b570      	push	{r4, r5, r6, lr}
 8005078:	4d06      	ldr	r5, [pc, #24]	; (8005094 <_sbrk_r+0x20>)
 800507a:	0004      	movs	r4, r0
 800507c:	0008      	movs	r0, r1
 800507e:	602b      	str	r3, [r5, #0]
 8005080:	f7fc fb3c 	bl	80016fc <_sbrk>
 8005084:	1c43      	adds	r3, r0, #1
 8005086:	d103      	bne.n	8005090 <_sbrk_r+0x1c>
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d000      	beq.n	8005090 <_sbrk_r+0x1c>
 800508e:	6023      	str	r3, [r4, #0]
 8005090:	bd70      	pop	{r4, r5, r6, pc}
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	20000380 	.word	0x20000380

08005098 <__sread>:
 8005098:	b570      	push	{r4, r5, r6, lr}
 800509a:	000c      	movs	r4, r1
 800509c:	250e      	movs	r5, #14
 800509e:	5f49      	ldrsh	r1, [r1, r5]
 80050a0:	f000 fb2e 	bl	8005700 <_read_r>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	db03      	blt.n	80050b0 <__sread+0x18>
 80050a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80050aa:	181b      	adds	r3, r3, r0
 80050ac:	6563      	str	r3, [r4, #84]	; 0x54
 80050ae:	bd70      	pop	{r4, r5, r6, pc}
 80050b0:	89a3      	ldrh	r3, [r4, #12]
 80050b2:	4a02      	ldr	r2, [pc, #8]	; (80050bc <__sread+0x24>)
 80050b4:	4013      	ands	r3, r2
 80050b6:	81a3      	strh	r3, [r4, #12]
 80050b8:	e7f9      	b.n	80050ae <__sread+0x16>
 80050ba:	46c0      	nop			; (mov r8, r8)
 80050bc:	ffffefff 	.word	0xffffefff

080050c0 <__swrite>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	001f      	movs	r7, r3
 80050c4:	898b      	ldrh	r3, [r1, #12]
 80050c6:	0005      	movs	r5, r0
 80050c8:	000c      	movs	r4, r1
 80050ca:	0016      	movs	r6, r2
 80050cc:	05db      	lsls	r3, r3, #23
 80050ce:	d505      	bpl.n	80050dc <__swrite+0x1c>
 80050d0:	230e      	movs	r3, #14
 80050d2:	5ec9      	ldrsh	r1, [r1, r3]
 80050d4:	2200      	movs	r2, #0
 80050d6:	2302      	movs	r3, #2
 80050d8:	f000 f9ea 	bl	80054b0 <_lseek_r>
 80050dc:	89a3      	ldrh	r3, [r4, #12]
 80050de:	4a05      	ldr	r2, [pc, #20]	; (80050f4 <__swrite+0x34>)
 80050e0:	0028      	movs	r0, r5
 80050e2:	4013      	ands	r3, r2
 80050e4:	81a3      	strh	r3, [r4, #12]
 80050e6:	0032      	movs	r2, r6
 80050e8:	230e      	movs	r3, #14
 80050ea:	5ee1      	ldrsh	r1, [r4, r3]
 80050ec:	003b      	movs	r3, r7
 80050ee:	f000 f875 	bl	80051dc <_write_r>
 80050f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050f4:	ffffefff 	.word	0xffffefff

080050f8 <__sseek>:
 80050f8:	b570      	push	{r4, r5, r6, lr}
 80050fa:	000c      	movs	r4, r1
 80050fc:	250e      	movs	r5, #14
 80050fe:	5f49      	ldrsh	r1, [r1, r5]
 8005100:	f000 f9d6 	bl	80054b0 <_lseek_r>
 8005104:	89a3      	ldrh	r3, [r4, #12]
 8005106:	1c42      	adds	r2, r0, #1
 8005108:	d103      	bne.n	8005112 <__sseek+0x1a>
 800510a:	4a05      	ldr	r2, [pc, #20]	; (8005120 <__sseek+0x28>)
 800510c:	4013      	ands	r3, r2
 800510e:	81a3      	strh	r3, [r4, #12]
 8005110:	bd70      	pop	{r4, r5, r6, pc}
 8005112:	2280      	movs	r2, #128	; 0x80
 8005114:	0152      	lsls	r2, r2, #5
 8005116:	4313      	orrs	r3, r2
 8005118:	81a3      	strh	r3, [r4, #12]
 800511a:	6560      	str	r0, [r4, #84]	; 0x54
 800511c:	e7f8      	b.n	8005110 <__sseek+0x18>
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	ffffefff 	.word	0xffffefff

08005124 <__sclose>:
 8005124:	b510      	push	{r4, lr}
 8005126:	230e      	movs	r3, #14
 8005128:	5ec9      	ldrsh	r1, [r1, r3]
 800512a:	f000 f8e3 	bl	80052f4 <_close_r>
 800512e:	bd10      	pop	{r4, pc}

08005130 <__swbuf_r>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	0005      	movs	r5, r0
 8005134:	000e      	movs	r6, r1
 8005136:	0014      	movs	r4, r2
 8005138:	2800      	cmp	r0, #0
 800513a:	d004      	beq.n	8005146 <__swbuf_r+0x16>
 800513c:	6983      	ldr	r3, [r0, #24]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <__swbuf_r+0x16>
 8005142:	f7ff fa4f 	bl	80045e4 <__sinit>
 8005146:	4b22      	ldr	r3, [pc, #136]	; (80051d0 <__swbuf_r+0xa0>)
 8005148:	429c      	cmp	r4, r3
 800514a:	d12e      	bne.n	80051aa <__swbuf_r+0x7a>
 800514c:	686c      	ldr	r4, [r5, #4]
 800514e:	69a3      	ldr	r3, [r4, #24]
 8005150:	60a3      	str	r3, [r4, #8]
 8005152:	89a3      	ldrh	r3, [r4, #12]
 8005154:	071b      	lsls	r3, r3, #28
 8005156:	d532      	bpl.n	80051be <__swbuf_r+0x8e>
 8005158:	6923      	ldr	r3, [r4, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d02f      	beq.n	80051be <__swbuf_r+0x8e>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	6922      	ldr	r2, [r4, #16]
 8005162:	b2f7      	uxtb	r7, r6
 8005164:	1a98      	subs	r0, r3, r2
 8005166:	6963      	ldr	r3, [r4, #20]
 8005168:	b2f6      	uxtb	r6, r6
 800516a:	4283      	cmp	r3, r0
 800516c:	dc05      	bgt.n	800517a <__swbuf_r+0x4a>
 800516e:	0021      	movs	r1, r4
 8005170:	0028      	movs	r0, r5
 8005172:	f000 f95d 	bl	8005430 <_fflush_r>
 8005176:	2800      	cmp	r0, #0
 8005178:	d127      	bne.n	80051ca <__swbuf_r+0x9a>
 800517a:	68a3      	ldr	r3, [r4, #8]
 800517c:	3001      	adds	r0, #1
 800517e:	3b01      	subs	r3, #1
 8005180:	60a3      	str	r3, [r4, #8]
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	6022      	str	r2, [r4, #0]
 8005188:	701f      	strb	r7, [r3, #0]
 800518a:	6963      	ldr	r3, [r4, #20]
 800518c:	4283      	cmp	r3, r0
 800518e:	d004      	beq.n	800519a <__swbuf_r+0x6a>
 8005190:	89a3      	ldrh	r3, [r4, #12]
 8005192:	07db      	lsls	r3, r3, #31
 8005194:	d507      	bpl.n	80051a6 <__swbuf_r+0x76>
 8005196:	2e0a      	cmp	r6, #10
 8005198:	d105      	bne.n	80051a6 <__swbuf_r+0x76>
 800519a:	0021      	movs	r1, r4
 800519c:	0028      	movs	r0, r5
 800519e:	f000 f947 	bl	8005430 <_fflush_r>
 80051a2:	2800      	cmp	r0, #0
 80051a4:	d111      	bne.n	80051ca <__swbuf_r+0x9a>
 80051a6:	0030      	movs	r0, r6
 80051a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051aa:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <__swbuf_r+0xa4>)
 80051ac:	429c      	cmp	r4, r3
 80051ae:	d101      	bne.n	80051b4 <__swbuf_r+0x84>
 80051b0:	68ac      	ldr	r4, [r5, #8]
 80051b2:	e7cc      	b.n	800514e <__swbuf_r+0x1e>
 80051b4:	4b08      	ldr	r3, [pc, #32]	; (80051d8 <__swbuf_r+0xa8>)
 80051b6:	429c      	cmp	r4, r3
 80051b8:	d1c9      	bne.n	800514e <__swbuf_r+0x1e>
 80051ba:	68ec      	ldr	r4, [r5, #12]
 80051bc:	e7c7      	b.n	800514e <__swbuf_r+0x1e>
 80051be:	0021      	movs	r1, r4
 80051c0:	0028      	movs	r0, r5
 80051c2:	f000 f81f 	bl	8005204 <__swsetup_r>
 80051c6:	2800      	cmp	r0, #0
 80051c8:	d0c9      	beq.n	800515e <__swbuf_r+0x2e>
 80051ca:	2601      	movs	r6, #1
 80051cc:	4276      	negs	r6, r6
 80051ce:	e7ea      	b.n	80051a6 <__swbuf_r+0x76>
 80051d0:	08005884 	.word	0x08005884
 80051d4:	080058a4 	.word	0x080058a4
 80051d8:	08005864 	.word	0x08005864

080051dc <_write_r>:
 80051dc:	b570      	push	{r4, r5, r6, lr}
 80051de:	0004      	movs	r4, r0
 80051e0:	0008      	movs	r0, r1
 80051e2:	0011      	movs	r1, r2
 80051e4:	001a      	movs	r2, r3
 80051e6:	2300      	movs	r3, #0
 80051e8:	4d05      	ldr	r5, [pc, #20]	; (8005200 <_write_r+0x24>)
 80051ea:	602b      	str	r3, [r5, #0]
 80051ec:	f7fb f960 	bl	80004b0 <_write>
 80051f0:	1c43      	adds	r3, r0, #1
 80051f2:	d103      	bne.n	80051fc <_write_r+0x20>
 80051f4:	682b      	ldr	r3, [r5, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d000      	beq.n	80051fc <_write_r+0x20>
 80051fa:	6023      	str	r3, [r4, #0]
 80051fc:	bd70      	pop	{r4, r5, r6, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	20000380 	.word	0x20000380

08005204 <__swsetup_r>:
 8005204:	4b37      	ldr	r3, [pc, #220]	; (80052e4 <__swsetup_r+0xe0>)
 8005206:	b570      	push	{r4, r5, r6, lr}
 8005208:	681d      	ldr	r5, [r3, #0]
 800520a:	0006      	movs	r6, r0
 800520c:	000c      	movs	r4, r1
 800520e:	2d00      	cmp	r5, #0
 8005210:	d005      	beq.n	800521e <__swsetup_r+0x1a>
 8005212:	69ab      	ldr	r3, [r5, #24]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d102      	bne.n	800521e <__swsetup_r+0x1a>
 8005218:	0028      	movs	r0, r5
 800521a:	f7ff f9e3 	bl	80045e4 <__sinit>
 800521e:	4b32      	ldr	r3, [pc, #200]	; (80052e8 <__swsetup_r+0xe4>)
 8005220:	429c      	cmp	r4, r3
 8005222:	d10f      	bne.n	8005244 <__swsetup_r+0x40>
 8005224:	686c      	ldr	r4, [r5, #4]
 8005226:	230c      	movs	r3, #12
 8005228:	5ee2      	ldrsh	r2, [r4, r3]
 800522a:	b293      	uxth	r3, r2
 800522c:	0711      	lsls	r1, r2, #28
 800522e:	d42d      	bmi.n	800528c <__swsetup_r+0x88>
 8005230:	06d9      	lsls	r1, r3, #27
 8005232:	d411      	bmi.n	8005258 <__swsetup_r+0x54>
 8005234:	2309      	movs	r3, #9
 8005236:	2001      	movs	r0, #1
 8005238:	6033      	str	r3, [r6, #0]
 800523a:	3337      	adds	r3, #55	; 0x37
 800523c:	4313      	orrs	r3, r2
 800523e:	81a3      	strh	r3, [r4, #12]
 8005240:	4240      	negs	r0, r0
 8005242:	bd70      	pop	{r4, r5, r6, pc}
 8005244:	4b29      	ldr	r3, [pc, #164]	; (80052ec <__swsetup_r+0xe8>)
 8005246:	429c      	cmp	r4, r3
 8005248:	d101      	bne.n	800524e <__swsetup_r+0x4a>
 800524a:	68ac      	ldr	r4, [r5, #8]
 800524c:	e7eb      	b.n	8005226 <__swsetup_r+0x22>
 800524e:	4b28      	ldr	r3, [pc, #160]	; (80052f0 <__swsetup_r+0xec>)
 8005250:	429c      	cmp	r4, r3
 8005252:	d1e8      	bne.n	8005226 <__swsetup_r+0x22>
 8005254:	68ec      	ldr	r4, [r5, #12]
 8005256:	e7e6      	b.n	8005226 <__swsetup_r+0x22>
 8005258:	075b      	lsls	r3, r3, #29
 800525a:	d513      	bpl.n	8005284 <__swsetup_r+0x80>
 800525c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800525e:	2900      	cmp	r1, #0
 8005260:	d008      	beq.n	8005274 <__swsetup_r+0x70>
 8005262:	0023      	movs	r3, r4
 8005264:	3344      	adds	r3, #68	; 0x44
 8005266:	4299      	cmp	r1, r3
 8005268:	d002      	beq.n	8005270 <__swsetup_r+0x6c>
 800526a:	0030      	movs	r0, r6
 800526c:	f000 f9d8 	bl	8005620 <_free_r>
 8005270:	2300      	movs	r3, #0
 8005272:	6363      	str	r3, [r4, #52]	; 0x34
 8005274:	2224      	movs	r2, #36	; 0x24
 8005276:	89a3      	ldrh	r3, [r4, #12]
 8005278:	4393      	bics	r3, r2
 800527a:	81a3      	strh	r3, [r4, #12]
 800527c:	2300      	movs	r3, #0
 800527e:	6063      	str	r3, [r4, #4]
 8005280:	6923      	ldr	r3, [r4, #16]
 8005282:	6023      	str	r3, [r4, #0]
 8005284:	2308      	movs	r3, #8
 8005286:	89a2      	ldrh	r2, [r4, #12]
 8005288:	4313      	orrs	r3, r2
 800528a:	81a3      	strh	r3, [r4, #12]
 800528c:	6923      	ldr	r3, [r4, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10b      	bne.n	80052aa <__swsetup_r+0xa6>
 8005292:	21a0      	movs	r1, #160	; 0xa0
 8005294:	2280      	movs	r2, #128	; 0x80
 8005296:	89a3      	ldrh	r3, [r4, #12]
 8005298:	0089      	lsls	r1, r1, #2
 800529a:	0092      	lsls	r2, r2, #2
 800529c:	400b      	ands	r3, r1
 800529e:	4293      	cmp	r3, r2
 80052a0:	d003      	beq.n	80052aa <__swsetup_r+0xa6>
 80052a2:	0021      	movs	r1, r4
 80052a4:	0030      	movs	r0, r6
 80052a6:	f000 f93f 	bl	8005528 <__smakebuf_r>
 80052aa:	220c      	movs	r2, #12
 80052ac:	5ea3      	ldrsh	r3, [r4, r2]
 80052ae:	2001      	movs	r0, #1
 80052b0:	001a      	movs	r2, r3
 80052b2:	b299      	uxth	r1, r3
 80052b4:	4002      	ands	r2, r0
 80052b6:	4203      	tst	r3, r0
 80052b8:	d00f      	beq.n	80052da <__swsetup_r+0xd6>
 80052ba:	2200      	movs	r2, #0
 80052bc:	60a2      	str	r2, [r4, #8]
 80052be:	6962      	ldr	r2, [r4, #20]
 80052c0:	4252      	negs	r2, r2
 80052c2:	61a2      	str	r2, [r4, #24]
 80052c4:	2000      	movs	r0, #0
 80052c6:	6922      	ldr	r2, [r4, #16]
 80052c8:	4282      	cmp	r2, r0
 80052ca:	d1ba      	bne.n	8005242 <__swsetup_r+0x3e>
 80052cc:	060a      	lsls	r2, r1, #24
 80052ce:	d5b8      	bpl.n	8005242 <__swsetup_r+0x3e>
 80052d0:	2240      	movs	r2, #64	; 0x40
 80052d2:	4313      	orrs	r3, r2
 80052d4:	81a3      	strh	r3, [r4, #12]
 80052d6:	3801      	subs	r0, #1
 80052d8:	e7b3      	b.n	8005242 <__swsetup_r+0x3e>
 80052da:	0788      	lsls	r0, r1, #30
 80052dc:	d400      	bmi.n	80052e0 <__swsetup_r+0xdc>
 80052de:	6962      	ldr	r2, [r4, #20]
 80052e0:	60a2      	str	r2, [r4, #8]
 80052e2:	e7ef      	b.n	80052c4 <__swsetup_r+0xc0>
 80052e4:	20000028 	.word	0x20000028
 80052e8:	08005884 	.word	0x08005884
 80052ec:	080058a4 	.word	0x080058a4
 80052f0:	08005864 	.word	0x08005864

080052f4 <_close_r>:
 80052f4:	2300      	movs	r3, #0
 80052f6:	b570      	push	{r4, r5, r6, lr}
 80052f8:	4d06      	ldr	r5, [pc, #24]	; (8005314 <_close_r+0x20>)
 80052fa:	0004      	movs	r4, r0
 80052fc:	0008      	movs	r0, r1
 80052fe:	602b      	str	r3, [r5, #0]
 8005300:	f7fc f9d0 	bl	80016a4 <_close>
 8005304:	1c43      	adds	r3, r0, #1
 8005306:	d103      	bne.n	8005310 <_close_r+0x1c>
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d000      	beq.n	8005310 <_close_r+0x1c>
 800530e:	6023      	str	r3, [r4, #0]
 8005310:	bd70      	pop	{r4, r5, r6, pc}
 8005312:	46c0      	nop			; (mov r8, r8)
 8005314:	20000380 	.word	0x20000380

08005318 <__sflush_r>:
 8005318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800531a:	898b      	ldrh	r3, [r1, #12]
 800531c:	0005      	movs	r5, r0
 800531e:	000c      	movs	r4, r1
 8005320:	071a      	lsls	r2, r3, #28
 8005322:	d45f      	bmi.n	80053e4 <__sflush_r+0xcc>
 8005324:	684a      	ldr	r2, [r1, #4]
 8005326:	2a00      	cmp	r2, #0
 8005328:	dc04      	bgt.n	8005334 <__sflush_r+0x1c>
 800532a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800532c:	2a00      	cmp	r2, #0
 800532e:	dc01      	bgt.n	8005334 <__sflush_r+0x1c>
 8005330:	2000      	movs	r0, #0
 8005332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005334:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005336:	2f00      	cmp	r7, #0
 8005338:	d0fa      	beq.n	8005330 <__sflush_r+0x18>
 800533a:	2200      	movs	r2, #0
 800533c:	2180      	movs	r1, #128	; 0x80
 800533e:	682e      	ldr	r6, [r5, #0]
 8005340:	602a      	str	r2, [r5, #0]
 8005342:	001a      	movs	r2, r3
 8005344:	0149      	lsls	r1, r1, #5
 8005346:	400a      	ands	r2, r1
 8005348:	420b      	tst	r3, r1
 800534a:	d034      	beq.n	80053b6 <__sflush_r+0x9e>
 800534c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800534e:	89a3      	ldrh	r3, [r4, #12]
 8005350:	075b      	lsls	r3, r3, #29
 8005352:	d506      	bpl.n	8005362 <__sflush_r+0x4a>
 8005354:	6863      	ldr	r3, [r4, #4]
 8005356:	1ac0      	subs	r0, r0, r3
 8005358:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <__sflush_r+0x4a>
 800535e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005360:	1ac0      	subs	r0, r0, r3
 8005362:	0002      	movs	r2, r0
 8005364:	6a21      	ldr	r1, [r4, #32]
 8005366:	2300      	movs	r3, #0
 8005368:	0028      	movs	r0, r5
 800536a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800536c:	47b8      	blx	r7
 800536e:	89a1      	ldrh	r1, [r4, #12]
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	d106      	bne.n	8005382 <__sflush_r+0x6a>
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	2b1d      	cmp	r3, #29
 8005378:	d831      	bhi.n	80053de <__sflush_r+0xc6>
 800537a:	4a2c      	ldr	r2, [pc, #176]	; (800542c <__sflush_r+0x114>)
 800537c:	40da      	lsrs	r2, r3
 800537e:	07d3      	lsls	r3, r2, #31
 8005380:	d52d      	bpl.n	80053de <__sflush_r+0xc6>
 8005382:	2300      	movs	r3, #0
 8005384:	6063      	str	r3, [r4, #4]
 8005386:	6923      	ldr	r3, [r4, #16]
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	04cb      	lsls	r3, r1, #19
 800538c:	d505      	bpl.n	800539a <__sflush_r+0x82>
 800538e:	1c43      	adds	r3, r0, #1
 8005390:	d102      	bne.n	8005398 <__sflush_r+0x80>
 8005392:	682b      	ldr	r3, [r5, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d100      	bne.n	800539a <__sflush_r+0x82>
 8005398:	6560      	str	r0, [r4, #84]	; 0x54
 800539a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800539c:	602e      	str	r6, [r5, #0]
 800539e:	2900      	cmp	r1, #0
 80053a0:	d0c6      	beq.n	8005330 <__sflush_r+0x18>
 80053a2:	0023      	movs	r3, r4
 80053a4:	3344      	adds	r3, #68	; 0x44
 80053a6:	4299      	cmp	r1, r3
 80053a8:	d002      	beq.n	80053b0 <__sflush_r+0x98>
 80053aa:	0028      	movs	r0, r5
 80053ac:	f000 f938 	bl	8005620 <_free_r>
 80053b0:	2000      	movs	r0, #0
 80053b2:	6360      	str	r0, [r4, #52]	; 0x34
 80053b4:	e7bd      	b.n	8005332 <__sflush_r+0x1a>
 80053b6:	2301      	movs	r3, #1
 80053b8:	0028      	movs	r0, r5
 80053ba:	6a21      	ldr	r1, [r4, #32]
 80053bc:	47b8      	blx	r7
 80053be:	1c43      	adds	r3, r0, #1
 80053c0:	d1c5      	bne.n	800534e <__sflush_r+0x36>
 80053c2:	682b      	ldr	r3, [r5, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0c2      	beq.n	800534e <__sflush_r+0x36>
 80053c8:	2b1d      	cmp	r3, #29
 80053ca:	d001      	beq.n	80053d0 <__sflush_r+0xb8>
 80053cc:	2b16      	cmp	r3, #22
 80053ce:	d101      	bne.n	80053d4 <__sflush_r+0xbc>
 80053d0:	602e      	str	r6, [r5, #0]
 80053d2:	e7ad      	b.n	8005330 <__sflush_r+0x18>
 80053d4:	2340      	movs	r3, #64	; 0x40
 80053d6:	89a2      	ldrh	r2, [r4, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	81a3      	strh	r3, [r4, #12]
 80053dc:	e7a9      	b.n	8005332 <__sflush_r+0x1a>
 80053de:	2340      	movs	r3, #64	; 0x40
 80053e0:	430b      	orrs	r3, r1
 80053e2:	e7fa      	b.n	80053da <__sflush_r+0xc2>
 80053e4:	690f      	ldr	r7, [r1, #16]
 80053e6:	2f00      	cmp	r7, #0
 80053e8:	d0a2      	beq.n	8005330 <__sflush_r+0x18>
 80053ea:	680a      	ldr	r2, [r1, #0]
 80053ec:	600f      	str	r7, [r1, #0]
 80053ee:	1bd2      	subs	r2, r2, r7
 80053f0:	9201      	str	r2, [sp, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	079b      	lsls	r3, r3, #30
 80053f6:	d100      	bne.n	80053fa <__sflush_r+0xe2>
 80053f8:	694a      	ldr	r2, [r1, #20]
 80053fa:	60a2      	str	r2, [r4, #8]
 80053fc:	9b01      	ldr	r3, [sp, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	dc00      	bgt.n	8005404 <__sflush_r+0xec>
 8005402:	e795      	b.n	8005330 <__sflush_r+0x18>
 8005404:	003a      	movs	r2, r7
 8005406:	0028      	movs	r0, r5
 8005408:	9b01      	ldr	r3, [sp, #4]
 800540a:	6a21      	ldr	r1, [r4, #32]
 800540c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800540e:	47b0      	blx	r6
 8005410:	2800      	cmp	r0, #0
 8005412:	dc06      	bgt.n	8005422 <__sflush_r+0x10a>
 8005414:	2340      	movs	r3, #64	; 0x40
 8005416:	2001      	movs	r0, #1
 8005418:	89a2      	ldrh	r2, [r4, #12]
 800541a:	4240      	negs	r0, r0
 800541c:	4313      	orrs	r3, r2
 800541e:	81a3      	strh	r3, [r4, #12]
 8005420:	e787      	b.n	8005332 <__sflush_r+0x1a>
 8005422:	9b01      	ldr	r3, [sp, #4]
 8005424:	183f      	adds	r7, r7, r0
 8005426:	1a1b      	subs	r3, r3, r0
 8005428:	9301      	str	r3, [sp, #4]
 800542a:	e7e7      	b.n	80053fc <__sflush_r+0xe4>
 800542c:	20400001 	.word	0x20400001

08005430 <_fflush_r>:
 8005430:	690b      	ldr	r3, [r1, #16]
 8005432:	b570      	push	{r4, r5, r6, lr}
 8005434:	0005      	movs	r5, r0
 8005436:	000c      	movs	r4, r1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d102      	bne.n	8005442 <_fflush_r+0x12>
 800543c:	2500      	movs	r5, #0
 800543e:	0028      	movs	r0, r5
 8005440:	bd70      	pop	{r4, r5, r6, pc}
 8005442:	2800      	cmp	r0, #0
 8005444:	d004      	beq.n	8005450 <_fflush_r+0x20>
 8005446:	6983      	ldr	r3, [r0, #24]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <_fflush_r+0x20>
 800544c:	f7ff f8ca 	bl	80045e4 <__sinit>
 8005450:	4b14      	ldr	r3, [pc, #80]	; (80054a4 <_fflush_r+0x74>)
 8005452:	429c      	cmp	r4, r3
 8005454:	d11b      	bne.n	800548e <_fflush_r+0x5e>
 8005456:	686c      	ldr	r4, [r5, #4]
 8005458:	220c      	movs	r2, #12
 800545a:	5ea3      	ldrsh	r3, [r4, r2]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0ed      	beq.n	800543c <_fflush_r+0xc>
 8005460:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005462:	07d2      	lsls	r2, r2, #31
 8005464:	d404      	bmi.n	8005470 <_fflush_r+0x40>
 8005466:	059b      	lsls	r3, r3, #22
 8005468:	d402      	bmi.n	8005470 <_fflush_r+0x40>
 800546a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800546c:	f7ff f95b 	bl	8004726 <__retarget_lock_acquire_recursive>
 8005470:	0028      	movs	r0, r5
 8005472:	0021      	movs	r1, r4
 8005474:	f7ff ff50 	bl	8005318 <__sflush_r>
 8005478:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800547a:	0005      	movs	r5, r0
 800547c:	07db      	lsls	r3, r3, #31
 800547e:	d4de      	bmi.n	800543e <_fflush_r+0xe>
 8005480:	89a3      	ldrh	r3, [r4, #12]
 8005482:	059b      	lsls	r3, r3, #22
 8005484:	d4db      	bmi.n	800543e <_fflush_r+0xe>
 8005486:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005488:	f7ff f94e 	bl	8004728 <__retarget_lock_release_recursive>
 800548c:	e7d7      	b.n	800543e <_fflush_r+0xe>
 800548e:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <_fflush_r+0x78>)
 8005490:	429c      	cmp	r4, r3
 8005492:	d101      	bne.n	8005498 <_fflush_r+0x68>
 8005494:	68ac      	ldr	r4, [r5, #8]
 8005496:	e7df      	b.n	8005458 <_fflush_r+0x28>
 8005498:	4b04      	ldr	r3, [pc, #16]	; (80054ac <_fflush_r+0x7c>)
 800549a:	429c      	cmp	r4, r3
 800549c:	d1dc      	bne.n	8005458 <_fflush_r+0x28>
 800549e:	68ec      	ldr	r4, [r5, #12]
 80054a0:	e7da      	b.n	8005458 <_fflush_r+0x28>
 80054a2:	46c0      	nop			; (mov r8, r8)
 80054a4:	08005884 	.word	0x08005884
 80054a8:	080058a4 	.word	0x080058a4
 80054ac:	08005864 	.word	0x08005864

080054b0 <_lseek_r>:
 80054b0:	b570      	push	{r4, r5, r6, lr}
 80054b2:	0004      	movs	r4, r0
 80054b4:	0008      	movs	r0, r1
 80054b6:	0011      	movs	r1, r2
 80054b8:	001a      	movs	r2, r3
 80054ba:	2300      	movs	r3, #0
 80054bc:	4d05      	ldr	r5, [pc, #20]	; (80054d4 <_lseek_r+0x24>)
 80054be:	602b      	str	r3, [r5, #0]
 80054c0:	f7fc f911 	bl	80016e6 <_lseek>
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	d103      	bne.n	80054d0 <_lseek_r+0x20>
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d000      	beq.n	80054d0 <_lseek_r+0x20>
 80054ce:	6023      	str	r3, [r4, #0]
 80054d0:	bd70      	pop	{r4, r5, r6, pc}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	20000380 	.word	0x20000380

080054d8 <__swhatbuf_r>:
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	000e      	movs	r6, r1
 80054dc:	001d      	movs	r5, r3
 80054de:	230e      	movs	r3, #14
 80054e0:	5ec9      	ldrsh	r1, [r1, r3]
 80054e2:	0014      	movs	r4, r2
 80054e4:	b096      	sub	sp, #88	; 0x58
 80054e6:	2900      	cmp	r1, #0
 80054e8:	da07      	bge.n	80054fa <__swhatbuf_r+0x22>
 80054ea:	2300      	movs	r3, #0
 80054ec:	602b      	str	r3, [r5, #0]
 80054ee:	89b3      	ldrh	r3, [r6, #12]
 80054f0:	061b      	lsls	r3, r3, #24
 80054f2:	d411      	bmi.n	8005518 <__swhatbuf_r+0x40>
 80054f4:	2380      	movs	r3, #128	; 0x80
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	e00f      	b.n	800551a <__swhatbuf_r+0x42>
 80054fa:	466a      	mov	r2, sp
 80054fc:	f000 f914 	bl	8005728 <_fstat_r>
 8005500:	2800      	cmp	r0, #0
 8005502:	dbf2      	blt.n	80054ea <__swhatbuf_r+0x12>
 8005504:	23f0      	movs	r3, #240	; 0xf0
 8005506:	9901      	ldr	r1, [sp, #4]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	4019      	ands	r1, r3
 800550c:	4b05      	ldr	r3, [pc, #20]	; (8005524 <__swhatbuf_r+0x4c>)
 800550e:	18c9      	adds	r1, r1, r3
 8005510:	424b      	negs	r3, r1
 8005512:	4159      	adcs	r1, r3
 8005514:	6029      	str	r1, [r5, #0]
 8005516:	e7ed      	b.n	80054f4 <__swhatbuf_r+0x1c>
 8005518:	2340      	movs	r3, #64	; 0x40
 800551a:	2000      	movs	r0, #0
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	b016      	add	sp, #88	; 0x58
 8005520:	bd70      	pop	{r4, r5, r6, pc}
 8005522:	46c0      	nop			; (mov r8, r8)
 8005524:	ffffe000 	.word	0xffffe000

08005528 <__smakebuf_r>:
 8005528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800552a:	2602      	movs	r6, #2
 800552c:	898b      	ldrh	r3, [r1, #12]
 800552e:	0005      	movs	r5, r0
 8005530:	000c      	movs	r4, r1
 8005532:	4233      	tst	r3, r6
 8005534:	d006      	beq.n	8005544 <__smakebuf_r+0x1c>
 8005536:	0023      	movs	r3, r4
 8005538:	3347      	adds	r3, #71	; 0x47
 800553a:	6023      	str	r3, [r4, #0]
 800553c:	6123      	str	r3, [r4, #16]
 800553e:	2301      	movs	r3, #1
 8005540:	6163      	str	r3, [r4, #20]
 8005542:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005544:	466a      	mov	r2, sp
 8005546:	ab01      	add	r3, sp, #4
 8005548:	f7ff ffc6 	bl	80054d8 <__swhatbuf_r>
 800554c:	9900      	ldr	r1, [sp, #0]
 800554e:	0007      	movs	r7, r0
 8005550:	0028      	movs	r0, r5
 8005552:	f7ff f8eb 	bl	800472c <_malloc_r>
 8005556:	2800      	cmp	r0, #0
 8005558:	d108      	bne.n	800556c <__smakebuf_r+0x44>
 800555a:	220c      	movs	r2, #12
 800555c:	5ea3      	ldrsh	r3, [r4, r2]
 800555e:	059a      	lsls	r2, r3, #22
 8005560:	d4ef      	bmi.n	8005542 <__smakebuf_r+0x1a>
 8005562:	2203      	movs	r2, #3
 8005564:	4393      	bics	r3, r2
 8005566:	431e      	orrs	r6, r3
 8005568:	81a6      	strh	r6, [r4, #12]
 800556a:	e7e4      	b.n	8005536 <__smakebuf_r+0xe>
 800556c:	4b0f      	ldr	r3, [pc, #60]	; (80055ac <__smakebuf_r+0x84>)
 800556e:	62ab      	str	r3, [r5, #40]	; 0x28
 8005570:	2380      	movs	r3, #128	; 0x80
 8005572:	89a2      	ldrh	r2, [r4, #12]
 8005574:	6020      	str	r0, [r4, #0]
 8005576:	4313      	orrs	r3, r2
 8005578:	81a3      	strh	r3, [r4, #12]
 800557a:	9b00      	ldr	r3, [sp, #0]
 800557c:	6120      	str	r0, [r4, #16]
 800557e:	6163      	str	r3, [r4, #20]
 8005580:	9b01      	ldr	r3, [sp, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00d      	beq.n	80055a2 <__smakebuf_r+0x7a>
 8005586:	0028      	movs	r0, r5
 8005588:	230e      	movs	r3, #14
 800558a:	5ee1      	ldrsh	r1, [r4, r3]
 800558c:	f000 f8de 	bl	800574c <_isatty_r>
 8005590:	2800      	cmp	r0, #0
 8005592:	d006      	beq.n	80055a2 <__smakebuf_r+0x7a>
 8005594:	2203      	movs	r2, #3
 8005596:	89a3      	ldrh	r3, [r4, #12]
 8005598:	4393      	bics	r3, r2
 800559a:	001a      	movs	r2, r3
 800559c:	2301      	movs	r3, #1
 800559e:	4313      	orrs	r3, r2
 80055a0:	81a3      	strh	r3, [r4, #12]
 80055a2:	89a0      	ldrh	r0, [r4, #12]
 80055a4:	4307      	orrs	r7, r0
 80055a6:	81a7      	strh	r7, [r4, #12]
 80055a8:	e7cb      	b.n	8005542 <__smakebuf_r+0x1a>
 80055aa:	46c0      	nop			; (mov r8, r8)
 80055ac:	08004569 	.word	0x08004569

080055b0 <memchr>:
 80055b0:	b2c9      	uxtb	r1, r1
 80055b2:	1882      	adds	r2, r0, r2
 80055b4:	4290      	cmp	r0, r2
 80055b6:	d101      	bne.n	80055bc <memchr+0xc>
 80055b8:	2000      	movs	r0, #0
 80055ba:	4770      	bx	lr
 80055bc:	7803      	ldrb	r3, [r0, #0]
 80055be:	428b      	cmp	r3, r1
 80055c0:	d0fb      	beq.n	80055ba <memchr+0xa>
 80055c2:	3001      	adds	r0, #1
 80055c4:	e7f6      	b.n	80055b4 <memchr+0x4>

080055c6 <memcpy>:
 80055c6:	2300      	movs	r3, #0
 80055c8:	b510      	push	{r4, lr}
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d100      	bne.n	80055d0 <memcpy+0xa>
 80055ce:	bd10      	pop	{r4, pc}
 80055d0:	5ccc      	ldrb	r4, [r1, r3]
 80055d2:	54c4      	strb	r4, [r0, r3]
 80055d4:	3301      	adds	r3, #1
 80055d6:	e7f8      	b.n	80055ca <memcpy+0x4>

080055d8 <memmove>:
 80055d8:	b510      	push	{r4, lr}
 80055da:	4288      	cmp	r0, r1
 80055dc:	d902      	bls.n	80055e4 <memmove+0xc>
 80055de:	188b      	adds	r3, r1, r2
 80055e0:	4298      	cmp	r0, r3
 80055e2:	d303      	bcc.n	80055ec <memmove+0x14>
 80055e4:	2300      	movs	r3, #0
 80055e6:	e007      	b.n	80055f8 <memmove+0x20>
 80055e8:	5c8b      	ldrb	r3, [r1, r2]
 80055ea:	5483      	strb	r3, [r0, r2]
 80055ec:	3a01      	subs	r2, #1
 80055ee:	d2fb      	bcs.n	80055e8 <memmove+0x10>
 80055f0:	bd10      	pop	{r4, pc}
 80055f2:	5ccc      	ldrb	r4, [r1, r3]
 80055f4:	54c4      	strb	r4, [r0, r3]
 80055f6:	3301      	adds	r3, #1
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d1fa      	bne.n	80055f2 <memmove+0x1a>
 80055fc:	e7f8      	b.n	80055f0 <memmove+0x18>
	...

08005600 <__malloc_lock>:
 8005600:	b510      	push	{r4, lr}
 8005602:	4802      	ldr	r0, [pc, #8]	; (800560c <__malloc_lock+0xc>)
 8005604:	f7ff f88f 	bl	8004726 <__retarget_lock_acquire_recursive>
 8005608:	bd10      	pop	{r4, pc}
 800560a:	46c0      	nop			; (mov r8, r8)
 800560c:	20000378 	.word	0x20000378

08005610 <__malloc_unlock>:
 8005610:	b510      	push	{r4, lr}
 8005612:	4802      	ldr	r0, [pc, #8]	; (800561c <__malloc_unlock+0xc>)
 8005614:	f7ff f888 	bl	8004728 <__retarget_lock_release_recursive>
 8005618:	bd10      	pop	{r4, pc}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	20000378 	.word	0x20000378

08005620 <_free_r>:
 8005620:	b570      	push	{r4, r5, r6, lr}
 8005622:	0005      	movs	r5, r0
 8005624:	2900      	cmp	r1, #0
 8005626:	d010      	beq.n	800564a <_free_r+0x2a>
 8005628:	1f0c      	subs	r4, r1, #4
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	da00      	bge.n	8005632 <_free_r+0x12>
 8005630:	18e4      	adds	r4, r4, r3
 8005632:	0028      	movs	r0, r5
 8005634:	f7ff ffe4 	bl	8005600 <__malloc_lock>
 8005638:	4a1d      	ldr	r2, [pc, #116]	; (80056b0 <_free_r+0x90>)
 800563a:	6813      	ldr	r3, [r2, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d105      	bne.n	800564c <_free_r+0x2c>
 8005640:	6063      	str	r3, [r4, #4]
 8005642:	6014      	str	r4, [r2, #0]
 8005644:	0028      	movs	r0, r5
 8005646:	f7ff ffe3 	bl	8005610 <__malloc_unlock>
 800564a:	bd70      	pop	{r4, r5, r6, pc}
 800564c:	42a3      	cmp	r3, r4
 800564e:	d908      	bls.n	8005662 <_free_r+0x42>
 8005650:	6821      	ldr	r1, [r4, #0]
 8005652:	1860      	adds	r0, r4, r1
 8005654:	4283      	cmp	r3, r0
 8005656:	d1f3      	bne.n	8005640 <_free_r+0x20>
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	1841      	adds	r1, r0, r1
 800565e:	6021      	str	r1, [r4, #0]
 8005660:	e7ee      	b.n	8005640 <_free_r+0x20>
 8005662:	001a      	movs	r2, r3
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <_free_r+0x4e>
 800566a:	42a3      	cmp	r3, r4
 800566c:	d9f9      	bls.n	8005662 <_free_r+0x42>
 800566e:	6811      	ldr	r1, [r2, #0]
 8005670:	1850      	adds	r0, r2, r1
 8005672:	42a0      	cmp	r0, r4
 8005674:	d10b      	bne.n	800568e <_free_r+0x6e>
 8005676:	6820      	ldr	r0, [r4, #0]
 8005678:	1809      	adds	r1, r1, r0
 800567a:	1850      	adds	r0, r2, r1
 800567c:	6011      	str	r1, [r2, #0]
 800567e:	4283      	cmp	r3, r0
 8005680:	d1e0      	bne.n	8005644 <_free_r+0x24>
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	1841      	adds	r1, r0, r1
 8005688:	6011      	str	r1, [r2, #0]
 800568a:	6053      	str	r3, [r2, #4]
 800568c:	e7da      	b.n	8005644 <_free_r+0x24>
 800568e:	42a0      	cmp	r0, r4
 8005690:	d902      	bls.n	8005698 <_free_r+0x78>
 8005692:	230c      	movs	r3, #12
 8005694:	602b      	str	r3, [r5, #0]
 8005696:	e7d5      	b.n	8005644 <_free_r+0x24>
 8005698:	6821      	ldr	r1, [r4, #0]
 800569a:	1860      	adds	r0, r4, r1
 800569c:	4283      	cmp	r3, r0
 800569e:	d103      	bne.n	80056a8 <_free_r+0x88>
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	1841      	adds	r1, r0, r1
 80056a6:	6021      	str	r1, [r4, #0]
 80056a8:	6063      	str	r3, [r4, #4]
 80056aa:	6054      	str	r4, [r2, #4]
 80056ac:	e7ca      	b.n	8005644 <_free_r+0x24>
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	20000274 	.word	0x20000274

080056b4 <_realloc_r>:
 80056b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b6:	0007      	movs	r7, r0
 80056b8:	000d      	movs	r5, r1
 80056ba:	0016      	movs	r6, r2
 80056bc:	2900      	cmp	r1, #0
 80056be:	d105      	bne.n	80056cc <_realloc_r+0x18>
 80056c0:	0011      	movs	r1, r2
 80056c2:	f7ff f833 	bl	800472c <_malloc_r>
 80056c6:	0004      	movs	r4, r0
 80056c8:	0020      	movs	r0, r4
 80056ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056cc:	2a00      	cmp	r2, #0
 80056ce:	d103      	bne.n	80056d8 <_realloc_r+0x24>
 80056d0:	f7ff ffa6 	bl	8005620 <_free_r>
 80056d4:	0034      	movs	r4, r6
 80056d6:	e7f7      	b.n	80056c8 <_realloc_r+0x14>
 80056d8:	f000 f84a 	bl	8005770 <_malloc_usable_size_r>
 80056dc:	002c      	movs	r4, r5
 80056de:	42b0      	cmp	r0, r6
 80056e0:	d2f2      	bcs.n	80056c8 <_realloc_r+0x14>
 80056e2:	0031      	movs	r1, r6
 80056e4:	0038      	movs	r0, r7
 80056e6:	f7ff f821 	bl	800472c <_malloc_r>
 80056ea:	1e04      	subs	r4, r0, #0
 80056ec:	d0ec      	beq.n	80056c8 <_realloc_r+0x14>
 80056ee:	0029      	movs	r1, r5
 80056f0:	0032      	movs	r2, r6
 80056f2:	f7ff ff68 	bl	80055c6 <memcpy>
 80056f6:	0029      	movs	r1, r5
 80056f8:	0038      	movs	r0, r7
 80056fa:	f7ff ff91 	bl	8005620 <_free_r>
 80056fe:	e7e3      	b.n	80056c8 <_realloc_r+0x14>

08005700 <_read_r>:
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	0004      	movs	r4, r0
 8005704:	0008      	movs	r0, r1
 8005706:	0011      	movs	r1, r2
 8005708:	001a      	movs	r2, r3
 800570a:	2300      	movs	r3, #0
 800570c:	4d05      	ldr	r5, [pc, #20]	; (8005724 <_read_r+0x24>)
 800570e:	602b      	str	r3, [r5, #0]
 8005710:	f7fb ffab 	bl	800166a <_read>
 8005714:	1c43      	adds	r3, r0, #1
 8005716:	d103      	bne.n	8005720 <_read_r+0x20>
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d000      	beq.n	8005720 <_read_r+0x20>
 800571e:	6023      	str	r3, [r4, #0]
 8005720:	bd70      	pop	{r4, r5, r6, pc}
 8005722:	46c0      	nop			; (mov r8, r8)
 8005724:	20000380 	.word	0x20000380

08005728 <_fstat_r>:
 8005728:	2300      	movs	r3, #0
 800572a:	b570      	push	{r4, r5, r6, lr}
 800572c:	4d06      	ldr	r5, [pc, #24]	; (8005748 <_fstat_r+0x20>)
 800572e:	0004      	movs	r4, r0
 8005730:	0008      	movs	r0, r1
 8005732:	0011      	movs	r1, r2
 8005734:	602b      	str	r3, [r5, #0]
 8005736:	f7fb ffbf 	bl	80016b8 <_fstat>
 800573a:	1c43      	adds	r3, r0, #1
 800573c:	d103      	bne.n	8005746 <_fstat_r+0x1e>
 800573e:	682b      	ldr	r3, [r5, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d000      	beq.n	8005746 <_fstat_r+0x1e>
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	bd70      	pop	{r4, r5, r6, pc}
 8005748:	20000380 	.word	0x20000380

0800574c <_isatty_r>:
 800574c:	2300      	movs	r3, #0
 800574e:	b570      	push	{r4, r5, r6, lr}
 8005750:	4d06      	ldr	r5, [pc, #24]	; (800576c <_isatty_r+0x20>)
 8005752:	0004      	movs	r4, r0
 8005754:	0008      	movs	r0, r1
 8005756:	602b      	str	r3, [r5, #0]
 8005758:	f7fb ffbc 	bl	80016d4 <_isatty>
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	d103      	bne.n	8005768 <_isatty_r+0x1c>
 8005760:	682b      	ldr	r3, [r5, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d000      	beq.n	8005768 <_isatty_r+0x1c>
 8005766:	6023      	str	r3, [r4, #0]
 8005768:	bd70      	pop	{r4, r5, r6, pc}
 800576a:	46c0      	nop			; (mov r8, r8)
 800576c:	20000380 	.word	0x20000380

08005770 <_malloc_usable_size_r>:
 8005770:	1f0b      	subs	r3, r1, #4
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	1f18      	subs	r0, r3, #4
 8005776:	2b00      	cmp	r3, #0
 8005778:	da01      	bge.n	800577e <_malloc_usable_size_r+0xe>
 800577a:	580b      	ldr	r3, [r1, r0]
 800577c:	18c0      	adds	r0, r0, r3
 800577e:	4770      	bx	lr

08005780 <_init>:
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005786:	bc08      	pop	{r3}
 8005788:	469e      	mov	lr, r3
 800578a:	4770      	bx	lr

0800578c <_fini>:
 800578c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005792:	bc08      	pop	{r3}
 8005794:	469e      	mov	lr, r3
 8005796:	4770      	bx	lr
